// This file is generated by KDAB's kdwsdl2cpp from WsSoap.wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "wssoap.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <QSharedPointer>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

KDSoapValue TNS__GetSites::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetSites"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetSites::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetSites::TNS__GetSites()
{
}

TNS__GetSites::~TNS__GetSites()
{
}


KDSoapValue TNS__GetNames::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetNames"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetNames::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetNames::TNS__GetNames()
{
}

TNS__GetNames::~TNS__GetNames()
{
}


class TNS__GetSearchPhrasesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 mGetSearchPhrasesResult;
    bool mGetSearchPhrasesResult_nil;
};

TNS__GetSearchPhrasesResponse::PrivateDPtr::PrivateDPtr()
    : mGetSearchPhrasesResult_nil(true)
{
}


void TNS__GetSearchPhrasesResponse::setGetSearchPhrasesResult( const Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1& _getSearchPhrasesResult )
{
    d_ptr->mGetSearchPhrasesResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetSearchPhrasesResult = _getSearchPhrasesResult;
}

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 TNS__GetSearchPhrasesResponse::getSearchPhrasesResult() const
{
    return d_ptr->mGetSearchPhrasesResult;
}

KDSoapValue TNS__GetSearchPhrasesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetSearchPhrasesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetSearchPhrasesResult_nil) {
        KDSoapValue _valueGetSearchPhrasesResult(d_ptr->mGetSearchPhrasesResult.serialize(QString::fromLatin1("GetSearchPhrasesResult")));// elementargumentserializer.cpp:102
        _valueGetSearchPhrasesResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetSearchPhrasesResult.setQualified(true);
        _valueGetSearchPhrasesResult.setNillable(true);
        if (!_valueGetSearchPhrasesResult.isNil())
        args.append(_valueGetSearchPhrasesResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetSearchPhrasesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetSearchPhrasesResult")) {// converter_complextype.cpp:354
            d_ptr->mGetSearchPhrasesResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetSearchPhrasesResponse::TNS__GetSearchPhrasesResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetSearchPhrasesResponse::~TNS__GetSearchPhrasesResponse()
{
}

TNS__GetSearchPhrasesResponse::TNS__GetSearchPhrasesResponse( const TNS__GetSearchPhrasesResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetSearchPhrasesResponse&  TNS__GetSearchPhrasesResponse::operator=( const TNS__GetSearchPhrasesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__SetNameResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetNameResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__SetNameResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__SetNameResponse::TNS__SetNameResponse()
{
}

TNS__SetNameResponse::~TNS__SetNameResponse()
{
}


class Q1__ArrayOfKeyValueOfintstring::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfintstring > mKeyValueOfintstring;
    bool mKeyValueOfintstring_nil;
};

Q1__ArrayOfKeyValueOfintstring::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfintstring_nil(true)
{
}


void Q1__ArrayOfKeyValueOfintstring::setKeyValueOfintstring( const QList< Q1__KeyValueOfintstring >& _keyValueOfintstring )
{
    d_ptr->mKeyValueOfintstring_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfintstring = _keyValueOfintstring;
}

QList< Q1__KeyValueOfintstring > Q1__ArrayOfKeyValueOfintstring::keyValueOfintstring() const
{
    return d_ptr->mKeyValueOfintstring;
}

KDSoapValue Q1__ArrayOfKeyValueOfintstring::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfintstring"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfintstring.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfintstring(d_ptr->mKeyValueOfintstring.at(i).serialize(QString::fromLatin1("KeyValueOfintstring")));// elementargumentserializer.cpp:102
        _valueKeyValueOfintstring.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfintstring.setQualified(true);
        args.append(_valueKeyValueOfintstring);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfintstring::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfintstring")) {// converter_complextype.cpp:354
            Q1__KeyValueOfintstring mKeyValueOfintstringTemp;// converter_complextype.cpp:412
            mKeyValueOfintstringTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfintstring.append(mKeyValueOfintstringTemp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfintstring::Q1__ArrayOfKeyValueOfintstring()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfintstring::~Q1__ArrayOfKeyValueOfintstring()
{
}

Q1__ArrayOfKeyValueOfintstring::Q1__ArrayOfKeyValueOfintstring( const Q1__ArrayOfKeyValueOfintstring& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfintstring&  Q1__ArrayOfKeyValueOfintstring::operator=( const Q1__ArrayOfKeyValueOfintstring& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetNamesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfintstring mGetNamesResult;
    bool mGetNamesResult_nil;
};

TNS__GetNamesResponse::PrivateDPtr::PrivateDPtr()
    : mGetNamesResult_nil(true)
{
}


void TNS__GetNamesResponse::setGetNamesResult( const Q1__ArrayOfKeyValueOfintstring& _getNamesResult )
{
    d_ptr->mGetNamesResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetNamesResult = _getNamesResult;
}

Q1__ArrayOfKeyValueOfintstring TNS__GetNamesResponse::getNamesResult() const
{
    return d_ptr->mGetNamesResult;
}

KDSoapValue TNS__GetNamesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetNamesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetNamesResult_nil) {
        KDSoapValue _valueGetNamesResult(d_ptr->mGetNamesResult.serialize(QString::fromLatin1("GetNamesResult")));// elementargumentserializer.cpp:102
        _valueGetNamesResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetNamesResult.setQualified(true);
        _valueGetNamesResult.setNillable(true);
        if (!_valueGetNamesResult.isNil())
        args.append(_valueGetNamesResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetNamesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetNamesResult")) {// converter_complextype.cpp:354
            d_ptr->mGetNamesResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetNamesResponse::TNS__GetNamesResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetNamesResponse::~TNS__GetNamesResponse()
{
}

TNS__GetNamesResponse::TNS__GetNamesResponse( const TNS__GetNamesResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetNamesResponse&  TNS__GetNamesResponse::operator=( const TNS__GetNamesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__GetSearchPhrases::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetSearchPhrases"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetSearchPhrases::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetSearchPhrases::TNS__GetSearchPhrases()
{
}

TNS__GetSearchPhrases::~TNS__GetSearchPhrases()
{
}


class TNS__GetDailyStatsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 mGetDailyStatsResult;
    bool mGetDailyStatsResult_nil;
};

TNS__GetDailyStatsResponse::PrivateDPtr::PrivateDPtr()
    : mGetDailyStatsResult_nil(true)
{
}


void TNS__GetDailyStatsResponse::setGetDailyStatsResult( const Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1& _getDailyStatsResult )
{
    d_ptr->mGetDailyStatsResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetDailyStatsResult = _getDailyStatsResult;
}

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 TNS__GetDailyStatsResponse::getDailyStatsResult() const
{
    return d_ptr->mGetDailyStatsResult;
}

KDSoapValue TNS__GetDailyStatsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetDailyStatsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetDailyStatsResult_nil) {
        KDSoapValue _valueGetDailyStatsResult(d_ptr->mGetDailyStatsResult.serialize(QString::fromLatin1("GetDailyStatsResult")));// elementargumentserializer.cpp:102
        _valueGetDailyStatsResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetDailyStatsResult.setQualified(true);
        _valueGetDailyStatsResult.setNillable(true);
        if (!_valueGetDailyStatsResult.isNil())
        args.append(_valueGetDailyStatsResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetDailyStatsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetDailyStatsResult")) {// converter_complextype.cpp:354
            d_ptr->mGetDailyStatsResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetDailyStatsResponse::TNS__GetDailyStatsResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetDailyStatsResponse::~TNS__GetDailyStatsResponse()
{
}

TNS__GetDailyStatsResponse::TNS__GetDailyStatsResponse( const TNS__GetDailyStatsResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetDailyStatsResponse&  TNS__GetDailyStatsResponse::operator=( const TNS__GetDailyStatsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 > mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
    bool mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_nil;
};

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_nil(true)
{
}


void Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::setKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1( const QList< Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >& _keyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 )
{
    d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = _keyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
}

QList< Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 > Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::keyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1() const
{
    return d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
}

KDSoapValue Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1.at(i).serialize(QString::fromLatin1("KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1")));// elementargumentserializer.cpp:102
        _valueKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1.setQualified(true);
        args.append(_valueKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1")) {// converter_complextype.cpp:354
            Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1Temp;// converter_complextype.cpp:412
            mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1.append(mKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1Temp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::~Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1()
{
}

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1( const Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1&  Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::operator=( const Q1__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__ArrayOfstring::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QStringList mString;
    bool mString_nil;
};

Q1__ArrayOfstring::PrivateDPtr::PrivateDPtr()
    : mString_nil(true)
{
}


void Q1__ArrayOfstring::setString( const QStringList& _string )
{
    d_ptr->mString_nil = false;// converter_complextype.cpp:277
    d_ptr->mString = _string;
}

QStringList Q1__ArrayOfstring::string() const
{
    return d_ptr->mString;
}

KDSoapValue Q1__ArrayOfstring::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfstring"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mString.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueString(QString::fromLatin1("string"), QVariant::fromValue(d_ptr->mString.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueString.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueString.setQualified(true);
        _valueString.setNillable(true);
        args.append(_valueString);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfstring::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("string")) {// converter_complextype.cpp:354
            QString mStringTemp;// converter_complextype.cpp:412
            mStringTemp = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mString.append(mStringTemp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfstring::Q1__ArrayOfstring()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfstring::~Q1__ArrayOfstring()
{
}

Q1__ArrayOfstring::Q1__ArrayOfstring( const Q1__ArrayOfstring& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfstring&  Q1__ArrayOfstring::operator=( const Q1__ArrayOfstring& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfintstring::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mKey;
    QString mValue;
};

Q1__KeyValueOfintstring::PrivateDPtr::PrivateDPtr()
    : mKey(0)
{
}


void Q1__KeyValueOfintstring::setKey( int _key )
{
    d_ptr->mKey = _key;
}

int Q1__KeyValueOfintstring::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfintstring::setValue( const QString& _value )
{
    d_ptr->mValue = _value;
}

QString Q1__KeyValueOfintstring::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfintstring::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfintstring"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    _valueValue.setNillable(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfintstring::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = val.value().value<int>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue = val.value().value<QString>();// converter_complextype.cpp:367
        }
    }
}

Q1__KeyValueOfintstring::Q1__KeyValueOfintstring()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfintstring::~Q1__KeyValueOfintstring()
{
}

Q1__KeyValueOfintstring::Q1__KeyValueOfintstring( const Q1__KeyValueOfintstring& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfintstring&  Q1__KeyValueOfintstring::operator=( const Q1__KeyValueOfintstring& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfstringArrayOfstringty7Ep6D1 > mKeyValueOfstringArrayOfstringty7Ep6D1;
    bool mKeyValueOfstringArrayOfstringty7Ep6D1_nil;
};

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfstringArrayOfstringty7Ep6D1_nil(true)
{
}


void Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::setKeyValueOfstringArrayOfstringty7Ep6D1( const QList< Q1__KeyValueOfstringArrayOfstringty7Ep6D1 >& _keyValueOfstringArrayOfstringty7Ep6D1 )
{
    d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1 = _keyValueOfstringArrayOfstringty7Ep6D1;
}

QList< Q1__KeyValueOfstringArrayOfstringty7Ep6D1 > Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::keyValueOfstringArrayOfstringty7Ep6D1() const
{
    return d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1;
}

KDSoapValue Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfstringArrayOfstringty7Ep6D1(d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1.at(i).serialize(QString::fromLatin1("KeyValueOfstringArrayOfstringty7Ep6D1")));// elementargumentserializer.cpp:102
        _valueKeyValueOfstringArrayOfstringty7Ep6D1.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfstringArrayOfstringty7Ep6D1.setQualified(true);
        args.append(_valueKeyValueOfstringArrayOfstringty7Ep6D1);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfstringArrayOfstringty7Ep6D1")) {// converter_complextype.cpp:354
            Q1__KeyValueOfstringArrayOfstringty7Ep6D1 mKeyValueOfstringArrayOfstringty7Ep6D1Temp;// converter_complextype.cpp:412
            mKeyValueOfstringArrayOfstringty7Ep6D1Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfstringArrayOfstringty7Ep6D1.append(mKeyValueOfstringArrayOfstringty7Ep6D1Temp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::~Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1()
{
}

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1( const Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1&  Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::operator=( const Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__SendAmountDictionary::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfstringint mNamesAmountDictionary;
    bool mNamesAmountDictionary_nil;
    QString mUrl;
    bool mUrl_nil;
};

TNS__SendAmountDictionary::PrivateDPtr::PrivateDPtr()
    : mNamesAmountDictionary_nil(true), mUrl_nil(true)
{
}


void TNS__SendAmountDictionary::setNamesAmountDictionary( const Q1__ArrayOfKeyValueOfstringint& _namesAmountDictionary )
{
    d_ptr->mNamesAmountDictionary_nil = false;// converter_complextype.cpp:277
    d_ptr->mNamesAmountDictionary = _namesAmountDictionary;
}

Q1__ArrayOfKeyValueOfstringint TNS__SendAmountDictionary::namesAmountDictionary() const
{
    return d_ptr->mNamesAmountDictionary;
}

void TNS__SendAmountDictionary::setUrl( const QString& _url )
{
    d_ptr->mUrl_nil = false;// converter_complextype.cpp:277
    d_ptr->mUrl = _url;
}

QString TNS__SendAmountDictionary::url() const
{
    return d_ptr->mUrl;
}

KDSoapValue TNS__SendAmountDictionary::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SendAmountDictionary"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mNamesAmountDictionary_nil) {
        KDSoapValue _valueNamesAmountDictionary(d_ptr->mNamesAmountDictionary.serialize(QString::fromLatin1("namesAmountDictionary")));// elementargumentserializer.cpp:102
        _valueNamesAmountDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueNamesAmountDictionary.setQualified(true);
        _valueNamesAmountDictionary.setNillable(true);
        if (!_valueNamesAmountDictionary.isNil())
        args.append(_valueNamesAmountDictionary);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUrl_nil) {
        KDSoapValue _valueUrl(QString::fromLatin1("url"), QVariant::fromValue(d_ptr->mUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueUrl.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueUrl.setQualified(true);
        _valueUrl.setNillable(true);
        if (!_valueUrl.isNil())
        args.append(_valueUrl);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__SendAmountDictionary::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("namesAmountDictionary")) {// converter_complextype.cpp:354
            d_ptr->mNamesAmountDictionary.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("url")) {// converter_complextype.cpp:354
            d_ptr->mUrl = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mUrl_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__SendAmountDictionary::TNS__SendAmountDictionary()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SendAmountDictionary::~TNS__SendAmountDictionary()
{
}

TNS__SendAmountDictionary::TNS__SendAmountDictionary( const TNS__SendAmountDictionary& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SendAmountDictionary&  TNS__SendAmountDictionary::operator=( const TNS__SendAmountDictionary& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__SendAmountDictionaryResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SendAmountDictionaryResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__SendAmountDictionaryResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__SendAmountDictionaryResponse::TNS__SendAmountDictionaryResponse()
{
}

TNS__SendAmountDictionaryResponse::~TNS__SendAmountDictionaryResponse()
{
}


KDSoapValue TNS__GetStats::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetStats"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetStats::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetStats::TNS__GetStats()
{
}

TNS__GetStats::~TNS__GetStats()
{
}


class TNS__SetSite::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mUrl;
    bool mUrl_nil;
};

TNS__SetSite::PrivateDPtr::PrivateDPtr()
    : mUrl_nil(true)
{
}


void TNS__SetSite::setUrl( const QString& _url )
{
    d_ptr->mUrl_nil = false;// converter_complextype.cpp:277
    d_ptr->mUrl = _url;
}

QString TNS__SetSite::url() const
{
    return d_ptr->mUrl;
}

KDSoapValue TNS__SetSite::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetSite"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mUrl_nil) {
        KDSoapValue _valueUrl(QString::fromLatin1("url"), QVariant::fromValue(d_ptr->mUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueUrl.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueUrl.setQualified(true);
        _valueUrl.setNillable(true);
        if (!_valueUrl.isNil())
        args.append(_valueUrl);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__SetSite::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("url")) {// converter_complextype.cpp:354
            d_ptr->mUrl = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mUrl_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__SetSite::TNS__SetSite()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SetSite::~TNS__SetSite()
{
}

TNS__SetSite::TNS__SetSite( const TNS__SetSite& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SetSite&  TNS__SetSite::operator=( const TNS__SetSite& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetLinkResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mGetLinkResult;
    bool mGetLinkResult_nil;
};

TNS__GetLinkResponse::PrivateDPtr::PrivateDPtr()
    : mGetLinkResult_nil(true)
{
}


void TNS__GetLinkResponse::setGetLinkResult( const QString& _getLinkResult )
{
    d_ptr->mGetLinkResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetLinkResult = _getLinkResult;
}

QString TNS__GetLinkResponse::getLinkResult() const
{
    return d_ptr->mGetLinkResult;
}

KDSoapValue TNS__GetLinkResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetLinkResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetLinkResult_nil) {
        KDSoapValue _valueGetLinkResult(QString::fromLatin1("GetLinkResult"), QVariant::fromValue(d_ptr->mGetLinkResult), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueGetLinkResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetLinkResult.setQualified(true);
        _valueGetLinkResult.setNillable(true);
        if (!_valueGetLinkResult.isNil())
        args.append(_valueGetLinkResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetLinkResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetLinkResult")) {// converter_complextype.cpp:354
            d_ptr->mGetLinkResult = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mGetLinkResult_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__GetLinkResponse::TNS__GetLinkResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetLinkResponse::~TNS__GetLinkResponse()
{
}

TNS__GetLinkResponse::TNS__GetLinkResponse( const TNS__GetLinkResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetLinkResponse&  TNS__GetLinkResponse::operator=( const TNS__GetLinkResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__SendLinks::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfstring mLinks;
    bool mLinks_nil;
    QString mUrl;
    bool mUrl_nil;
};

TNS__SendLinks::PrivateDPtr::PrivateDPtr()
    : mLinks_nil(true), mUrl_nil(true)
{
}


void TNS__SendLinks::setLinks( const Q1__ArrayOfstring& _links )
{
    d_ptr->mLinks_nil = false;// converter_complextype.cpp:277
    d_ptr->mLinks = _links;
}

Q1__ArrayOfstring TNS__SendLinks::links() const
{
    return d_ptr->mLinks;
}

void TNS__SendLinks::setUrl( const QString& _url )
{
    d_ptr->mUrl_nil = false;// converter_complextype.cpp:277
    d_ptr->mUrl = _url;
}

QString TNS__SendLinks::url() const
{
    return d_ptr->mUrl;
}

KDSoapValue TNS__SendLinks::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SendLinks"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mLinks_nil) {
        KDSoapValue _valueLinks(d_ptr->mLinks.serialize(QString::fromLatin1("links")));// elementargumentserializer.cpp:102
        _valueLinks.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueLinks.setQualified(true);
        _valueLinks.setNillable(true);
        if (!_valueLinks.isNil())
        args.append(_valueLinks);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mUrl_nil) {
        KDSoapValue _valueUrl(QString::fromLatin1("url"), QVariant::fromValue(d_ptr->mUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueUrl.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueUrl.setQualified(true);
        _valueUrl.setNillable(true);
        if (!_valueUrl.isNil())
        args.append(_valueUrl);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__SendLinks::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("links")) {// converter_complextype.cpp:354
            d_ptr->mLinks.deserialize(val);// converter_complextype.cpp:371
        }
        else if (_name == QLatin1String("url")) {// converter_complextype.cpp:354
            d_ptr->mUrl = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mUrl_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__SendLinks::TNS__SendLinks()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SendLinks::~TNS__SendLinks()
{
}

TNS__SendLinks::TNS__SendLinks( const TNS__SendLinks& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SendLinks&  TNS__SendLinks::operator=( const TNS__SendLinks& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetSitesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfintstring mGetSitesResult;
    bool mGetSitesResult_nil;
};

TNS__GetSitesResponse::PrivateDPtr::PrivateDPtr()
    : mGetSitesResult_nil(true)
{
}


void TNS__GetSitesResponse::setGetSitesResult( const Q1__ArrayOfKeyValueOfintstring& _getSitesResult )
{
    d_ptr->mGetSitesResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetSitesResult = _getSitesResult;
}

Q1__ArrayOfKeyValueOfintstring TNS__GetSitesResponse::getSitesResult() const
{
    return d_ptr->mGetSitesResult;
}

KDSoapValue TNS__GetSitesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetSitesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetSitesResult_nil) {
        KDSoapValue _valueGetSitesResult(d_ptr->mGetSitesResult.serialize(QString::fromLatin1("GetSitesResult")));// elementargumentserializer.cpp:102
        _valueGetSitesResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetSitesResult.setQualified(true);
        _valueGetSitesResult.setNillable(true);
        if (!_valueGetSitesResult.isNil())
        args.append(_valueGetSitesResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetSitesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetSitesResult")) {// converter_complextype.cpp:354
            d_ptr->mGetSitesResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetSitesResponse::TNS__GetSitesResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetSitesResponse::~TNS__GetSitesResponse()
{
}

TNS__GetSitesResponse::TNS__GetSitesResponse( const TNS__GetSitesResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetSitesResponse&  TNS__GetSitesResponse::operator=( const TNS__GetSitesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__SetSiteResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetSiteResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__SetSiteResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__SetSiteResponse::TNS__SetSiteResponse()
{
}

TNS__SetSiteResponse::~TNS__SetSiteResponse()
{
}


class TNS__GetStatsByName::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
};

TNS__GetStatsByName::PrivateDPtr::PrivateDPtr()
    : mName_nil(true)
{
}


void TNS__GetStatsByName::setName( const QString& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

QString TNS__GetStatsByName::name() const
{
    return d_ptr->mName;
}

KDSoapValue TNS__GetStatsByName::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetStatsByName"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetStatsByName::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mName_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__GetStatsByName::TNS__GetStatsByName()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetStatsByName::~TNS__GetStatsByName()
{
}

TNS__GetStatsByName::TNS__GetStatsByName( const TNS__GetStatsByName& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetStatsByName&  TNS__GetStatsByName::operator=( const TNS__GetStatsByName& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q9__Page::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mId;
    bool mId_nil;
    QString mSite;
    bool mSite_nil;
    QString mSitePage;
    bool mSitePage_nil;
};

Q9__Page::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mSite_nil(true), mSitePage_nil(true)
{
}


void Q9__Page::setId( int _id )
{
    d_ptr->mId_nil = false;// converter_complextype.cpp:277
    d_ptr->mId = _id;
}

int Q9__Page::id() const
{
    return d_ptr->mId;
}

void Q9__Page::setSite( const QString& _site )
{
    d_ptr->mSite_nil = false;// converter_complextype.cpp:277
    d_ptr->mSite = _site;
}

QString Q9__Page::site() const
{
    return d_ptr->mSite;
}

void Q9__Page::setSitePage( const QString& _sitePage )
{
    d_ptr->mSitePage_nil = false;// converter_complextype.cpp:277
    d_ptr->mSitePage = _sitePage;
}

QString Q9__Page::sitePage() const
{
    return d_ptr->mSitePage;
}

KDSoapValue Q9__Page::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"), QString::fromLatin1("Page"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("Id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
        _valueId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"));
        _valueId.setQualified(true);
        if (!_valueId.isNil())
        args.append(_valueId);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSite_nil) {
        KDSoapValue _valueSite(QString::fromLatin1("Site"), QVariant::fromValue(d_ptr->mSite), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSite.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"));
        _valueSite.setQualified(true);
        _valueSite.setNillable(true);
        if (!_valueSite.isNil())
        args.append(_valueSite);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSitePage_nil) {
        KDSoapValue _valueSitePage(QString::fromLatin1("SitePage"), QVariant::fromValue(d_ptr->mSitePage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSitePage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"));
        _valueSitePage.setQualified(true);
        _valueSitePage.setNillable(true);
        if (!_valueSitePage.isNil())
        args.append(_valueSitePage);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q9__Page::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Id")) {// converter_complextype.cpp:354
            d_ptr->mId = val.value().value<int>();// converter_complextype.cpp:367
            d_ptr->mId_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("Site")) {// converter_complextype.cpp:354
            d_ptr->mSite = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSite_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("SitePage")) {// converter_complextype.cpp:354
            d_ptr->mSitePage = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSitePage_nil = false;// converter_complextype.cpp:369
        }
    }
}

Q9__Page::Q9__Page()
    : d_ptr(new PrivateDPtr)
{
}

Q9__Page::~Q9__Page()
{
}

Q9__Page::Q9__Page( const Q9__Page& other )
    : d_ptr( other.d_ptr )
{
}

Q9__Page&  Q9__Page::operator=( const Q9__Page& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__GetNamesDictionary::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetNamesDictionary"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetNamesDictionary::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetNamesDictionary::TNS__GetNamesDictionary()
{
}

TNS__GetNamesDictionary::~TNS__GetNamesDictionary()
{
}


class TNS__GetNamesDictionaryResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 mGetNamesDictionaryResult;
    bool mGetNamesDictionaryResult_nil;
};

TNS__GetNamesDictionaryResponse::PrivateDPtr::PrivateDPtr()
    : mGetNamesDictionaryResult_nil(true)
{
}


void TNS__GetNamesDictionaryResponse::setGetNamesDictionaryResult( const Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1& _getNamesDictionaryResult )
{
    d_ptr->mGetNamesDictionaryResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetNamesDictionaryResult = _getNamesDictionaryResult;
}

Q1__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 TNS__GetNamesDictionaryResponse::getNamesDictionaryResult() const
{
    return d_ptr->mGetNamesDictionaryResult;
}

KDSoapValue TNS__GetNamesDictionaryResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetNamesDictionaryResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetNamesDictionaryResult_nil) {
        KDSoapValue _valueGetNamesDictionaryResult(d_ptr->mGetNamesDictionaryResult.serialize(QString::fromLatin1("GetNamesDictionaryResult")));// elementargumentserializer.cpp:102
        _valueGetNamesDictionaryResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetNamesDictionaryResult.setQualified(true);
        _valueGetNamesDictionaryResult.setNillable(true);
        if (!_valueGetNamesDictionaryResult.isNil())
        args.append(_valueGetNamesDictionaryResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetNamesDictionaryResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetNamesDictionaryResult")) {// converter_complextype.cpp:354
            d_ptr->mGetNamesDictionaryResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetNamesDictionaryResponse::TNS__GetNamesDictionaryResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetNamesDictionaryResponse::~TNS__GetNamesDictionaryResponse()
{
}

TNS__GetNamesDictionaryResponse::TNS__GetNamesDictionaryResponse( const TNS__GetNamesDictionaryResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetNamesDictionaryResponse&  TNS__GetNamesDictionaryResponse::operator=( const TNS__GetNamesDictionaryResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__GetPages::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetPages"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetPages::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetPages::TNS__GetPages()
{
}

TNS__GetPages::~TNS__GetPages()
{
}


class TNS__GetStatsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfstringint mGetStatsResult;
    bool mGetStatsResult_nil;
};

TNS__GetStatsResponse::PrivateDPtr::PrivateDPtr()
    : mGetStatsResult_nil(true)
{
}


void TNS__GetStatsResponse::setGetStatsResult( const Q1__ArrayOfKeyValueOfstringint& _getStatsResult )
{
    d_ptr->mGetStatsResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetStatsResult = _getStatsResult;
}

Q1__ArrayOfKeyValueOfstringint TNS__GetStatsResponse::getStatsResult() const
{
    return d_ptr->mGetStatsResult;
}

KDSoapValue TNS__GetStatsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetStatsResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetStatsResult_nil) {
        KDSoapValue _valueGetStatsResult(d_ptr->mGetStatsResult.serialize(QString::fromLatin1("GetStatsResult")));// elementargumentserializer.cpp:102
        _valueGetStatsResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetStatsResult.setQualified(true);
        _valueGetStatsResult.setNillable(true);
        if (!_valueGetStatsResult.isNil())
        args.append(_valueGetStatsResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetStatsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetStatsResult")) {// converter_complextype.cpp:354
            d_ptr->mGetStatsResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetStatsResponse::TNS__GetStatsResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetStatsResponse::~TNS__GetStatsResponse()
{
}

TNS__GetStatsResponse::TNS__GetStatsResponse( const TNS__GetStatsResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetStatsResponse&  TNS__GetStatsResponse::operator=( const TNS__GetStatsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__ArrayOfKeyValueOfdateTimeint::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfdateTimeint > mKeyValueOfdateTimeint;
    bool mKeyValueOfdateTimeint_nil;
};

Q1__ArrayOfKeyValueOfdateTimeint::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfdateTimeint_nil(true)
{
}


void Q1__ArrayOfKeyValueOfdateTimeint::setKeyValueOfdateTimeint( const QList< Q1__KeyValueOfdateTimeint >& _keyValueOfdateTimeint )
{
    d_ptr->mKeyValueOfdateTimeint_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfdateTimeint = _keyValueOfdateTimeint;
}

QList< Q1__KeyValueOfdateTimeint > Q1__ArrayOfKeyValueOfdateTimeint::keyValueOfdateTimeint() const
{
    return d_ptr->mKeyValueOfdateTimeint;
}

KDSoapValue Q1__ArrayOfKeyValueOfdateTimeint::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfdateTimeint"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfdateTimeint.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfdateTimeint(d_ptr->mKeyValueOfdateTimeint.at(i).serialize(QString::fromLatin1("KeyValueOfdateTimeint")));// elementargumentserializer.cpp:102
        _valueKeyValueOfdateTimeint.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfdateTimeint.setQualified(true);
        args.append(_valueKeyValueOfdateTimeint);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfdateTimeint::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfdateTimeint")) {// converter_complextype.cpp:354
            Q1__KeyValueOfdateTimeint mKeyValueOfdateTimeintTemp;// converter_complextype.cpp:412
            mKeyValueOfdateTimeintTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfdateTimeint.append(mKeyValueOfdateTimeintTemp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfdateTimeint::Q1__ArrayOfKeyValueOfdateTimeint()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfdateTimeint::~Q1__ArrayOfKeyValueOfdateTimeint()
{
}

Q1__ArrayOfKeyValueOfdateTimeint::Q1__ArrayOfKeyValueOfdateTimeint( const Q1__ArrayOfKeyValueOfdateTimeint& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfdateTimeint&  Q1__ArrayOfKeyValueOfdateTimeint::operator=( const Q1__ArrayOfKeyValueOfdateTimeint& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfstringint::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mKey;
    int mValue;
};

Q1__KeyValueOfstringint::PrivateDPtr::PrivateDPtr()
    : mValue(0)
{
}


void Q1__KeyValueOfstringint::setKey( const QString& _key )
{
    d_ptr->mKey = _key;
}

QString Q1__KeyValueOfstringint::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfstringint::setValue( int _value )
{
    d_ptr->mValue = _value;
}

int Q1__KeyValueOfstringint::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfstringint::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfstringint"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    _valueKey.setNillable(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfstringint::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

Q1__KeyValueOfstringint::Q1__KeyValueOfstringint()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfstringint::~Q1__KeyValueOfstringint()
{
}

Q1__KeyValueOfstringint::Q1__KeyValueOfstringint( const Q1__KeyValueOfstringint& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfstringint&  Q1__KeyValueOfstringint::operator=( const Q1__KeyValueOfstringint& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__ArrayOfKeyValueOfstringint::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfstringint > mKeyValueOfstringint;
    bool mKeyValueOfstringint_nil;
};

Q1__ArrayOfKeyValueOfstringint::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfstringint_nil(true)
{
}


void Q1__ArrayOfKeyValueOfstringint::setKeyValueOfstringint( const QList< Q1__KeyValueOfstringint >& _keyValueOfstringint )
{
    d_ptr->mKeyValueOfstringint_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfstringint = _keyValueOfstringint;
}

QList< Q1__KeyValueOfstringint > Q1__ArrayOfKeyValueOfstringint::keyValueOfstringint() const
{
    return d_ptr->mKeyValueOfstringint;
}

KDSoapValue Q1__ArrayOfKeyValueOfstringint::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfstringint"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfstringint.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfstringint(d_ptr->mKeyValueOfstringint.at(i).serialize(QString::fromLatin1("KeyValueOfstringint")));// elementargumentserializer.cpp:102
        _valueKeyValueOfstringint.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfstringint.setQualified(true);
        args.append(_valueKeyValueOfstringint);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfstringint::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfstringint")) {// converter_complextype.cpp:354
            Q1__KeyValueOfstringint mKeyValueOfstringintTemp;// converter_complextype.cpp:412
            mKeyValueOfstringintTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfstringint.append(mKeyValueOfstringintTemp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfstringint::Q1__ArrayOfKeyValueOfstringint()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfstringint::~Q1__ArrayOfKeyValueOfstringint()
{
}

Q1__ArrayOfKeyValueOfstringint::Q1__ArrayOfKeyValueOfstringint( const Q1__ArrayOfKeyValueOfstringint& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfstringint&  Q1__ArrayOfKeyValueOfstringint::operator=( const Q1__ArrayOfKeyValueOfstringint& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__GetDailyStats::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetDailyStats"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetDailyStats::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetDailyStats::TNS__GetDailyStats()
{
}

TNS__GetDailyStats::~TNS__GetDailyStats()
{
}


class TNS__GetStatsByNameResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q1__ArrayOfKeyValueOfdateTimeint mGetStatsByNameResult;
    bool mGetStatsByNameResult_nil;
};

TNS__GetStatsByNameResponse::PrivateDPtr::PrivateDPtr()
    : mGetStatsByNameResult_nil(true)
{
}


void TNS__GetStatsByNameResponse::setGetStatsByNameResult( const Q1__ArrayOfKeyValueOfdateTimeint& _getStatsByNameResult )
{
    d_ptr->mGetStatsByNameResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetStatsByNameResult = _getStatsByNameResult;
}

Q1__ArrayOfKeyValueOfdateTimeint TNS__GetStatsByNameResponse::getStatsByNameResult() const
{
    return d_ptr->mGetStatsByNameResult;
}

KDSoapValue TNS__GetStatsByNameResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetStatsByNameResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetStatsByNameResult_nil) {
        KDSoapValue _valueGetStatsByNameResult(d_ptr->mGetStatsByNameResult.serialize(QString::fromLatin1("GetStatsByNameResult")));// elementargumentserializer.cpp:102
        _valueGetStatsByNameResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetStatsByNameResult.setQualified(true);
        _valueGetStatsByNameResult.setNillable(true);
        if (!_valueGetStatsByNameResult.isNil())
        args.append(_valueGetStatsByNameResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetStatsByNameResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetStatsByNameResult")) {// converter_complextype.cpp:354
            d_ptr->mGetStatsByNameResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetStatsByNameResponse::TNS__GetStatsByNameResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetStatsByNameResponse::~TNS__GetStatsByNameResponse()
{
}

TNS__GetStatsByNameResponse::TNS__GetStatsByNameResponse( const TNS__GetStatsByNameResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetStatsByNameResponse&  TNS__GetStatsByNameResponse::operator=( const TNS__GetStatsByNameResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__SetSearchPhraseResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetSearchPhraseResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__SetSearchPhraseResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__SetSearchPhraseResponse::TNS__SetSearchPhraseResponse()
{
}

TNS__SetSearchPhraseResponse::~TNS__SetSearchPhraseResponse()
{
}


class TNS__SetName::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
};

TNS__SetName::PrivateDPtr::PrivateDPtr()
    : mName_nil(true)
{
}


void TNS__SetName::setName( const QString& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

QString TNS__SetName::name() const
{
    return d_ptr->mName;
}

KDSoapValue TNS__SetName::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetName"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__SetName::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mName_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__SetName::TNS__SetName()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SetName::~TNS__SetName()
{
}

TNS__SetName::TNS__SetName( const TNS__SetName& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SetName&  TNS__SetName::operator=( const TNS__SetName& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    QString mKey;
    Q1__ArrayOfKeyValueOfintstring mValue;
};

void Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::setKey( const QString& _key )
{
    d_ptr->mKey = _key;
}

QString Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::setValue( const Q1__ArrayOfKeyValueOfintstring& _value )
{
    d_ptr->mValue = _value;
}

Q1__ArrayOfKeyValueOfintstring Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    _valueKey.setNillable(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(d_ptr->mValue.serialize(QString::fromLatin1("Value")));// elementargumentserializer.cpp:102
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    _valueValue.setNillable(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::~Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1()
{
}

Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1( const Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1&  Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::operator=( const Q1__KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mKey;
    Q1__ArrayOfKeyValueOfstringint mValue;
};

void Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::setKey( const KDDateTime& _key )
{
    d_ptr->mKey = _key;
}

KDDateTime Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::setValue( const Q1__ArrayOfKeyValueOfstringint& _value )
{
    d_ptr->mValue = _value;
}

Q1__ArrayOfKeyValueOfstringint Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(d_ptr->mValue.serialize(QString::fromLatin1("Value")));// elementargumentserializer.cpp:102
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    _valueValue.setNillable(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::~Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1()
{
}

Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1( const Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1&  Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::operator=( const Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__SetSearchPhrase::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    QString mSearchPhrase;
    bool mSearchPhrase_nil;
};

TNS__SetSearchPhrase::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mSearchPhrase_nil(true)
{
}


void TNS__SetSearchPhrase::setName( const QString& _name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:277
    d_ptr->mName = _name;
}

QString TNS__SetSearchPhrase::name() const
{
    return d_ptr->mName;
}

void TNS__SetSearchPhrase::setSearchPhrase( const QString& _searchPhrase )
{
    d_ptr->mSearchPhrase_nil = false;// converter_complextype.cpp:277
    d_ptr->mSearchPhrase = _searchPhrase;
}

QString TNS__SetSearchPhrase::searchPhrase() const
{
    return d_ptr->mSearchPhrase;
}

KDSoapValue TNS__SetSearchPhrase::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SetSearchPhrase"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:122
    }
    if (!d_ptr->mSearchPhrase_nil) {
        KDSoapValue _valueSearchPhrase(QString::fromLatin1("searchPhrase"), QVariant::fromValue(d_ptr->mSearchPhrase), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
        _valueSearchPhrase.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueSearchPhrase.setQualified(true);
        _valueSearchPhrase.setNillable(true);
        if (!_valueSearchPhrase.isNil())
        args.append(_valueSearchPhrase);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__SetSearchPhrase::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("name")) {// converter_complextype.cpp:354
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mName_nil = false;// converter_complextype.cpp:369
        }
        else if (_name == QLatin1String("searchPhrase")) {// converter_complextype.cpp:354
            d_ptr->mSearchPhrase = val.value().value<QString>();// converter_complextype.cpp:367
            d_ptr->mSearchPhrase_nil = false;// converter_complextype.cpp:369
        }
    }
}

TNS__SetSearchPhrase::TNS__SetSearchPhrase()
    : d_ptr(new PrivateDPtr)
{
}

TNS__SetSearchPhrase::~TNS__SetSearchPhrase()
{
}

TNS__SetSearchPhrase::TNS__SetSearchPhrase( const TNS__SetSearchPhrase& other )
    : d_ptr( other.d_ptr )
{
}

TNS__SetSearchPhrase&  TNS__SetSearchPhrase::operator=( const TNS__SetSearchPhrase& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__GetLink::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetLink"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__GetLink::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__GetLink::TNS__GetLink()
{
}

TNS__GetLink::~TNS__GetLink()
{
}


class Q9__ArrayOfPage::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q9__Page > mPage;
    bool mPage_nil;
};

Q9__ArrayOfPage::PrivateDPtr::PrivateDPtr()
    : mPage_nil(true)
{
}


void Q9__ArrayOfPage::setPage( const QList< Q9__Page >& _page )
{
    d_ptr->mPage_nil = false;// converter_complextype.cpp:277
    d_ptr->mPage = _page;
}

QList< Q9__Page > Q9__ArrayOfPage::page() const
{
    return d_ptr->mPage;
}

KDSoapValue Q9__ArrayOfPage::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"), QString::fromLatin1("ArrayOfPage"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mPage.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valuePage(d_ptr->mPage.at(i).serialize(QString::fromLatin1("Page")));// elementargumentserializer.cpp:102
        _valuePage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/WsSoap"));
        _valuePage.setQualified(true);
        _valuePage.setNillable(true);
        args.append(_valuePage);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q9__ArrayOfPage::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Page")) {// converter_complextype.cpp:354
            Q9__Page mPageTemp;// converter_complextype.cpp:412
            mPageTemp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mPage.append(mPageTemp);// converter_complextype.cpp:420
        }
    }
}

Q9__ArrayOfPage::Q9__ArrayOfPage()
    : d_ptr(new PrivateDPtr)
{
}

Q9__ArrayOfPage::~Q9__ArrayOfPage()
{
}

Q9__ArrayOfPage::Q9__ArrayOfPage( const Q9__ArrayOfPage& other )
    : d_ptr( other.d_ptr )
{
}

Q9__ArrayOfPage&  Q9__ArrayOfPage::operator=( const Q9__ArrayOfPage& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue TNS__SendLinksResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("SendLinksResponse"));// converter_complextype.cpp:471
    return mainValue;
}

void TNS__SendLinksResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:501
}

TNS__SendLinksResponse::TNS__SendLinksResponse()
{
}

TNS__SendLinksResponse::~TNS__SendLinksResponse()
{
}


class Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 > mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
    bool mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_nil;
};

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::PrivateDPtr::PrivateDPtr()
    : mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_nil(true)
{
}


void Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::setKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1( const QList< Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >& _keyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 )
{
    d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_nil = false;// converter_complextype.cpp:277
    d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = _keyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
}

QList< Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 > Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::keyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1() const
{
    return d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
}

KDSoapValue Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    for (int i = 0; i < d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1.count(); ++i) {// converter_complextype.cpp:556
        KDSoapValue _valueKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1.at(i).serialize(QString::fromLatin1("KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1")));// elementargumentserializer.cpp:102
        _valueKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
        _valueKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1.setQualified(true);
        args.append(_valueKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1")) {// converter_complextype.cpp:354
            Q1__KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1Temp;// converter_complextype.cpp:412
            mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1Temp.deserialize(val);// converter_complextype.cpp:371
            d_ptr->mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1.append(mKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1Temp);// converter_complextype.cpp:420
        }
    }
}

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::~Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1()
{
}

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1( const Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1&  Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::operator=( const Q1__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__GetPagesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    Q9__ArrayOfPage mGetPagesResult;
    bool mGetPagesResult_nil;
};

TNS__GetPagesResponse::PrivateDPtr::PrivateDPtr()
    : mGetPagesResult_nil(true)
{
}


void TNS__GetPagesResponse::setGetPagesResult( const Q9__ArrayOfPage& _getPagesResult )
{
    d_ptr->mGetPagesResult_nil = false;// converter_complextype.cpp:277
    d_ptr->mGetPagesResult = _getPagesResult;
}

Q9__ArrayOfPage TNS__GetPagesResponse::getPagesResult() const
{
    return d_ptr->mGetPagesResult;
}

KDSoapValue TNS__GetPagesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://tempuri.org/"), QString::fromLatin1("GetPagesResponse"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    if (!d_ptr->mGetPagesResult_nil) {
        KDSoapValue _valueGetPagesResult(d_ptr->mGetPagesResult.serialize(QString::fromLatin1("GetPagesResult")));// elementargumentserializer.cpp:102
        _valueGetPagesResult.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
        _valueGetPagesResult.setQualified(true);
        _valueGetPagesResult.setNillable(true);
        if (!_valueGetPagesResult.isNil())
        args.append(_valueGetPagesResult);// elementargumentserializer.cpp:122
    }
    return mainValue;
}

void TNS__GetPagesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetPagesResult")) {// converter_complextype.cpp:354
            d_ptr->mGetPagesResult.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

TNS__GetPagesResponse::TNS__GetPagesResponse()
    : d_ptr(new PrivateDPtr)
{
}

TNS__GetPagesResponse::~TNS__GetPagesResponse()
{
}

TNS__GetPagesResponse::TNS__GetPagesResponse( const TNS__GetPagesResponse& other )
    : d_ptr( other.d_ptr )
{
}

TNS__GetPagesResponse&  TNS__GetPagesResponse::operator=( const TNS__GetPagesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfdateTimeint::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mKey;
    int mValue;
};

Q1__KeyValueOfdateTimeint::PrivateDPtr::PrivateDPtr()
    : mValue(0)
{
}


void Q1__KeyValueOfdateTimeint::setKey( const KDDateTime& _key )
{
    d_ptr->mKey = _key;
}

KDDateTime Q1__KeyValueOfdateTimeint::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfdateTimeint::setValue( int _value )
{
    d_ptr->mValue = _value;
}

int Q1__KeyValueOfdateTimeint::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfdateTimeint::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfdateTimeint"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), d_ptr->mKey.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(QString::fromLatin1("Value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:108
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfdateTimeint::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue = val.value().value<int>();// converter_complextype.cpp:367
        }
    }
}

Q1__KeyValueOfdateTimeint::Q1__KeyValueOfdateTimeint()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfdateTimeint::~Q1__KeyValueOfdateTimeint()
{
}

Q1__KeyValueOfdateTimeint::Q1__KeyValueOfdateTimeint( const Q1__KeyValueOfdateTimeint& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfdateTimeint&  Q1__KeyValueOfdateTimeint::operator=( const Q1__KeyValueOfdateTimeint& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class Q1__KeyValueOfstringArrayOfstringty7Ep6D1::PrivateDPtr : public QSharedData
{
public:
    QString mKey;
    Q1__ArrayOfstring mValue;
};

void Q1__KeyValueOfstringArrayOfstringty7Ep6D1::setKey( const QString& _key )
{
    d_ptr->mKey = _key;
}

QString Q1__KeyValueOfstringArrayOfstringty7Ep6D1::key() const
{
    return d_ptr->mKey;
}

void Q1__KeyValueOfstringArrayOfstringty7Ep6D1::setValue( const Q1__ArrayOfstring& _value )
{
    d_ptr->mValue = _value;
}

Q1__ArrayOfstring Q1__KeyValueOfstringArrayOfstringty7Ep6D1::value() const
{
    return d_ptr->mValue;
}

KDSoapValue Q1__KeyValueOfstringArrayOfstringty7Ep6D1::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"), QString::fromLatin1("KeyValueOfstringArrayOfstringty7Ep6D1"));// converter_complextype.cpp:471
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:491
    mainValue.setQualified(true);// converter_complextype.cpp:493
    KDSoapValue _valueKey(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:108
    _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueKey.setQualified(true);
    _valueKey.setNillable(true);
    args.append(_valueKey);// elementargumentserializer.cpp:122
    KDSoapValue _valueValue(d_ptr->mValue.serialize(QString::fromLatin1("Value")));// elementargumentserializer.cpp:102
    _valueValue.setNamespaceUri(QString::fromLatin1("http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
    _valueValue.setQualified(true);
    _valueValue.setNillable(true);
    args.append(_valueValue);// elementargumentserializer.cpp:122
    return mainValue;
}

void Q1__KeyValueOfstringArrayOfstringty7Ep6D1::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:487
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Key")) {// converter_complextype.cpp:354
            d_ptr->mKey = val.value().value<QString>();// converter_complextype.cpp:367
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:354
            d_ptr->mValue.deserialize(val);// converter_complextype.cpp:371
        }
    }
}

Q1__KeyValueOfstringArrayOfstringty7Ep6D1::Q1__KeyValueOfstringArrayOfstringty7Ep6D1()
    : d_ptr(new PrivateDPtr)
{
}

Q1__KeyValueOfstringArrayOfstringty7Ep6D1::~Q1__KeyValueOfstringArrayOfstringty7Ep6D1()
{
}

Q1__KeyValueOfstringArrayOfstringty7Ep6D1::Q1__KeyValueOfstringArrayOfstringty7Ep6D1( const Q1__KeyValueOfstringArrayOfstringty7Ep6D1& other )
    : d_ptr( other.d_ptr )
{
}

Q1__KeyValueOfstringArrayOfstringty7Ep6D1&  Q1__KeyValueOfstringArrayOfstringty7Ep6D1::operator=( const Q1__KeyValueOfstringArrayOfstringty7Ep6D1& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


GetLinkJob::GetLinkJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetLinkJob::setParameters( const TNS__GetLink& arg0 )
{
    mParameters = arg0;
}

TNS__GetLink GetLinkJob::parameters() const
{
    return mParameters;
}

void GetLinkJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetLink");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetLink(mParameters.serialize(QString::fromLatin1("GetLink")));// elementargumentserializer.cpp:102
    _valueGetLink.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetLink.setQualified(true);
    message = _valueGetLink;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetLink"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetLinkResponse GetLinkJob::resultParameters() const
{
    return mResultParameters;
}

void GetLinkJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetNamesDictionaryJob::GetNamesDictionaryJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetNamesDictionaryJob::setParameters( const TNS__GetNamesDictionary& arg0 )
{
    mParameters = arg0;
}

TNS__GetNamesDictionary GetNamesDictionaryJob::parameters() const
{
    return mParameters;
}

void GetNamesDictionaryJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNamesDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNamesDictionary(mParameters.serialize(QString::fromLatin1("GetNamesDictionary")));// elementargumentserializer.cpp:102
    _valueGetNamesDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNamesDictionary.setQualified(true);
    message = _valueGetNamesDictionary;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNamesDictionary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetNamesDictionaryResponse GetNamesDictionaryJob::resultParameters() const
{
    return mResultParameters;
}

void GetNamesDictionaryJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


SendLinksJob::SendLinksJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void SendLinksJob::setParameters( const TNS__SendLinks& arg0 )
{
    mParameters = arg0;
}

TNS__SendLinks SendLinksJob::parameters() const
{
    return mParameters;
}

void SendLinksJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendLinks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendLinks(mParameters.serialize(QString::fromLatin1("SendLinks")));// elementargumentserializer.cpp:102
    _valueSendLinks.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendLinks.setQualified(true);
    message = _valueSendLinks;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SendLinks"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SendLinksResponse SendLinksJob::resultParameters() const
{
    return mResultParameters;
}

void SendLinksJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


SendAmountDictionaryJob::SendAmountDictionaryJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void SendAmountDictionaryJob::setParameters( const TNS__SendAmountDictionary& arg0 )
{
    mParameters = arg0;
}

TNS__SendAmountDictionary SendAmountDictionaryJob::parameters() const
{
    return mParameters;
}

void SendAmountDictionaryJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendAmountDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAmountDictionary(mParameters.serialize(QString::fromLatin1("SendAmountDictionary")));// elementargumentserializer.cpp:102
    _valueSendAmountDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendAmountDictionary.setQualified(true);
    message = _valueSendAmountDictionary;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SendAmountDictionary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SendAmountDictionaryResponse SendAmountDictionaryJob::resultParameters() const
{
    return mResultParameters;
}

void SendAmountDictionaryJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetStatsJob::GetStatsJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetStatsJob::setParameters( const TNS__GetStats& arg0 )
{
    mParameters = arg0;
}

TNS__GetStats GetStatsJob::parameters() const
{
    return mParameters;
}

void GetStatsJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStats(mParameters.serialize(QString::fromLatin1("GetStats")));// elementargumentserializer.cpp:102
    _valueGetStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStats.setQualified(true);
    message = _valueGetStats;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetStats"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetStatsResponse GetStatsJob::resultParameters() const
{
    return mResultParameters;
}

void GetStatsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetDailyStatsJob::GetDailyStatsJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetDailyStatsJob::setParameters( const TNS__GetDailyStats& arg0 )
{
    mParameters = arg0;
}

TNS__GetDailyStats GetDailyStatsJob::parameters() const
{
    return mParameters;
}

void GetDailyStatsJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetDailyStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDailyStats(mParameters.serialize(QString::fromLatin1("GetDailyStats")));// elementargumentserializer.cpp:102
    _valueGetDailyStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetDailyStats.setQualified(true);
    message = _valueGetDailyStats;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDailyStats"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetDailyStatsResponse GetDailyStatsJob::resultParameters() const
{
    return mResultParameters;
}

void GetDailyStatsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetStatsByNameJob::GetStatsByNameJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetStatsByNameJob::setParameters( const TNS__GetStatsByName& arg0 )
{
    mParameters = arg0;
}

TNS__GetStatsByName GetStatsByNameJob::parameters() const
{
    return mParameters;
}

void GetStatsByNameJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStatsByName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStatsByName(mParameters.serialize(QString::fromLatin1("GetStatsByName")));// elementargumentserializer.cpp:102
    _valueGetStatsByName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStatsByName.setQualified(true);
    message = _valueGetStatsByName;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetStatsByName"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetStatsByNameResponse GetStatsByNameJob::resultParameters() const
{
    return mResultParameters;
}

void GetStatsByNameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetNamesJob::GetNamesJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetNamesJob::setParameters( const TNS__GetNames& arg0 )
{
    mParameters = arg0;
}

TNS__GetNames GetNamesJob::parameters() const
{
    return mParameters;
}

void GetNamesJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNames(mParameters.serialize(QString::fromLatin1("GetNames")));// elementargumentserializer.cpp:102
    _valueGetNames.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNames.setQualified(true);
    message = _valueGetNames;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetNames"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetNamesResponse GetNamesJob::resultParameters() const
{
    return mResultParameters;
}

void GetNamesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetSitesJob::GetSitesJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetSitesJob::setParameters( const TNS__GetSites& arg0 )
{
    mParameters = arg0;
}

TNS__GetSites GetSitesJob::parameters() const
{
    return mParameters;
}

void GetSitesJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSites");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSites(mParameters.serialize(QString::fromLatin1("GetSites")));// elementargumentserializer.cpp:102
    _valueGetSites.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSites.setQualified(true);
    message = _valueGetSites;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSites"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetSitesResponse GetSitesJob::resultParameters() const
{
    return mResultParameters;
}

void GetSitesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetPagesJob::GetPagesJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetPagesJob::setParameters( const TNS__GetPages& arg0 )
{
    mParameters = arg0;
}

TNS__GetPages GetPagesJob::parameters() const
{
    return mParameters;
}

void GetPagesJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetPages");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPages(mParameters.serialize(QString::fromLatin1("GetPages")));// elementargumentserializer.cpp:102
    _valueGetPages.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetPages.setQualified(true);
    message = _valueGetPages;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetPages"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetPagesResponse GetPagesJob::resultParameters() const
{
    return mResultParameters;
}

void GetPagesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


GetSearchPhrasesJob::GetSearchPhrasesJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void GetSearchPhrasesJob::setParameters( const TNS__GetSearchPhrases& arg0 )
{
    mParameters = arg0;
}

TNS__GetSearchPhrases GetSearchPhrasesJob::parameters() const
{
    return mParameters;
}

void GetSearchPhrasesJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSearchPhrases");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSearchPhrases(mParameters.serialize(QString::fromLatin1("GetSearchPhrases")));// elementargumentserializer.cpp:102
    _valueGetSearchPhrases.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSearchPhrases.setQualified(true);
    message = _valueGetSearchPhrases;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetSearchPhrases"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__GetSearchPhrasesResponse GetSearchPhrasesJob::resultParameters() const
{
    return mResultParameters;
}

void GetSearchPhrasesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


SetSiteJob::SetSiteJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void SetSiteJob::setParameters( const TNS__SetSite& arg0 )
{
    mParameters = arg0;
}

TNS__SetSite SetSiteJob::parameters() const
{
    return mParameters;
}

void SetSiteJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSite");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSite(mParameters.serialize(QString::fromLatin1("SetSite")));// elementargumentserializer.cpp:102
    _valueSetSite.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSite.setQualified(true);
    message = _valueSetSite;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetSite"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SetSiteResponse SetSiteJob::resultParameters() const
{
    return mResultParameters;
}

void SetSiteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


SetNameJob::SetNameJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void SetNameJob::setParameters( const TNS__SetName& arg0 )
{
    mParameters = arg0;
}

TNS__SetName SetNameJob::parameters() const
{
    return mParameters;
}

void SetNameJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetName(mParameters.serialize(QString::fromLatin1("SetName")));// elementargumentserializer.cpp:102
    _valueSetName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetName.setQualified(true);
    message = _valueSetName;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetName"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SetNameResponse SetNameJob::resultParameters() const
{
    return mResultParameters;
}

void SetNameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


SetSearchPhraseJob::SetSearchPhraseJob( Service* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void SetSearchPhraseJob::setParameters( const TNS__SetSearchPhrase& arg0 )
{
    mParameters = arg0;
}

TNS__SetSearchPhrase SetSearchPhraseJob::parameters() const
{
    return mParameters;
}

void SetSearchPhraseJob::doStart()
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSearchPhrase");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSearchPhrase(mParameters.serialize(QString::fromLatin1("SetSearchPhrase")));// elementargumentserializer.cpp:102
    _valueSetSearchPhrase.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSearchPhrase.setQualified(true);
    message = _valueSetSearchPhrase;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("SetSearchPhrase"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__SetSearchPhraseResponse SetSearchPhraseJob::resultParameters() const
{
    return mResultParameters;
}

void SetSearchPhraseJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:376
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:539
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class Service::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

Service::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


Service::Service( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

Service::~Service()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void Service::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void Service::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void Service::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString Service::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *Service::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://adultprog2015.somee.com/WsSoap.svc");
        const QString messageNamespace = QString::fromLatin1("http://tempuri.org/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *Service::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const Service*>( this )->clientInterface() );
}

TNS__GetLinkResponse Service::getLink( const TNS__GetLink& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetLink");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetLink(parameters.serialize(QString::fromLatin1("GetLink")));// elementargumentserializer.cpp:102
    _valueGetLink.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetLink.setQualified(true);
    message = _valueGetLink;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetLink"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetLinkResponse();
    TNS__GetLinkResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetLink( const TNS__GetLink& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetLink");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetLink(parameters.serialize(QString::fromLatin1("GetLink")));// elementargumentserializer.cpp:102
    _valueGetLink.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetLink.setQualified(true);
    message = _valueGetLink;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetLink"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetLinkFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetLinkFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getLinkError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getLink"), reply);
    } else {
        TNS__GetLinkResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getLinkDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetNamesDictionaryResponse Service::getNamesDictionary( const TNS__GetNamesDictionary& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNamesDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNamesDictionary(parameters.serialize(QString::fromLatin1("GetNamesDictionary")));// elementargumentserializer.cpp:102
    _valueGetNamesDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNamesDictionary.setQualified(true);
    message = _valueGetNamesDictionary;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNamesDictionary"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetNamesDictionaryResponse();
    TNS__GetNamesDictionaryResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetNamesDictionary( const TNS__GetNamesDictionary& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNamesDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNamesDictionary(parameters.serialize(QString::fromLatin1("GetNamesDictionary")));// elementargumentserializer.cpp:102
    _valueGetNamesDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNamesDictionary.setQualified(true);
    message = _valueGetNamesDictionary;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNamesDictionary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNamesDictionaryFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetNamesDictionaryFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNamesDictionaryError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getNamesDictionary"), reply);
    } else {
        TNS__GetNamesDictionaryResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getNamesDictionaryDone( ret );
    }
    watcher->deleteLater();
}

TNS__SendLinksResponse Service::sendLinks( const TNS__SendLinks& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendLinks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendLinks(parameters.serialize(QString::fromLatin1("SendLinks")));// elementargumentserializer.cpp:102
    _valueSendLinks.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendLinks.setQualified(true);
    message = _valueSendLinks;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SendLinks"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SendLinksResponse();
    TNS__SendLinksResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncSendLinks( const TNS__SendLinks& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendLinks");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendLinks(parameters.serialize(QString::fromLatin1("SendLinks")));// elementargumentserializer.cpp:102
    _valueSendLinks.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendLinks.setQualified(true);
    message = _valueSendLinks;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SendLinks"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSendLinksFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotSendLinksFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT sendLinksError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("sendLinks"), reply);
    } else {
        TNS__SendLinksResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT sendLinksDone( ret );
    }
    watcher->deleteLater();
}

TNS__SendAmountDictionaryResponse Service::sendAmountDictionary( const TNS__SendAmountDictionary& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendAmountDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAmountDictionary(parameters.serialize(QString::fromLatin1("SendAmountDictionary")));// elementargumentserializer.cpp:102
    _valueSendAmountDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendAmountDictionary.setQualified(true);
    message = _valueSendAmountDictionary;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SendAmountDictionary"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SendAmountDictionaryResponse();
    TNS__SendAmountDictionaryResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncSendAmountDictionary( const TNS__SendAmountDictionary& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SendAmountDictionary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSendAmountDictionary(parameters.serialize(QString::fromLatin1("SendAmountDictionary")));// elementargumentserializer.cpp:102
    _valueSendAmountDictionary.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSendAmountDictionary.setQualified(true);
    message = _valueSendAmountDictionary;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SendAmountDictionary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSendAmountDictionaryFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotSendAmountDictionaryFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT sendAmountDictionaryError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("sendAmountDictionary"), reply);
    } else {
        TNS__SendAmountDictionaryResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT sendAmountDictionaryDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetStatsResponse Service::getStats( const TNS__GetStats& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStats(parameters.serialize(QString::fromLatin1("GetStats")));// elementargumentserializer.cpp:102
    _valueGetStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStats.setQualified(true);
    message = _valueGetStats;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetStats"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetStatsResponse();
    TNS__GetStatsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetStats( const TNS__GetStats& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStats(parameters.serialize(QString::fromLatin1("GetStats")));// elementargumentserializer.cpp:102
    _valueGetStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStats.setQualified(true);
    message = _valueGetStats;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetStats"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetStatsFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetStatsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getStatsError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getStats"), reply);
    } else {
        TNS__GetStatsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getStatsDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetDailyStatsResponse Service::getDailyStats( const TNS__GetDailyStats& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetDailyStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDailyStats(parameters.serialize(QString::fromLatin1("GetDailyStats")));// elementargumentserializer.cpp:102
    _valueGetDailyStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetDailyStats.setQualified(true);
    message = _valueGetDailyStats;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDailyStats"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetDailyStatsResponse();
    TNS__GetDailyStatsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetDailyStats( const TNS__GetDailyStats& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetDailyStats");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDailyStats(parameters.serialize(QString::fromLatin1("GetDailyStats")));// elementargumentserializer.cpp:102
    _valueGetDailyStats.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetDailyStats.setQualified(true);
    message = _valueGetDailyStats;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDailyStats"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDailyStatsFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetDailyStatsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDailyStatsError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getDailyStats"), reply);
    } else {
        TNS__GetDailyStatsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getDailyStatsDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetStatsByNameResponse Service::getStatsByName( const TNS__GetStatsByName& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStatsByName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStatsByName(parameters.serialize(QString::fromLatin1("GetStatsByName")));// elementargumentserializer.cpp:102
    _valueGetStatsByName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStatsByName.setQualified(true);
    message = _valueGetStatsByName;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetStatsByName"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetStatsByNameResponse();
    TNS__GetStatsByNameResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetStatsByName( const TNS__GetStatsByName& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetStatsByName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetStatsByName(parameters.serialize(QString::fromLatin1("GetStatsByName")));// elementargumentserializer.cpp:102
    _valueGetStatsByName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetStatsByName.setQualified(true);
    message = _valueGetStatsByName;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetStatsByName"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetStatsByNameFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetStatsByNameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getStatsByNameError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getStatsByName"), reply);
    } else {
        TNS__GetStatsByNameResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getStatsByNameDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetNamesResponse Service::getNames( const TNS__GetNames& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNames(parameters.serialize(QString::fromLatin1("GetNames")));// elementargumentserializer.cpp:102
    _valueGetNames.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNames.setQualified(true);
    message = _valueGetNames;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetNames"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetNamesResponse();
    TNS__GetNamesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetNames( const TNS__GetNames& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetNames");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetNames(parameters.serialize(QString::fromLatin1("GetNames")));// elementargumentserializer.cpp:102
    _valueGetNames.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetNames.setQualified(true);
    message = _valueGetNames;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetNames"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetNamesFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetNamesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getNamesError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getNames"), reply);
    } else {
        TNS__GetNamesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getNamesDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetSitesResponse Service::getSites( const TNS__GetSites& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSites");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSites(parameters.serialize(QString::fromLatin1("GetSites")));// elementargumentserializer.cpp:102
    _valueGetSites.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSites.setQualified(true);
    message = _valueGetSites;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSites"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetSitesResponse();
    TNS__GetSitesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetSites( const TNS__GetSites& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSites");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSites(parameters.serialize(QString::fromLatin1("GetSites")));// elementargumentserializer.cpp:102
    _valueGetSites.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSites.setQualified(true);
    message = _valueGetSites;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSites"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSitesFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetSitesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSitesError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getSites"), reply);
    } else {
        TNS__GetSitesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getSitesDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetPagesResponse Service::getPages( const TNS__GetPages& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetPages");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPages(parameters.serialize(QString::fromLatin1("GetPages")));// elementargumentserializer.cpp:102
    _valueGetPages.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetPages.setQualified(true);
    message = _valueGetPages;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetPages"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetPagesResponse();
    TNS__GetPagesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetPages( const TNS__GetPages& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetPages");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetPages(parameters.serialize(QString::fromLatin1("GetPages")));// elementargumentserializer.cpp:102
    _valueGetPages.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetPages.setQualified(true);
    message = _valueGetPages;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetPages"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetPagesFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetPagesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getPagesError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getPages"), reply);
    } else {
        TNS__GetPagesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getPagesDone( ret );
    }
    watcher->deleteLater();
}

TNS__GetSearchPhrasesResponse Service::getSearchPhrases( const TNS__GetSearchPhrases& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSearchPhrases");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSearchPhrases(parameters.serialize(QString::fromLatin1("GetSearchPhrases")));// elementargumentserializer.cpp:102
    _valueGetSearchPhrases.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSearchPhrases.setQualified(true);
    message = _valueGetSearchPhrases;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetSearchPhrases"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__GetSearchPhrasesResponse();
    TNS__GetSearchPhrasesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncGetSearchPhrases( const TNS__GetSearchPhrases& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/GetSearchPhrases");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetSearchPhrases(parameters.serialize(QString::fromLatin1("GetSearchPhrases")));// elementargumentserializer.cpp:102
    _valueGetSearchPhrases.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueGetSearchPhrases.setQualified(true);
    message = _valueGetSearchPhrases;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetSearchPhrases"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetSearchPhrasesFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotGetSearchPhrasesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getSearchPhrasesError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("getSearchPhrases"), reply);
    } else {
        TNS__GetSearchPhrasesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT getSearchPhrasesDone( ret );
    }
    watcher->deleteLater();
}

TNS__SetSiteResponse Service::setSite( const TNS__SetSite& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSite");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSite(parameters.serialize(QString::fromLatin1("SetSite")));// elementargumentserializer.cpp:102
    _valueSetSite.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSite.setQualified(true);
    message = _valueSetSite;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetSite"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SetSiteResponse();
    TNS__SetSiteResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncSetSite( const TNS__SetSite& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSite");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSite(parameters.serialize(QString::fromLatin1("SetSite")));// elementargumentserializer.cpp:102
    _valueSetSite.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSite.setQualified(true);
    message = _valueSetSite;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetSite"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetSiteFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotSetSiteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setSiteError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("setSite"), reply);
    } else {
        TNS__SetSiteResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT setSiteDone( ret );
    }
    watcher->deleteLater();
}

TNS__SetNameResponse Service::setName( const TNS__SetName& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetName(parameters.serialize(QString::fromLatin1("SetName")));// elementargumentserializer.cpp:102
    _valueSetName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetName.setQualified(true);
    message = _valueSetName;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetName"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SetNameResponse();
    TNS__SetNameResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncSetName( const TNS__SetName& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetName");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetName(parameters.serialize(QString::fromLatin1("SetName")));// elementargumentserializer.cpp:102
    _valueSetName.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetName.setQualified(true);
    message = _valueSetName;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetName"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetNameFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotSetNameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setNameError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("setName"), reply);
    } else {
        TNS__SetNameResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT setNameDone( ret );
    }
    watcher->deleteLater();
}

TNS__SetSearchPhraseResponse Service::setSearchPhrase( const TNS__SetSearchPhrase& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSearchPhrase");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSearchPhrase(parameters.serialize(QString::fromLatin1("SetSearchPhrase")));// elementargumentserializer.cpp:102
    _valueSetSearchPhrase.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSearchPhrase.setQualified(true);
    message = _valueSetSearchPhrase;// elementargumentserializer.cpp:122
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("SetSearchPhrase"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__SetSearchPhraseResponse();
    TNS__SetSearchPhraseResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:539
    return ret;// converter_clientstub.cpp:593
}

void Service::asyncSetSearchPhrase( const TNS__SetSearchPhrase& parameters )
{
    const QString action = QString::fromLatin1("http://tempuri.org/IService/SetSearchPhrase");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueSetSearchPhrase(parameters.serialize(QString::fromLatin1("SetSearchPhrase")));// elementargumentserializer.cpp:102
    _valueSetSearchPhrase.setNamespaceUri(QString::fromLatin1("http://tempuri.org/"));
    _valueSetSearchPhrase.setQualified(true);
    message = _valueSetSearchPhrase;// elementargumentserializer.cpp:122
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("SetSearchPhrase"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotSetSearchPhraseFinished(KDSoapPendingCallWatcher*)));
}

void Service::_kd_slotSetSearchPhraseFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT setSearchPhraseError(reply);// converter_clientstub.cpp:703
        Q_EMIT soapError(QLatin1String("setSearchPhrase"), reply);
    } else {
        TNS__SetSearchPhraseResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:539
        Q_EMIT setSearchPhraseDone( ret );
    }
    watcher->deleteLater();
}
