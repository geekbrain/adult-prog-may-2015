/* soapC.cpp
   Generated by gSOAP 2.8.22 from wssoap.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.22 2015-04-24 10:41:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_in_ns3__char(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__guid__:
		return soap_in_ns3__guid__(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_in_ns3__guid(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return soap_in_ns3__duration__(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_in_ns3__duration(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return soap_in_ns3__char__(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_ns5__Page:
		return soap_in_ns5__Page(soap, NULL, NULL, "ns5:Page");
	case SOAP_TYPE_ns5__ArrayOfPage:
		return soap_in_ns5__ArrayOfPage(soap, NULL, NULL, "ns5:ArrayOfPage");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring:
		return soap_in_ns4__ArrayOfKeyValueOfintstring(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint:
		return soap_in_ns4__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_in_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint:
		return soap_in_ns4__ArrayOfKeyValueOfstringint(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_ns4__ArrayOfstring:
		return soap_in_ns4__ArrayOfstring(soap, NULL, NULL, "ns4:ArrayOfstring");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return soap_in_xsd__QName_(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__SetSearchPhrase:
		return soap_in_PointerTo_ns1__SetSearchPhrase(soap, NULL, NULL, "ns1:SetSearchPhrase");
	case SOAP_TYPE_PointerTo_ns1__SetName:
		return soap_in_PointerTo_ns1__SetName(soap, NULL, NULL, "ns1:SetName");
	case SOAP_TYPE_PointerTo_ns1__SetSite:
		return soap_in_PointerTo_ns1__SetSite(soap, NULL, NULL, "ns1:SetSite");
	case SOAP_TYPE_PointerTo_ns1__GetSearchPhrases:
		return soap_in_PointerTo_ns1__GetSearchPhrases(soap, NULL, NULL, "ns1:GetSearchPhrases");
	case SOAP_TYPE_PointerTo_ns1__GetPages:
		return soap_in_PointerTo_ns1__GetPages(soap, NULL, NULL, "ns1:GetPages");
	case SOAP_TYPE_PointerTo_ns1__GetSites:
		return soap_in_PointerTo_ns1__GetSites(soap, NULL, NULL, "ns1:GetSites");
	case SOAP_TYPE_PointerTo_ns1__GetNames:
		return soap_in_PointerTo_ns1__GetNames(soap, NULL, NULL, "ns1:GetNames");
	case SOAP_TYPE_PointerTo_ns1__GetStatsByName:
		return soap_in_PointerTo_ns1__GetStatsByName(soap, NULL, NULL, "ns1:GetStatsByName");
	case SOAP_TYPE_PointerTo_ns1__GetDailyStats:
		return soap_in_PointerTo_ns1__GetDailyStats(soap, NULL, NULL, "ns1:GetDailyStats");
	case SOAP_TYPE_PointerTo_ns1__GetStats:
		return soap_in_PointerTo_ns1__GetStats(soap, NULL, NULL, "ns1:GetStats");
	case SOAP_TYPE_PointerTo_ns1__SendAmountDictionary:
		return soap_in_PointerTo_ns1__SendAmountDictionary(soap, NULL, NULL, "ns1:SendAmountDictionary");
	case SOAP_TYPE_PointerTo_ns1__SendLinks:
		return soap_in_PointerTo_ns1__SendLinks(soap, NULL, NULL, "ns1:SendLinks");
	case SOAP_TYPE_PointerTo_ns1__GetNamesDictionary:
		return soap_in_PointerTo_ns1__GetNamesDictionary(soap, NULL, NULL, "ns1:GetNamesDictionary");
	case SOAP_TYPE_PointerTo_ns1__GetLink:
		return soap_in_PointerTo_ns1__GetLink(soap, NULL, NULL, "ns1:GetLink");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons5__Page:
		return soap_in_PointerTons5__Page(soap, NULL, NULL, "ns5:Page");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTons5__ArrayOfPage:
		return soap_in_PointerTons5__ArrayOfPage(soap, NULL, NULL, "ns5:ArrayOfPage");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfintstring:
		return soap_in_PointerTons4__ArrayOfKeyValueOfintstring(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeint:
		return soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringint:
		return soap_in_PointerTons4__ArrayOfKeyValueOfstringint(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_PointerTons4__ArrayOfstring:
		return soap_in_PointerTons4__ArrayOfstring(soap, NULL, NULL, "ns4:ArrayOfstring");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid__;
			return soap_in_ns3__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid;
			return soap_in_ns3__guid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration__;
			return soap_in_ns3__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration;
			return soap_in_ns3__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char__;
			return soap_in_ns3__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:Page"))
		{	*type = SOAP_TYPE_ns5__Page;
			return soap_in_ns5__Page(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfPage"))
		{	*type = SOAP_TYPE_ns5__ArrayOfPage;
			return soap_in_ns5__ArrayOfPage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
			return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfintstring"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring;
			return soap_in_ns4__ArrayOfKeyValueOfintstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfdateTimeint"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint;
			return soap_in_ns4__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
			return soap_in_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringint"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint;
			return soap_in_ns4__ArrayOfKeyValueOfstringint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfstring"))
		{	*type = SOAP_TYPE_ns4__ArrayOfstring;
			return soap_in_ns4__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
		{	*type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1;
			return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName_;
			return soap_in_xsd__QName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char;
			return soap_in_ns3__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
			return soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfintstring-KeyValueOfintstring"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring;
			return soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint;
			return soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
			return soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringint-KeyValueOfstringint"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint;
			return soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1"))
		{	*type = SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1;
			return soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSearchPhraseResponse"))
		{	*type = SOAP_TYPE__ns1__SetSearchPhraseResponse;
			return soap_in__ns1__SetSearchPhraseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSearchPhrase"))
		{	*type = SOAP_TYPE__ns1__SetSearchPhrase;
			return soap_in__ns1__SetSearchPhrase(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetNameResponse"))
		{	*type = SOAP_TYPE__ns1__SetNameResponse;
			return soap_in__ns1__SetNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetName"))
		{	*type = SOAP_TYPE__ns1__SetName;
			return soap_in__ns1__SetName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSiteResponse"))
		{	*type = SOAP_TYPE__ns1__SetSiteResponse;
			return soap_in__ns1__SetSiteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSite"))
		{	*type = SOAP_TYPE__ns1__SetSite;
			return soap_in__ns1__SetSite(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSearchPhrasesResponse"))
		{	*type = SOAP_TYPE__ns1__GetSearchPhrasesResponse;
			return soap_in__ns1__GetSearchPhrasesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSearchPhrases"))
		{	*type = SOAP_TYPE__ns1__GetSearchPhrases;
			return soap_in__ns1__GetSearchPhrases(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPagesResponse"))
		{	*type = SOAP_TYPE__ns1__GetPagesResponse;
			return soap_in__ns1__GetPagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPages"))
		{	*type = SOAP_TYPE__ns1__GetPages;
			return soap_in__ns1__GetPages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSitesResponse"))
		{	*type = SOAP_TYPE__ns1__GetSitesResponse;
			return soap_in__ns1__GetSitesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSites"))
		{	*type = SOAP_TYPE__ns1__GetSites;
			return soap_in__ns1__GetSites(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNamesResponse"))
		{	*type = SOAP_TYPE__ns1__GetNamesResponse;
			return soap_in__ns1__GetNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNames"))
		{	*type = SOAP_TYPE__ns1__GetNames;
			return soap_in__ns1__GetNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStatsByNameResponse"))
		{	*type = SOAP_TYPE__ns1__GetStatsByNameResponse;
			return soap_in__ns1__GetStatsByNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStatsByName"))
		{	*type = SOAP_TYPE__ns1__GetStatsByName;
			return soap_in__ns1__GetStatsByName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetDailyStatsResponse"))
		{	*type = SOAP_TYPE__ns1__GetDailyStatsResponse;
			return soap_in__ns1__GetDailyStatsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetDailyStats"))
		{	*type = SOAP_TYPE__ns1__GetDailyStats;
			return soap_in__ns1__GetDailyStats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStatsResponse"))
		{	*type = SOAP_TYPE__ns1__GetStatsResponse;
			return soap_in__ns1__GetStatsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStats"))
		{	*type = SOAP_TYPE__ns1__GetStats;
			return soap_in__ns1__GetStats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendAmountDictionaryResponse"))
		{	*type = SOAP_TYPE__ns1__SendAmountDictionaryResponse;
			return soap_in__ns1__SendAmountDictionaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendAmountDictionary"))
		{	*type = SOAP_TYPE__ns1__SendAmountDictionary;
			return soap_in__ns1__SendAmountDictionary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendLinksResponse"))
		{	*type = SOAP_TYPE__ns1__SendLinksResponse;
			return soap_in__ns1__SendLinksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SendLinks"))
		{	*type = SOAP_TYPE__ns1__SendLinks;
			return soap_in__ns1__SendLinks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNamesDictionaryResponse"))
		{	*type = SOAP_TYPE__ns1__GetNamesDictionaryResponse;
			return soap_in__ns1__GetNamesDictionaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNamesDictionary"))
		{	*type = SOAP_TYPE__ns1__GetNamesDictionary;
			return soap_in__ns1__GetNamesDictionary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLinkResponse"))
		{	*type = SOAP_TYPE__ns1__GetLinkResponse;
			return soap_in__ns1__GetLinkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLink"))
		{	*type = SOAP_TYPE__ns1__GetLink;
			return soap_in__ns1__GetLink(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_out_ns3__char(soap, tag, id, (const int *)ptr, "ns3:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return ((_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, NULL);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return ((_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfintstring-KeyValueOfintstring", id, NULL);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return ((_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint", id, NULL);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return ((_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, NULL);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return ((_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfstringint-KeyValueOfstringint", id, NULL);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return ((_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_out(soap, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1", id, NULL);
	case SOAP_TYPE_ns3__guid__:
		return ((ns3__guid__ *)ptr)->soap_out(soap, tag, id, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_out_ns3__guid(soap, tag, id, (const std::string *)ptr, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return ((ns3__duration__ *)ptr)->soap_out(soap, tag, id, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_out_ns3__duration(soap, tag, id, (const std::string *)ptr, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return ((ns3__char__ *)ptr)->soap_out(soap, tag, id, "ns3:char");
	case SOAP_TYPE_ns5__Page:
		return ((ns5__Page *)ptr)->soap_out(soap, tag, id, "ns5:Page");
	case SOAP_TYPE_ns5__ArrayOfPage:
		return ((ns5__ArrayOfPage *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfPage");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return ((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring:
		return ((ns4__ArrayOfKeyValueOfintstring *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint:
		return ((ns4__ArrayOfKeyValueOfdateTimeint *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return ((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint:
		return ((ns4__ArrayOfKeyValueOfstringint *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_ns4__ArrayOfstring:
		return ((ns4__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfstring");
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return ((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE__ns1__SetSearchPhraseResponse:
		return ((_ns1__SetSearchPhraseResponse *)ptr)->soap_out(soap, "ns1:SetSearchPhraseResponse", id, NULL);
	case SOAP_TYPE__ns1__SetSearchPhrase:
		return ((_ns1__SetSearchPhrase *)ptr)->soap_out(soap, "ns1:SetSearchPhrase", id, NULL);
	case SOAP_TYPE__ns1__SetNameResponse:
		return ((_ns1__SetNameResponse *)ptr)->soap_out(soap, "ns1:SetNameResponse", id, NULL);
	case SOAP_TYPE__ns1__SetName:
		return ((_ns1__SetName *)ptr)->soap_out(soap, "ns1:SetName", id, NULL);
	case SOAP_TYPE__ns1__SetSiteResponse:
		return ((_ns1__SetSiteResponse *)ptr)->soap_out(soap, "ns1:SetSiteResponse", id, NULL);
	case SOAP_TYPE__ns1__SetSite:
		return ((_ns1__SetSite *)ptr)->soap_out(soap, "ns1:SetSite", id, NULL);
	case SOAP_TYPE__ns1__GetSearchPhrasesResponse:
		return ((_ns1__GetSearchPhrasesResponse *)ptr)->soap_out(soap, "ns1:GetSearchPhrasesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSearchPhrases:
		return ((_ns1__GetSearchPhrases *)ptr)->soap_out(soap, "ns1:GetSearchPhrases", id, NULL);
	case SOAP_TYPE__ns1__GetPagesResponse:
		return ((_ns1__GetPagesResponse *)ptr)->soap_out(soap, "ns1:GetPagesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetPages:
		return ((_ns1__GetPages *)ptr)->soap_out(soap, "ns1:GetPages", id, NULL);
	case SOAP_TYPE__ns1__GetSitesResponse:
		return ((_ns1__GetSitesResponse *)ptr)->soap_out(soap, "ns1:GetSitesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSites:
		return ((_ns1__GetSites *)ptr)->soap_out(soap, "ns1:GetSites", id, NULL);
	case SOAP_TYPE__ns1__GetNamesResponse:
		return ((_ns1__GetNamesResponse *)ptr)->soap_out(soap, "ns1:GetNamesResponse", id, NULL);
	case SOAP_TYPE__ns1__GetNames:
		return ((_ns1__GetNames *)ptr)->soap_out(soap, "ns1:GetNames", id, NULL);
	case SOAP_TYPE__ns1__GetStatsByNameResponse:
		return ((_ns1__GetStatsByNameResponse *)ptr)->soap_out(soap, "ns1:GetStatsByNameResponse", id, NULL);
	case SOAP_TYPE__ns1__GetStatsByName:
		return ((_ns1__GetStatsByName *)ptr)->soap_out(soap, "ns1:GetStatsByName", id, NULL);
	case SOAP_TYPE__ns1__GetDailyStatsResponse:
		return ((_ns1__GetDailyStatsResponse *)ptr)->soap_out(soap, "ns1:GetDailyStatsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetDailyStats:
		return ((_ns1__GetDailyStats *)ptr)->soap_out(soap, "ns1:GetDailyStats", id, NULL);
	case SOAP_TYPE__ns1__GetStatsResponse:
		return ((_ns1__GetStatsResponse *)ptr)->soap_out(soap, "ns1:GetStatsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetStats:
		return ((_ns1__GetStats *)ptr)->soap_out(soap, "ns1:GetStats", id, NULL);
	case SOAP_TYPE__ns1__SendAmountDictionaryResponse:
		return ((_ns1__SendAmountDictionaryResponse *)ptr)->soap_out(soap, "ns1:SendAmountDictionaryResponse", id, NULL);
	case SOAP_TYPE__ns1__SendAmountDictionary:
		return ((_ns1__SendAmountDictionary *)ptr)->soap_out(soap, "ns1:SendAmountDictionary", id, NULL);
	case SOAP_TYPE__ns1__SendLinksResponse:
		return ((_ns1__SendLinksResponse *)ptr)->soap_out(soap, "ns1:SendLinksResponse", id, NULL);
	case SOAP_TYPE__ns1__SendLinks:
		return ((_ns1__SendLinks *)ptr)->soap_out(soap, "ns1:SendLinks", id, NULL);
	case SOAP_TYPE__ns1__GetNamesDictionaryResponse:
		return ((_ns1__GetNamesDictionaryResponse *)ptr)->soap_out(soap, "ns1:GetNamesDictionaryResponse", id, NULL);
	case SOAP_TYPE__ns1__GetNamesDictionary:
		return ((_ns1__GetNamesDictionary *)ptr)->soap_out(soap, "ns1:GetNamesDictionary", id, NULL);
	case SOAP_TYPE__ns1__GetLinkResponse:
		return ((_ns1__GetLinkResponse *)ptr)->soap_out(soap, "ns1:GetLinkResponse", id, NULL);
	case SOAP_TYPE__ns1__GetLink:
		return ((_ns1__GetLink *)ptr)->soap_out(soap, "ns1:GetLink", id, NULL);
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return ((xsd__QName_ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__SetSearchPhrase:
		return soap_out_PointerTo_ns1__SetSearchPhrase(soap, tag, id, (_ns1__SetSearchPhrase *const*)ptr, "ns1:SetSearchPhrase");
	case SOAP_TYPE_PointerTo_ns1__SetName:
		return soap_out_PointerTo_ns1__SetName(soap, tag, id, (_ns1__SetName *const*)ptr, "ns1:SetName");
	case SOAP_TYPE_PointerTo_ns1__SetSite:
		return soap_out_PointerTo_ns1__SetSite(soap, tag, id, (_ns1__SetSite *const*)ptr, "ns1:SetSite");
	case SOAP_TYPE_PointerTo_ns1__GetSearchPhrases:
		return soap_out_PointerTo_ns1__GetSearchPhrases(soap, tag, id, (_ns1__GetSearchPhrases *const*)ptr, "ns1:GetSearchPhrases");
	case SOAP_TYPE_PointerTo_ns1__GetPages:
		return soap_out_PointerTo_ns1__GetPages(soap, tag, id, (_ns1__GetPages *const*)ptr, "ns1:GetPages");
	case SOAP_TYPE_PointerTo_ns1__GetSites:
		return soap_out_PointerTo_ns1__GetSites(soap, tag, id, (_ns1__GetSites *const*)ptr, "ns1:GetSites");
	case SOAP_TYPE_PointerTo_ns1__GetNames:
		return soap_out_PointerTo_ns1__GetNames(soap, tag, id, (_ns1__GetNames *const*)ptr, "ns1:GetNames");
	case SOAP_TYPE_PointerTo_ns1__GetStatsByName:
		return soap_out_PointerTo_ns1__GetStatsByName(soap, tag, id, (_ns1__GetStatsByName *const*)ptr, "ns1:GetStatsByName");
	case SOAP_TYPE_PointerTo_ns1__GetDailyStats:
		return soap_out_PointerTo_ns1__GetDailyStats(soap, tag, id, (_ns1__GetDailyStats *const*)ptr, "ns1:GetDailyStats");
	case SOAP_TYPE_PointerTo_ns1__GetStats:
		return soap_out_PointerTo_ns1__GetStats(soap, tag, id, (_ns1__GetStats *const*)ptr, "ns1:GetStats");
	case SOAP_TYPE_PointerTo_ns1__SendAmountDictionary:
		return soap_out_PointerTo_ns1__SendAmountDictionary(soap, tag, id, (_ns1__SendAmountDictionary *const*)ptr, "ns1:SendAmountDictionary");
	case SOAP_TYPE_PointerTo_ns1__SendLinks:
		return soap_out_PointerTo_ns1__SendLinks(soap, tag, id, (_ns1__SendLinks *const*)ptr, "ns1:SendLinks");
	case SOAP_TYPE_PointerTo_ns1__GetNamesDictionary:
		return soap_out_PointerTo_ns1__GetNamesDictionary(soap, tag, id, (_ns1__GetNamesDictionary *const*)ptr, "ns1:GetNamesDictionary");
	case SOAP_TYPE_PointerTo_ns1__GetLink:
		return soap_out_PointerTo_ns1__GetLink(soap, tag, id, (_ns1__GetLink *const*)ptr, "ns1:GetLink");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons5__Page:
		return soap_out_PointerTons5__Page(soap, tag, id, (ns5__Page *const*)ptr, "ns5:Page");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTons5__ArrayOfPage:
		return soap_out_PointerTons5__ArrayOfPage(soap, tag, id, (ns5__ArrayOfPage *const*)ptr, "ns5:ArrayOfPage");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfintstring:
		return soap_out_PointerTons4__ArrayOfKeyValueOfintstring(soap, tag, id, (ns4__ArrayOfKeyValueOfintstring *const*)ptr, "ns4:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeint:
		return soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, tag, id, (ns4__ArrayOfKeyValueOfdateTimeint *const*)ptr, "ns4:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringint:
		return soap_out_PointerTons4__ArrayOfKeyValueOfstringint(soap, tag, id, (ns4__ArrayOfKeyValueOfstringint *const*)ptr, "ns4:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_PointerTons4__ArrayOfstring:
		return soap_out_PointerTons4__ArrayOfstring(soap, tag, id, (ns4__ArrayOfstring *const*)ptr, "ns4:ArrayOfstring");
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		((_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		((_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		((_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		((_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		((_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		((_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__guid__:
		((ns3__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__guid:
		soap_serialize_ns3__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__duration__:
		((ns3__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__duration:
		soap_serialize_ns3__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__char__:
		((ns3__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__Page:
		((ns5__Page *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfPage:
		((ns5__ArrayOfPage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring:
		((ns4__ArrayOfKeyValueOfintstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint:
		((ns4__ArrayOfKeyValueOfdateTimeint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint:
		((ns4__ArrayOfKeyValueOfstringint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfstring:
		((ns4__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSearchPhraseResponse:
		((_ns1__SetSearchPhraseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSearchPhrase:
		((_ns1__SetSearchPhrase *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetNameResponse:
		((_ns1__SetNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetName:
		((_ns1__SetName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSiteResponse:
		((_ns1__SetSiteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSite:
		((_ns1__SetSite *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSearchPhrasesResponse:
		((_ns1__GetSearchPhrasesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSearchPhrases:
		((_ns1__GetSearchPhrases *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPagesResponse:
		((_ns1__GetPagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPages:
		((_ns1__GetPages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSitesResponse:
		((_ns1__GetSitesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSites:
		((_ns1__GetSites *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNamesResponse:
		((_ns1__GetNamesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNames:
		((_ns1__GetNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStatsByNameResponse:
		((_ns1__GetStatsByNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStatsByName:
		((_ns1__GetStatsByName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetDailyStatsResponse:
		((_ns1__GetDailyStatsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetDailyStats:
		((_ns1__GetDailyStats *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStatsResponse:
		((_ns1__GetStatsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStats:
		((_ns1__GetStats *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendAmountDictionaryResponse:
		((_ns1__SendAmountDictionaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendAmountDictionary:
		((_ns1__SendAmountDictionary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendLinksResponse:
		((_ns1__SendLinksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SendLinks:
		((_ns1__SendLinks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNamesDictionaryResponse:
		((_ns1__GetNamesDictionaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNamesDictionary:
		((_ns1__GetNamesDictionary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLinkResponse:
		((_ns1__GetLinkResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLink:
		((_ns1__GetLink *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName_:
		((xsd__QName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__SetSearchPhrase:
		soap_serialize___ns1__SetSearchPhrase(soap, (const struct __ns1__SetSearchPhrase *)ptr);
		break;
	case SOAP_TYPE___ns1__SetName:
		soap_serialize___ns1__SetName(soap, (const struct __ns1__SetName *)ptr);
		break;
	case SOAP_TYPE___ns1__SetSite:
		soap_serialize___ns1__SetSite(soap, (const struct __ns1__SetSite *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSearchPhrases:
		soap_serialize___ns1__GetSearchPhrases(soap, (const struct __ns1__GetSearchPhrases *)ptr);
		break;
	case SOAP_TYPE___ns1__GetPages:
		soap_serialize___ns1__GetPages(soap, (const struct __ns1__GetPages *)ptr);
		break;
	case SOAP_TYPE___ns1__GetSites:
		soap_serialize___ns1__GetSites(soap, (const struct __ns1__GetSites *)ptr);
		break;
	case SOAP_TYPE___ns1__GetNames:
		soap_serialize___ns1__GetNames(soap, (const struct __ns1__GetNames *)ptr);
		break;
	case SOAP_TYPE___ns1__GetStatsByName:
		soap_serialize___ns1__GetStatsByName(soap, (const struct __ns1__GetStatsByName *)ptr);
		break;
	case SOAP_TYPE___ns1__GetDailyStats:
		soap_serialize___ns1__GetDailyStats(soap, (const struct __ns1__GetDailyStats *)ptr);
		break;
	case SOAP_TYPE___ns1__GetStats:
		soap_serialize___ns1__GetStats(soap, (const struct __ns1__GetStats *)ptr);
		break;
	case SOAP_TYPE___ns1__SendAmountDictionary:
		soap_serialize___ns1__SendAmountDictionary(soap, (const struct __ns1__SendAmountDictionary *)ptr);
		break;
	case SOAP_TYPE___ns1__SendLinks:
		soap_serialize___ns1__SendLinks(soap, (const struct __ns1__SendLinks *)ptr);
		break;
	case SOAP_TYPE___ns1__GetNamesDictionary:
		soap_serialize___ns1__GetNamesDictionary(soap, (const struct __ns1__GetNamesDictionary *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLink:
		soap_serialize___ns1__GetLink(soap, (const struct __ns1__GetLink *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSearchPhrase:
		soap_serialize_PointerTo_ns1__SetSearchPhrase(soap, (_ns1__SetSearchPhrase *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetName:
		soap_serialize_PointerTo_ns1__SetName(soap, (_ns1__SetName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSite:
		soap_serialize_PointerTo_ns1__SetSite(soap, (_ns1__SetSite *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSearchPhrases:
		soap_serialize_PointerTo_ns1__GetSearchPhrases(soap, (_ns1__GetSearchPhrases *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetPages:
		soap_serialize_PointerTo_ns1__GetPages(soap, (_ns1__GetPages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSites:
		soap_serialize_PointerTo_ns1__GetSites(soap, (_ns1__GetSites *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetNames:
		soap_serialize_PointerTo_ns1__GetNames(soap, (_ns1__GetNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStatsByName:
		soap_serialize_PointerTo_ns1__GetStatsByName(soap, (_ns1__GetStatsByName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetDailyStats:
		soap_serialize_PointerTo_ns1__GetDailyStats(soap, (_ns1__GetDailyStats *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStats:
		soap_serialize_PointerTo_ns1__GetStats(soap, (_ns1__GetStats *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendAmountDictionary:
		soap_serialize_PointerTo_ns1__SendAmountDictionary(soap, (_ns1__SendAmountDictionary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SendLinks:
		soap_serialize_PointerTo_ns1__SendLinks(soap, (_ns1__SendLinks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetNamesDictionary:
		soap_serialize_PointerTo_ns1__GetNamesDictionary(soap, (_ns1__GetNamesDictionary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLink:
		soap_serialize_PointerTo_ns1__GetLink(soap, (_ns1__GetLink *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__Page:
		soap_serialize_PointerTons5__Page(soap, (ns5__Page *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfPage:
		soap_serialize_PointerTons5__ArrayOfPage(soap, (ns5__ArrayOfPage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfintstring:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfintstring(soap, (ns4__ArrayOfKeyValueOfintstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeint:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, (ns4__ArrayOfKeyValueOfdateTimeint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringint:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfstringint(soap, (ns4__ArrayOfKeyValueOfstringint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfstring:
		soap_serialize_PointerTons4__ArrayOfstring(soap, (ns4__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName_:
		return (void*)soap_instantiate_xsd__QName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__char__:
		return (void*)soap_instantiate_ns3__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration__:
		return (void*)soap_instantiate_ns3__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid__:
		return (void*)soap_instantiate_ns3__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLink:
		return (void*)soap_instantiate__ns1__GetLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLinkResponse:
		return (void*)soap_instantiate__ns1__GetLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNamesDictionary:
		return (void*)soap_instantiate__ns1__GetNamesDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNamesDictionaryResponse:
		return (void*)soap_instantiate__ns1__GetNamesDictionaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendLinks:
		return (void*)soap_instantiate__ns1__SendLinks(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendLinksResponse:
		return (void*)soap_instantiate__ns1__SendLinksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendAmountDictionary:
		return (void*)soap_instantiate__ns1__SendAmountDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SendAmountDictionaryResponse:
		return (void*)soap_instantiate__ns1__SendAmountDictionaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStats:
		return (void*)soap_instantiate__ns1__GetStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStatsResponse:
		return (void*)soap_instantiate__ns1__GetStatsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetDailyStats:
		return (void*)soap_instantiate__ns1__GetDailyStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetDailyStatsResponse:
		return (void*)soap_instantiate__ns1__GetDailyStatsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStatsByName:
		return (void*)soap_instantiate__ns1__GetStatsByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStatsByNameResponse:
		return (void*)soap_instantiate__ns1__GetStatsByNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNames:
		return (void*)soap_instantiate__ns1__GetNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNamesResponse:
		return (void*)soap_instantiate__ns1__GetNamesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSites:
		return (void*)soap_instantiate__ns1__GetSites(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSitesResponse:
		return (void*)soap_instantiate__ns1__GetSitesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPages:
		return (void*)soap_instantiate__ns1__GetPages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPagesResponse:
		return (void*)soap_instantiate__ns1__GetPagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSearchPhrases:
		return (void*)soap_instantiate__ns1__GetSearchPhrases(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSearchPhrasesResponse:
		return (void*)soap_instantiate__ns1__GetSearchPhrasesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSite:
		return (void*)soap_instantiate__ns1__SetSite(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSiteResponse:
		return (void*)soap_instantiate__ns1__SetSiteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetName:
		return (void*)soap_instantiate__ns1__SetName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetNameResponse:
		return (void*)soap_instantiate__ns1__SetNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSearchPhrase:
		return (void*)soap_instantiate__ns1__SetSearchPhrase(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSearchPhraseResponse:
		return (void*)soap_instantiate__ns1__SetSearchPhraseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfstring:
		return (void*)soap_instantiate_ns4__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfstringint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfintstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return (void*)soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return (void*)soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfPage:
		return (void*)soap_instantiate_ns5__ArrayOfPage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__Page:
		return (void*)soap_instantiate_ns5__Page(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLink:
		return (void*)soap_instantiate___ns1__GetLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetNamesDictionary:
		return (void*)soap_instantiate___ns1__GetNamesDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SendLinks:
		return (void*)soap_instantiate___ns1__SendLinks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SendAmountDictionary:
		return (void*)soap_instantiate___ns1__SendAmountDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetStats:
		return (void*)soap_instantiate___ns1__GetStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetDailyStats:
		return (void*)soap_instantiate___ns1__GetDailyStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetStatsByName:
		return (void*)soap_instantiate___ns1__GetStatsByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetNames:
		return (void*)soap_instantiate___ns1__GetNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSites:
		return (void*)soap_instantiate___ns1__GetSites(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetPages:
		return (void*)soap_instantiate___ns1__GetPages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetSearchPhrases:
		return (void*)soap_instantiate___ns1__GetSearchPhrases(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetSite:
		return (void*)soap_instantiate___ns1__SetSite(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetName:
		return (void*)soap_instantiate___ns1__SetName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetSearchPhrase:
		return (void*)soap_instantiate___ns1__SetSearchPhrase(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration:
		return (void*)soap_instantiate_ns3__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid:
		return (void*)soap_instantiate_ns3__guid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Page:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons5__Page(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyType*>(p->ptr));
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__ID_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__ID_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__IDREF_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__IDREF_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__IDREF_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__QName_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__QName_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__QName_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyURI_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyURI_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__boolean*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__boolean*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__byte_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__byte_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__byte_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__dateTime*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__dateTime*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__decimal_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__decimal_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__double:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__double*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__double*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__duration_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__duration_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__float:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__float*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__float*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__int*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__int*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__long*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__long*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__short:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__short*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__short*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedByte_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedByte_*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedInt*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedInt*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedLong*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedLong*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__unsignedShort*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__unsignedShort*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__char__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__char__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__char__*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__duration__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__duration__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__duration__*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__guid__:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns3__guid__*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns3__guid__*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetLink:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetLink*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetLink*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetLinkResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetLinkResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetNamesDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetNamesDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetNamesDictionary*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetNamesDictionaryResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetNamesDictionaryResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetNamesDictionaryResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SendLinks:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SendLinks*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SendLinks*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SendLinksResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SendLinksResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SendLinksResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SendAmountDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SendAmountDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SendAmountDictionary*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SendAmountDictionaryResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SendAmountDictionaryResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SendAmountDictionaryResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetStats*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetStatsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetStatsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetStatsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetDailyStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetDailyStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetDailyStats*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetDailyStatsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetDailyStatsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetDailyStatsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetStatsByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetStatsByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetStatsByName*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetStatsByNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetStatsByNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetStatsByNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetNames*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetNamesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetNamesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetNamesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetSites:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetSites*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetSites*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetSitesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetSitesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetSitesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetPages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetPages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetPages*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetPagesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetPagesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetPagesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetSearchPhrases:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetSearchPhrases*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetSearchPhrases*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__GetSearchPhrasesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__GetSearchPhrasesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__GetSearchPhrasesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetSite:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetSite*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetSite*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetSiteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetSiteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetSiteResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetName*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetSearchPhrase:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetSearchPhrase*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetSearchPhrase*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__SetSearchPhraseResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__SetSearchPhraseResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__SetSearchPhraseResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfstring*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfstringint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfstringint*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfdateTimeint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfdateTimeint*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfintstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfintstring*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__ArrayOfPage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__ArrayOfPage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__ArrayOfPage*>(p->ptr));
		break;
	case SOAP_TYPE_ns5__Page:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns5__Page*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns5__Page*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetLink:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetLink*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetLink*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetNamesDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetNamesDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetNamesDictionary*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SendLinks:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SendLinks*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SendLinks*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SendAmountDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SendAmountDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SendAmountDictionary*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetStats*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetDailyStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetDailyStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetDailyStats*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetStatsByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetStatsByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetStatsByName*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetNames*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetSites:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetSites*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetSites*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetPages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetPages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetPages*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__GetSearchPhrases:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__GetSearchPhrases*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__GetSearchPhrases*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SetSite:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SetSite*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SetSite*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SetName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SetName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SetName*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__SetSearchPhrase:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__SetSearchPhrase*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__SetSearchPhrase*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__duration:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns3__guid:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Page:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ns5__Page * >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ns5__Page * >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*>(p->ptr));
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons5__Page:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns5__Page * >*)p)[len] = *(ns5__Page **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*)p)[len] = *(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*)p)[len] = *(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*)p)[len] = *(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*)p)[len] = *(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*)p)[len] = *(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*)p)[len] = *(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns3__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ns3__char);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns3__char);
	if (soap_out_ns3__char(soap, tag?tag:"ns3:char", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key = NULL;
	this->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value = NULL;
}

void _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key);
	soap_serialize_PointerTons4__ArrayOfKeyValueOfintstring(soap, &this->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value);
#endif
}

int _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value), "ns4:ArrayOfKeyValueOfintstring"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, 0, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0, soap_copy__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)p = *(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)q;
}

void _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key);
	this->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value = NULL;
}

void _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key, SOAP_TYPE_int);
	soap_serialize_PointerTostd__string(soap, &this->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value);
#endif
}

int _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring), type))
		return soap->error;
	if (soap_out_int(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, sizeof(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key), "xsd:int"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value), "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, 0, sizeof(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring), 0, soap_copy__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfintstring-KeyValueOfintstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)p = *(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)q;
}

void _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_time(soap, &this->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key);
	soap_default_int(soap, &this->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value);
}

void _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value, SOAP_TYPE_int);
#endif
}

int _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), type))
		return soap->error;
	if (soap_out_time(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key), ""))
		return soap->error;
	if (soap_out_int(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, sizeof(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key), "xsd:dateTime"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value), "xsd:int"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, 0, sizeof(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), 0, soap_copy__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0 || soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)p = *(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)q;
}

void _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_time(soap, &this->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key);
	this->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value = NULL;
}

void _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfstringint(soap, &this->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value);
#endif
}

int _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), type))
		return soap->error;
	if (soap_out_time(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key), "xsd:dateTime"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value), "ns4:ArrayOfKeyValueOfstringint"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, 0, sizeof(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0, soap_copy__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)p = *(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)q;
}

void _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key = NULL;
	soap_default_int(soap, &this->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value);
}

void _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key);
	soap_embedded(soap, &this->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value, SOAP_TYPE_int);
#endif
}

int _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key), ""))
		return soap->error;
	if (soap_out_int(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, sizeof(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value), "xsd:int"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, 0, sizeof(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint), 0, soap_copy__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringint-KeyValueOfstringint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)p = *(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)q;
}

void _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key = NULL;
	this->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value = NULL;
}

void _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key);
	soap_serialize_PointerTons4__ArrayOfstring(soap, &this->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value);
#endif
}

int _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, const _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:Key", -1, &(a->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerTons4__ArrayOfstring(soap, "ns4:Value", -1, &(a->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:Key", &(a->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfstring(soap, "ns4:Value", &(a->_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value), "ns4:ArrayOfstring"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, 0, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), 0, soap_copy__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_get__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
		if (size)
			*size = sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 %p -> %p\n", q, p));
	*(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)p = *(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)q;
}

void ns3__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__guid(soap, &this->ns3__guid__::__item);
}

void ns3__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns3__guid(soap, &this->ns3__guid__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap *soap, const char *tag, int id, const ns3__guid__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__guid(soap, tag, id, &(a->ns3__guid__::__item), "ns3:guid");
}

void *ns3__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap *soap, const char *tag, ns3__guid__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__guid__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__guid__, sizeof(ns3__guid__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__guid__)
			return (ns3__guid__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__guid(soap, tag, &(a->ns3__guid__::__item), "ns3:guid"))
		return NULL;
	return a;
}

int ns3__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns3__guid__);
	if (this->soap_out(soap, tag?tag:"ns3:guid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap *soap, ns3__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__guid__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__guid__, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns3__guid__);
		if (size)
			*size = sizeof(ns3__guid__);
		((ns3__guid__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns3__guid__, n);
		if (size)
			*size = n * sizeof(ns3__guid__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__guid__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__guid__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__guid__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__guid__ %p -> %p\n", q, p));
	*(ns3__guid__*)p = *(ns3__guid__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns3__guid, 0, sizeof(std::string), 0, soap_copy_ns3__guid);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns3__guid);
	if (soap_out_ns3__guid(soap, tag?tag:"ns3:guid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__duration(soap, &this->ns3__duration__::__item);
}

void ns3__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns3__duration(soap, &this->ns3__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap *soap, const char *tag, int id, const ns3__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__duration(soap, tag, id, &(a->ns3__duration__::__item), "ns3:duration");
}

void *ns3__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap *soap, const char *tag, ns3__duration__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__duration__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__duration__, sizeof(ns3__duration__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__duration__)
			return (ns3__duration__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__duration(soap, tag, &(a->ns3__duration__::__item), "ns3:duration"))
		return NULL;
	return a;
}

int ns3__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns3__duration__);
	if (this->soap_out(soap, tag?tag:"ns3:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap *soap, ns3__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__duration__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__duration__, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns3__duration__);
		if (size)
			*size = sizeof(ns3__duration__);
		((ns3__duration__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns3__duration__, n);
		if (size)
			*size = n * sizeof(ns3__duration__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__duration__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__duration__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__duration__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__duration__ %p -> %p\n", q, p));
	*(ns3__duration__*)p = *(ns3__duration__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns3__duration, 0, sizeof(std::string), 0, soap_copy_ns3__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns3__duration);
	if (soap_out_ns3__duration(soap, tag?tag:"ns3:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns3__char(soap, &this->ns3__char__::__item);
}

void ns3__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns3__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap *soap, const char *tag, int id, const ns3__char__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns3__char(soap, tag, id, &(a->ns3__char__::__item), "ns3:char");
}

void *ns3__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap *soap, const char *tag, ns3__char__ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__char__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__char__, sizeof(ns3__char__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__char__)
			return (ns3__char__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__char(soap, tag, &(a->ns3__char__::__item), "ns3:char"))
		return NULL;
	return a;
}

int ns3__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns3__char__);
	if (this->soap_out(soap, tag?tag:"ns3:char", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap *soap, ns3__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__char__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__char__, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns3__char__);
		if (size)
			*size = sizeof(ns3__char__);
		((ns3__char__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns3__char__, n);
		if (size)
			*size = n * sizeof(ns3__char__);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns3__char__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns3__char__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__char__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__char__ %p -> %p\n", q, p));
	*(ns3__char__*)p = *(ns3__char__*)q;
}

void ns5__Page::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns5__Page::Id = NULL;
	this->ns5__Page::Site = NULL;
	this->ns5__Page::SitePage = NULL;
}

void ns5__Page::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns5__Page::Id);
	soap_serialize_PointerTostd__string(soap, &this->ns5__Page::Site);
	soap_serialize_PointerTostd__string(soap, &this->ns5__Page::SitePage);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__Page::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__Page(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Page(struct soap *soap, const char *tag, int id, const ns5__Page *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__Page), "ns5:Page"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerToint(soap, "ns5:Id", -1, &(a->ns5__Page::Id), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:Site", -1, &(a->ns5__Page::Site), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:SitePage", -1, &(a->ns5__Page::SitePage), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__Page::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__Page(soap, tag, this, type);
}

SOAP_FMAC3 ns5__Page * SOAP_FMAC4 soap_in_ns5__Page(struct soap *soap, const char *tag, ns5__Page *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__Page *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__Page, sizeof(ns5__Page), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__Page)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__Page *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Site1 = 1;
	size_t soap_flag_SitePage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns5:Id", &(a->ns5__Page::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Site1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:Site", &(a->ns5__Page::Site), "xsd:string"))
				{	soap_flag_Site1--;
					continue;
				}
			if (soap_flag_SitePage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns5:SitePage", &(a->ns5__Page::SitePage), "xsd:string"))
				{	soap_flag_SitePage1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__Page *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__Page, 0, sizeof(ns5__Page), 0, soap_copy_ns5__Page);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__Page::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns5__Page);
	if (this->soap_out(soap, tag?tag:"ns5:Page", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__Page::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__Page(soap, this, tag, type);
}

SOAP_FMAC3 ns5__Page * SOAP_FMAC4 soap_get_ns5__Page(struct soap *soap, ns5__Page *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__Page(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__Page * SOAP_FMAC2 soap_instantiate_ns5__Page(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__Page(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__Page, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns5__Page);
		if (size)
			*size = sizeof(ns5__Page);
		((ns5__Page*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns5__Page, n);
		if (size)
			*size = n * sizeof(ns5__Page);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__Page*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__Page*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Page(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__Page %p -> %p\n", q, p));
	*(ns5__Page*)p = *(ns5__Page*)q;
}

void ns5__ArrayOfPage::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons5__Page(soap, &this->ns5__ArrayOfPage::Page);
}

void ns5__ArrayOfPage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons5__Page(soap, &this->ns5__ArrayOfPage::Page);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns5__ArrayOfPage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfPage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfPage(struct soap *soap, const char *tag, int id, const ns5__ArrayOfPage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfPage), "ns5:ArrayOfPage"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfPointerTons5__Page(soap, "ns5:Page", -1, &(a->ns5__ArrayOfPage::Page), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfPage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfPage(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfPage * SOAP_FMAC4 soap_in_ns5__ArrayOfPage(struct soap *soap, const char *tag, ns5__ArrayOfPage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfPage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfPage, sizeof(ns5__ArrayOfPage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfPage)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfPage *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons5__Page(soap, "ns5:Page", &(a->ns5__ArrayOfPage::Page), "ns5:Page"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfPage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfPage, 0, sizeof(ns5__ArrayOfPage), 0, soap_copy_ns5__ArrayOfPage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfPage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns5__ArrayOfPage);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfPage", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfPage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfPage(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfPage * SOAP_FMAC4 soap_get_ns5__ArrayOfPage(struct soap *soap, ns5__ArrayOfPage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfPage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfPage * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfPage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfPage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfPage, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns5__ArrayOfPage);
		if (size)
			*size = sizeof(ns5__ArrayOfPage);
		((ns5__ArrayOfPage*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns5__ArrayOfPage, n);
		if (size)
			*size = n * sizeof(ns5__ArrayOfPage);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfPage*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns5__ArrayOfPage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfPage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfPage %p -> %p\n", q, p));
	*(ns5__ArrayOfPage*)p = *(ns5__ArrayOfPage*)q;
}

void ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = NULL;
}

void ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, &this->ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "ns4:KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", -1, &(a->ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "ns4:KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", &(a->ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, 0, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0, soap_copy_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)p = *(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)q;
}

void ns4__ArrayOfKeyValueOfintstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfintstring::KeyValueOfintstring = NULL;
}

void ns4__ArrayOfKeyValueOfintstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, &this->ns4__ArrayOfKeyValueOfintstring::KeyValueOfintstring);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfintstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfintstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfintstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring), "ns4:ArrayOfKeyValueOfintstring"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, "ns4:KeyValueOfintstring", -1, &(a->ns4__ArrayOfKeyValueOfintstring::KeyValueOfintstring), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfintstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfintstring(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfintstring * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfintstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfintstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring, sizeof(ns4__ArrayOfKeyValueOfintstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfintstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, "ns4:KeyValueOfintstring", &(a->ns4__ArrayOfKeyValueOfintstring::KeyValueOfintstring), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfintstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring, 0, sizeof(ns4__ArrayOfKeyValueOfintstring), 0, soap_copy_ns4__ArrayOfKeyValueOfintstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfintstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfintstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfintstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfintstring(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfintstring * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfintstring(struct soap *soap, ns4__ArrayOfKeyValueOfintstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfintstring * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfintstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfintstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfintstring);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfintstring);
		((ns4__ArrayOfKeyValueOfintstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfintstring, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfintstring);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfintstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfintstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfintstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfintstring %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfintstring*)p = *(ns4__ArrayOfKeyValueOfintstring*)q;
}

void ns4__ArrayOfKeyValueOfdateTimeint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = NULL;
}

void ns4__ArrayOfKeyValueOfdateTimeint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, &this->ns4__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfdateTimeint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfdateTimeint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfdateTimeint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint), "ns4:ArrayOfKeyValueOfdateTimeint"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, "ns4:KeyValueOfdateTimeint", -1, &(a->ns4__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfdateTimeint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfdateTimeint(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfdateTimeint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfdateTimeint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint, sizeof(ns4__ArrayOfKeyValueOfdateTimeint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfdateTimeint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, "ns4:KeyValueOfdateTimeint", &(a->ns4__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfdateTimeint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint, 0, sizeof(ns4__ArrayOfKeyValueOfdateTimeint), 0, soap_copy_ns4__ArrayOfKeyValueOfdateTimeint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfdateTimeint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfdateTimeint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfdateTimeint(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfdateTimeint);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfdateTimeint);
		((ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfdateTimeint, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfdateTimeint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfdateTimeint %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfdateTimeint*)p = *(ns4__ArrayOfKeyValueOfdateTimeint*)q;
}

void ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = NULL;
}

void ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, &this->ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "ns4:KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", -1, &(a->ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "ns4:KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", &(a->ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, 0, sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0, soap_copy_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)p = *(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)q;
}

void ns4__ArrayOfKeyValueOfstringint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfstringint::KeyValueOfstringint = NULL;
}

void ns4__ArrayOfKeyValueOfstringint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, &this->ns4__ArrayOfKeyValueOfstringint::KeyValueOfstringint);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfstringint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfstringint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfstringint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint), "ns4:ArrayOfKeyValueOfstringint"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, "ns4:KeyValueOfstringint", -1, &(a->ns4__ArrayOfKeyValueOfstringint::KeyValueOfstringint), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfstringint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfstringint(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringint * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfstringint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint, sizeof(ns4__ArrayOfKeyValueOfstringint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfstringint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, "ns4:KeyValueOfstringint", &(a->ns4__ArrayOfKeyValueOfstringint::KeyValueOfstringint), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfstringint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint, 0, sizeof(ns4__ArrayOfKeyValueOfstringint), 0, soap_copy_ns4__ArrayOfKeyValueOfstringint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfstringint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfstringint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfstringint(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringint * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfstringint(struct soap *soap, ns4__ArrayOfKeyValueOfstringint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfstringint * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfstringint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfstringint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringint);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfstringint);
		((ns4__ArrayOfKeyValueOfstringint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringint, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfstringint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfstringint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfstringint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfstringint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfstringint %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfstringint*)p = *(ns4__ArrayOfKeyValueOfstringint*)q;
}

void ns4__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns4__ArrayOfstring::string);
}

void ns4__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns4__ArrayOfstring::string);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfstring(struct soap *soap, const char *tag, int id, const ns4__ArrayOfstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfstring), "ns4:ArrayOfstring"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns4:string", -1, &(a->ns4__ArrayOfstring::string), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfstring * SOAP_FMAC4 soap_in_ns4__ArrayOfstring(struct soap *soap, const char *tag, ns4__ArrayOfstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfstring, sizeof(ns4__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ns4:string", &(a->ns4__ArrayOfstring::string), "xsd:string"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfstring, 0, sizeof(ns4__ArrayOfstring), 0, soap_copy_ns4__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfstring * SOAP_FMAC4 soap_get_ns4__ArrayOfstring(struct soap *soap, ns4__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfstring);
		if (size)
			*size = sizeof(ns4__ArrayOfstring);
		((ns4__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfstring, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfstring);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfstring %p -> %p\n", q, p));
	*(ns4__ArrayOfstring*)p = *(ns4__ArrayOfstring*)q;
}

void ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = NULL;
}

void ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, &this->ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, const ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, "ns4:KeyValueOfstringArrayOfstringty7Ep6D1", -1, &(a->ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_in_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, "ns4:KeyValueOfstringArrayOfstringty7Ep6D1", &(a->ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1), ""))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, 0, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), 0, soap_copy_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_get_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (size)
			*size = sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 %p -> %p\n", q, p));
	*(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)p = *(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)q;
}

void _ns1__SetSearchPhraseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SetSearchPhraseResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__SetSearchPhraseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSearchPhraseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSearchPhraseResponse(struct soap *soap, const char *tag, int id, const _ns1__SetSearchPhraseResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSearchPhraseResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSearchPhraseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSearchPhraseResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSearchPhraseResponse * SOAP_FMAC4 soap_in__ns1__SetSearchPhraseResponse(struct soap *soap, const char *tag, _ns1__SetSearchPhraseResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSearchPhraseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSearchPhraseResponse, sizeof(_ns1__SetSearchPhraseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSearchPhraseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSearchPhraseResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSearchPhraseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSearchPhraseResponse, 0, sizeof(_ns1__SetSearchPhraseResponse), 0, soap_copy__ns1__SetSearchPhraseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSearchPhraseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetSearchPhraseResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetSearchPhraseResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSearchPhraseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSearchPhraseResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSearchPhraseResponse * SOAP_FMAC4 soap_get__ns1__SetSearchPhraseResponse(struct soap *soap, _ns1__SetSearchPhraseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSearchPhraseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSearchPhraseResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSearchPhraseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSearchPhraseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSearchPhraseResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetSearchPhraseResponse);
		if (size)
			*size = sizeof(_ns1__SetSearchPhraseResponse);
		((_ns1__SetSearchPhraseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetSearchPhraseResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SetSearchPhraseResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetSearchPhraseResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetSearchPhraseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSearchPhraseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSearchPhraseResponse %p -> %p\n", q, p));
	*(_ns1__SetSearchPhraseResponse*)p = *(_ns1__SetSearchPhraseResponse*)q;
}

void _ns1__SetSearchPhrase::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSearchPhrase::name = NULL;
	this->_ns1__SetSearchPhrase::searchPhrase = NULL;
	/* transient soap skipped */
}

void _ns1__SetSearchPhrase::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSearchPhrase::name);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSearchPhrase::searchPhrase);
	/* transient soap skipped */
#endif
}

int _ns1__SetSearchPhrase::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSearchPhrase(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSearchPhrase(struct soap *soap, const char *tag, int id, const _ns1__SetSearchPhrase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSearchPhrase), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:name", -1, &(a->_ns1__SetSearchPhrase::name), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:searchPhrase", -1, &(a->_ns1__SetSearchPhrase::searchPhrase), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSearchPhrase::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSearchPhrase(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSearchPhrase * SOAP_FMAC4 soap_in__ns1__SetSearchPhrase(struct soap *soap, const char *tag, _ns1__SetSearchPhrase *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSearchPhrase *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSearchPhrase, sizeof(_ns1__SetSearchPhrase), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSearchPhrase)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSearchPhrase *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_searchPhrase1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:name", &(a->_ns1__SetSearchPhrase::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_searchPhrase1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:searchPhrase", &(a->_ns1__SetSearchPhrase::searchPhrase), "xsd:string"))
				{	soap_flag_searchPhrase1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSearchPhrase *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSearchPhrase, 0, sizeof(_ns1__SetSearchPhrase), 0, soap_copy__ns1__SetSearchPhrase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSearchPhrase::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetSearchPhrase);
	if (this->soap_out(soap, tag?tag:"ns1:SetSearchPhrase", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSearchPhrase::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSearchPhrase(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSearchPhrase * SOAP_FMAC4 soap_get__ns1__SetSearchPhrase(struct soap *soap, _ns1__SetSearchPhrase *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSearchPhrase * SOAP_FMAC2 soap_instantiate__ns1__SetSearchPhrase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSearchPhrase(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSearchPhrase, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetSearchPhrase);
		if (size)
			*size = sizeof(_ns1__SetSearchPhrase);
		((_ns1__SetSearchPhrase*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetSearchPhrase, n);
		if (size)
			*size = n * sizeof(_ns1__SetSearchPhrase);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetSearchPhrase*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetSearchPhrase*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSearchPhrase(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSearchPhrase %p -> %p\n", q, p));
	*(_ns1__SetSearchPhrase*)p = *(_ns1__SetSearchPhrase*)q;
}

void _ns1__SetNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SetNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__SetNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetNameResponse(struct soap *soap, const char *tag, int id, const _ns1__SetNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetNameResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetNameResponse * SOAP_FMAC4 soap_in__ns1__SetNameResponse(struct soap *soap, const char *tag, _ns1__SetNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetNameResponse, sizeof(_ns1__SetNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetNameResponse, 0, sizeof(_ns1__SetNameResponse), 0, soap_copy__ns1__SetNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetNameResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetNameResponse * SOAP_FMAC4 soap_get__ns1__SetNameResponse(struct soap *soap, _ns1__SetNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetNameResponse * SOAP_FMAC2 soap_instantiate__ns1__SetNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetNameResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetNameResponse);
		if (size)
			*size = sizeof(_ns1__SetNameResponse);
		((_ns1__SetNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetNameResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SetNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetNameResponse %p -> %p\n", q, p));
	*(_ns1__SetNameResponse*)p = *(_ns1__SetNameResponse*)q;
}

void _ns1__SetName::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetName::name = NULL;
	/* transient soap skipped */
}

void _ns1__SetName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetName::name);
	/* transient soap skipped */
#endif
}

int _ns1__SetName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetName(struct soap *soap, const char *tag, int id, const _ns1__SetName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetName), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:name", -1, &(a->_ns1__SetName::name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetName(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetName * SOAP_FMAC4 soap_in__ns1__SetName(struct soap *soap, const char *tag, _ns1__SetName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetName, sizeof(_ns1__SetName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:name", &(a->_ns1__SetName::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetName, 0, sizeof(_ns1__SetName), 0, soap_copy__ns1__SetName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetName);
	if (this->soap_out(soap, tag?tag:"ns1:SetName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetName(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetName * SOAP_FMAC4 soap_get__ns1__SetName(struct soap *soap, _ns1__SetName *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetName * SOAP_FMAC2 soap_instantiate__ns1__SetName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetName);
		if (size)
			*size = sizeof(_ns1__SetName);
		((_ns1__SetName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetName, n);
		if (size)
			*size = n * sizeof(_ns1__SetName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetName %p -> %p\n", q, p));
	*(_ns1__SetName*)p = *(_ns1__SetName*)q;
}

void _ns1__SetSiteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SetSiteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__SetSiteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSiteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSiteResponse(struct soap *soap, const char *tag, int id, const _ns1__SetSiteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSiteResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSiteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSiteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSiteResponse * SOAP_FMAC4 soap_in__ns1__SetSiteResponse(struct soap *soap, const char *tag, _ns1__SetSiteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSiteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSiteResponse, sizeof(_ns1__SetSiteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSiteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSiteResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSiteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSiteResponse, 0, sizeof(_ns1__SetSiteResponse), 0, soap_copy__ns1__SetSiteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSiteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetSiteResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetSiteResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSiteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSiteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSiteResponse * SOAP_FMAC4 soap_get__ns1__SetSiteResponse(struct soap *soap, _ns1__SetSiteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSiteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSiteResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSiteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSiteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSiteResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetSiteResponse);
		if (size)
			*size = sizeof(_ns1__SetSiteResponse);
		((_ns1__SetSiteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetSiteResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SetSiteResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetSiteResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetSiteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSiteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSiteResponse %p -> %p\n", q, p));
	*(_ns1__SetSiteResponse*)p = *(_ns1__SetSiteResponse*)q;
}

void _ns1__SetSite::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSite::url = NULL;
	/* transient soap skipped */
}

void _ns1__SetSite::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSite::url);
	/* transient soap skipped */
#endif
}

int _ns1__SetSite::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSite(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSite(struct soap *soap, const char *tag, int id, const _ns1__SetSite *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSite), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:url", -1, &(a->_ns1__SetSite::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSite::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSite(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSite * SOAP_FMAC4 soap_in__ns1__SetSite(struct soap *soap, const char *tag, _ns1__SetSite *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSite *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSite, sizeof(_ns1__SetSite), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSite)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSite *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:url", &(a->_ns1__SetSite::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSite *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSite, 0, sizeof(_ns1__SetSite), 0, soap_copy__ns1__SetSite);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSite::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SetSite);
	if (this->soap_out(soap, tag?tag:"ns1:SetSite", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSite::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSite(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSite * SOAP_FMAC4 soap_get__ns1__SetSite(struct soap *soap, _ns1__SetSite *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSite * SOAP_FMAC2 soap_instantiate__ns1__SetSite(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSite(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSite, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SetSite);
		if (size)
			*size = sizeof(_ns1__SetSite);
		((_ns1__SetSite*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SetSite, n);
		if (size)
			*size = n * sizeof(_ns1__SetSite);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SetSite*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SetSite*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSite(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSite %p -> %p\n", q, p));
	*(_ns1__SetSite*)p = *(_ns1__SetSite*)q;
}

void _ns1__GetSearchPhrasesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSearchPhrasesResponse::GetSearchPhrasesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetSearchPhrasesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, &this->_ns1__GetSearchPhrasesResponse::GetSearchPhrasesResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetSearchPhrasesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSearchPhrasesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSearchPhrasesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSearchPhrasesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSearchPhrasesResponse), type))
		return soap->error;
	if (a->GetSearchPhrasesResult)
		soap_element_result(soap, "ns1:GetSearchPhrasesResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "ns1:GetSearchPhrasesResult", -1, &(a->_ns1__GetSearchPhrasesResponse::GetSearchPhrasesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSearchPhrasesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSearchPhrasesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSearchPhrasesResponse * SOAP_FMAC4 soap_in__ns1__GetSearchPhrasesResponse(struct soap *soap, const char *tag, _ns1__GetSearchPhrasesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSearchPhrasesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSearchPhrasesResponse, sizeof(_ns1__GetSearchPhrasesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSearchPhrasesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSearchPhrasesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSearchPhrasesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSearchPhrasesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "ns1:GetSearchPhrasesResult", &(a->_ns1__GetSearchPhrasesResponse::GetSearchPhrasesResult), "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
				{	soap_flag_GetSearchPhrasesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSearchPhrasesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSearchPhrasesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSearchPhrasesResponse, 0, sizeof(_ns1__GetSearchPhrasesResponse), 0, soap_copy__ns1__GetSearchPhrasesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSearchPhrasesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSearchPhrasesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSearchPhrasesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSearchPhrasesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSearchPhrasesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSearchPhrasesResponse * SOAP_FMAC4 soap_get__ns1__GetSearchPhrasesResponse(struct soap *soap, _ns1__GetSearchPhrasesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSearchPhrasesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSearchPhrasesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSearchPhrasesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSearchPhrasesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSearchPhrasesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetSearchPhrasesResponse);
		if (size)
			*size = sizeof(_ns1__GetSearchPhrasesResponse);
		((_ns1__GetSearchPhrasesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetSearchPhrasesResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetSearchPhrasesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSearchPhrasesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSearchPhrasesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSearchPhrasesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSearchPhrasesResponse %p -> %p\n", q, p));
	*(_ns1__GetSearchPhrasesResponse*)p = *(_ns1__GetSearchPhrasesResponse*)q;
}

void _ns1__GetSearchPhrases::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetSearchPhrases::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetSearchPhrases::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSearchPhrases(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSearchPhrases(struct soap *soap, const char *tag, int id, const _ns1__GetSearchPhrases *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSearchPhrases), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSearchPhrases::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSearchPhrases(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSearchPhrases * SOAP_FMAC4 soap_in__ns1__GetSearchPhrases(struct soap *soap, const char *tag, _ns1__GetSearchPhrases *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSearchPhrases *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSearchPhrases, sizeof(_ns1__GetSearchPhrases), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSearchPhrases)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSearchPhrases *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSearchPhrases *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSearchPhrases, 0, sizeof(_ns1__GetSearchPhrases), 0, soap_copy__ns1__GetSearchPhrases);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSearchPhrases::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSearchPhrases);
	if (this->soap_out(soap, tag?tag:"ns1:GetSearchPhrases", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSearchPhrases::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSearchPhrases(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSearchPhrases * SOAP_FMAC4 soap_get__ns1__GetSearchPhrases(struct soap *soap, _ns1__GetSearchPhrases *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSearchPhrases * SOAP_FMAC2 soap_instantiate__ns1__GetSearchPhrases(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSearchPhrases(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSearchPhrases, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetSearchPhrases);
		if (size)
			*size = sizeof(_ns1__GetSearchPhrases);
		((_ns1__GetSearchPhrases*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetSearchPhrases, n);
		if (size)
			*size = n * sizeof(_ns1__GetSearchPhrases);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSearchPhrases*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSearchPhrases*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSearchPhrases(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSearchPhrases %p -> %p\n", q, p));
	*(_ns1__GetSearchPhrases*)p = *(_ns1__GetSearchPhrases*)q;
}

void _ns1__GetPagesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetPagesResponse::GetPagesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetPagesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons5__ArrayOfPage(soap, &this->_ns1__GetPagesResponse::GetPagesResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetPagesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPagesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPagesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetPagesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPagesResponse), type))
		return soap->error;
	if (a->GetPagesResult)
		soap_element_result(soap, "ns1:GetPagesResult");
	if (soap_out_PointerTons5__ArrayOfPage(soap, "ns1:GetPagesResult", -1, &(a->_ns1__GetPagesResponse::GetPagesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPagesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPagesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPagesResponse * SOAP_FMAC4 soap_in__ns1__GetPagesResponse(struct soap *soap, const char *tag, _ns1__GetPagesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPagesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPagesResponse, sizeof(_ns1__GetPagesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPagesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPagesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetPagesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPagesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfPage(soap, "ns1:GetPagesResult", &(a->_ns1__GetPagesResponse::GetPagesResult), "ns5:ArrayOfPage"))
				{	soap_flag_GetPagesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetPagesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPagesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPagesResponse, 0, sizeof(_ns1__GetPagesResponse), 0, soap_copy__ns1__GetPagesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetPagesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetPagesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetPagesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetPagesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPagesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPagesResponse * SOAP_FMAC4 soap_get__ns1__GetPagesResponse(struct soap *soap, _ns1__GetPagesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPagesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetPagesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetPagesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPagesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPagesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetPagesResponse);
		if (size)
			*size = sizeof(_ns1__GetPagesResponse);
		((_ns1__GetPagesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetPagesResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetPagesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetPagesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetPagesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPagesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPagesResponse %p -> %p\n", q, p));
	*(_ns1__GetPagesResponse*)p = *(_ns1__GetPagesResponse*)q;
}

void _ns1__GetPages::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetPages::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetPages::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPages(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPages(struct soap *soap, const char *tag, int id, const _ns1__GetPages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPages), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPages::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPages(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPages * SOAP_FMAC4 soap_in__ns1__GetPages(struct soap *soap, const char *tag, _ns1__GetPages *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPages *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPages, sizeof(_ns1__GetPages), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPages)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPages *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPages *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPages, 0, sizeof(_ns1__GetPages), 0, soap_copy__ns1__GetPages);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetPages::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetPages);
	if (this->soap_out(soap, tag?tag:"ns1:GetPages", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetPages::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPages(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPages * SOAP_FMAC4 soap_get__ns1__GetPages(struct soap *soap, _ns1__GetPages *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetPages * SOAP_FMAC2 soap_instantiate__ns1__GetPages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPages, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetPages);
		if (size)
			*size = sizeof(_ns1__GetPages);
		((_ns1__GetPages*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetPages, n);
		if (size)
			*size = n * sizeof(_ns1__GetPages);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetPages*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetPages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPages %p -> %p\n", q, p));
	*(_ns1__GetPages*)p = *(_ns1__GetPages*)q;
}

void _ns1__GetSitesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSitesResponse::GetSitesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetSitesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfintstring(soap, &this->_ns1__GetSitesResponse::GetSitesResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetSitesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSitesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSitesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSitesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSitesResponse), type))
		return soap->error;
	if (a->GetSitesResult)
		soap_element_result(soap, "ns1:GetSitesResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns1:GetSitesResult", -1, &(a->_ns1__GetSitesResponse::GetSitesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSitesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSitesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSitesResponse * SOAP_FMAC4 soap_in__ns1__GetSitesResponse(struct soap *soap, const char *tag, _ns1__GetSitesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSitesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSitesResponse, sizeof(_ns1__GetSitesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSitesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSitesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSitesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSitesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns1:GetSitesResult", &(a->_ns1__GetSitesResponse::GetSitesResult), "ns4:ArrayOfKeyValueOfintstring"))
				{	soap_flag_GetSitesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSitesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSitesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSitesResponse, 0, sizeof(_ns1__GetSitesResponse), 0, soap_copy__ns1__GetSitesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSitesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSitesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSitesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSitesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSitesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSitesResponse * SOAP_FMAC4 soap_get__ns1__GetSitesResponse(struct soap *soap, _ns1__GetSitesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSitesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSitesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSitesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSitesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSitesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetSitesResponse);
		if (size)
			*size = sizeof(_ns1__GetSitesResponse);
		((_ns1__GetSitesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetSitesResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetSitesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSitesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSitesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSitesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSitesResponse %p -> %p\n", q, p));
	*(_ns1__GetSitesResponse*)p = *(_ns1__GetSitesResponse*)q;
}

void _ns1__GetSites::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetSites::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetSites::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSites(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSites(struct soap *soap, const char *tag, int id, const _ns1__GetSites *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSites), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSites::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSites(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSites * SOAP_FMAC4 soap_in__ns1__GetSites(struct soap *soap, const char *tag, _ns1__GetSites *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSites *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSites, sizeof(_ns1__GetSites), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSites)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSites *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSites *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSites, 0, sizeof(_ns1__GetSites), 0, soap_copy__ns1__GetSites);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSites::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetSites);
	if (this->soap_out(soap, tag?tag:"ns1:GetSites", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSites::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSites(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSites * SOAP_FMAC4 soap_get__ns1__GetSites(struct soap *soap, _ns1__GetSites *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSites * SOAP_FMAC2 soap_instantiate__ns1__GetSites(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSites(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSites, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetSites);
		if (size)
			*size = sizeof(_ns1__GetSites);
		((_ns1__GetSites*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetSites, n);
		if (size)
			*size = n * sizeof(_ns1__GetSites);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetSites*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetSites*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSites(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSites %p -> %p\n", q, p));
	*(_ns1__GetSites*)p = *(_ns1__GetSites*)q;
}

void _ns1__GetNamesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetNamesResponse::GetNamesResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetNamesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfintstring(soap, &this->_ns1__GetNamesResponse::GetNamesResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetNamesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNamesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNamesResponse(struct soap *soap, const char *tag, int id, const _ns1__GetNamesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNamesResponse), type))
		return soap->error;
	if (a->GetNamesResult)
		soap_element_result(soap, "ns1:GetNamesResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns1:GetNamesResult", -1, &(a->_ns1__GetNamesResponse::GetNamesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNamesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNamesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNamesResponse * SOAP_FMAC4 soap_in__ns1__GetNamesResponse(struct soap *soap, const char *tag, _ns1__GetNamesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNamesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNamesResponse, sizeof(_ns1__GetNamesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNamesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNamesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetNamesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetNamesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfintstring(soap, "ns1:GetNamesResult", &(a->_ns1__GetNamesResponse::GetNamesResult), "ns4:ArrayOfKeyValueOfintstring"))
				{	soap_flag_GetNamesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetNamesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNamesResponse, 0, sizeof(_ns1__GetNamesResponse), 0, soap_copy__ns1__GetNamesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetNamesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetNamesResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetNamesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetNamesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNamesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNamesResponse * SOAP_FMAC4 soap_get__ns1__GetNamesResponse(struct soap *soap, _ns1__GetNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetNamesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNamesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNamesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetNamesResponse);
		if (size)
			*size = sizeof(_ns1__GetNamesResponse);
		((_ns1__GetNamesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetNamesResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetNamesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetNamesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetNamesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNamesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNamesResponse %p -> %p\n", q, p));
	*(_ns1__GetNamesResponse*)p = *(_ns1__GetNamesResponse*)q;
}

void _ns1__GetNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetNames::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNames(struct soap *soap, const char *tag, int id, const _ns1__GetNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNames), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNames(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNames * SOAP_FMAC4 soap_in__ns1__GetNames(struct soap *soap, const char *tag, _ns1__GetNames *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNames *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNames, sizeof(_ns1__GetNames), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNames)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNames *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNames, 0, sizeof(_ns1__GetNames), 0, soap_copy__ns1__GetNames);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetNames);
	if (this->soap_out(soap, tag?tag:"ns1:GetNames", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNames(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNames * SOAP_FMAC4 soap_get__ns1__GetNames(struct soap *soap, _ns1__GetNames *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetNames * SOAP_FMAC2 soap_instantiate__ns1__GetNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNames, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetNames);
		if (size)
			*size = sizeof(_ns1__GetNames);
		((_ns1__GetNames*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetNames, n);
		if (size)
			*size = n * sizeof(_ns1__GetNames);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetNames*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNames %p -> %p\n", q, p));
	*(_ns1__GetNames*)p = *(_ns1__GetNames*)q;
}

void _ns1__GetStatsByNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetStatsByNameResponse::GetStatsByNameResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetStatsByNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, &this->_ns1__GetStatsByNameResponse::GetStatsByNameResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetStatsByNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStatsByNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatsByNameResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStatsByNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStatsByNameResponse), type))
		return soap->error;
	if (a->GetStatsByNameResult)
		soap_element_result(soap, "ns1:GetStatsByNameResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, "ns1:GetStatsByNameResult", -1, &(a->_ns1__GetStatsByNameResponse::GetStatsByNameResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStatsByNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStatsByNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStatsByNameResponse * SOAP_FMAC4 soap_in__ns1__GetStatsByNameResponse(struct soap *soap, const char *tag, _ns1__GetStatsByNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStatsByNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStatsByNameResponse, sizeof(_ns1__GetStatsByNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStatsByNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStatsByNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStatsByNameResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStatsByNameResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, "ns1:GetStatsByNameResult", &(a->_ns1__GetStatsByNameResponse::GetStatsByNameResult), "ns4:ArrayOfKeyValueOfdateTimeint"))
				{	soap_flag_GetStatsByNameResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetStatsByNameResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStatsByNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStatsByNameResponse, 0, sizeof(_ns1__GetStatsByNameResponse), 0, soap_copy__ns1__GetStatsByNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStatsByNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetStatsByNameResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetStatsByNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStatsByNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStatsByNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStatsByNameResponse * SOAP_FMAC4 soap_get__ns1__GetStatsByNameResponse(struct soap *soap, _ns1__GetStatsByNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStatsByNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStatsByNameResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStatsByNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStatsByNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStatsByNameResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetStatsByNameResponse);
		if (size)
			*size = sizeof(_ns1__GetStatsByNameResponse);
		((_ns1__GetStatsByNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetStatsByNameResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetStatsByNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetStatsByNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetStatsByNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStatsByNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStatsByNameResponse %p -> %p\n", q, p));
	*(_ns1__GetStatsByNameResponse*)p = *(_ns1__GetStatsByNameResponse*)q;
}

void _ns1__GetStatsByName::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetStatsByName::name = NULL;
	/* transient soap skipped */
}

void _ns1__GetStatsByName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetStatsByName::name);
	/* transient soap skipped */
#endif
}

int _ns1__GetStatsByName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStatsByName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatsByName(struct soap *soap, const char *tag, int id, const _ns1__GetStatsByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStatsByName), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:name", -1, &(a->_ns1__GetStatsByName::name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStatsByName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStatsByName(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStatsByName * SOAP_FMAC4 soap_in__ns1__GetStatsByName(struct soap *soap, const char *tag, _ns1__GetStatsByName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStatsByName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStatsByName, sizeof(_ns1__GetStatsByName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStatsByName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStatsByName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:name", &(a->_ns1__GetStatsByName::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStatsByName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStatsByName, 0, sizeof(_ns1__GetStatsByName), 0, soap_copy__ns1__GetStatsByName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStatsByName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetStatsByName);
	if (this->soap_out(soap, tag?tag:"ns1:GetStatsByName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStatsByName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStatsByName(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStatsByName * SOAP_FMAC4 soap_get__ns1__GetStatsByName(struct soap *soap, _ns1__GetStatsByName *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStatsByName * SOAP_FMAC2 soap_instantiate__ns1__GetStatsByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStatsByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStatsByName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetStatsByName);
		if (size)
			*size = sizeof(_ns1__GetStatsByName);
		((_ns1__GetStatsByName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetStatsByName, n);
		if (size)
			*size = n * sizeof(_ns1__GetStatsByName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetStatsByName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetStatsByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStatsByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStatsByName %p -> %p\n", q, p));
	*(_ns1__GetStatsByName*)p = *(_ns1__GetStatsByName*)q;
}

void _ns1__GetDailyStatsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetDailyStatsResponse::GetDailyStatsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetDailyStatsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, &this->_ns1__GetDailyStatsResponse::GetDailyStatsResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetDailyStatsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetDailyStatsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDailyStatsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetDailyStatsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetDailyStatsResponse), type))
		return soap->error;
	if (a->GetDailyStatsResult)
		soap_element_result(soap, "ns1:GetDailyStatsResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "ns1:GetDailyStatsResult", -1, &(a->_ns1__GetDailyStatsResponse::GetDailyStatsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetDailyStatsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetDailyStatsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetDailyStatsResponse * SOAP_FMAC4 soap_in__ns1__GetDailyStatsResponse(struct soap *soap, const char *tag, _ns1__GetDailyStatsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetDailyStatsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetDailyStatsResponse, sizeof(_ns1__GetDailyStatsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetDailyStatsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetDailyStatsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDailyStatsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDailyStatsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "ns1:GetDailyStatsResult", &(a->_ns1__GetDailyStatsResponse::GetDailyStatsResult), "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
				{	soap_flag_GetDailyStatsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetDailyStatsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetDailyStatsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetDailyStatsResponse, 0, sizeof(_ns1__GetDailyStatsResponse), 0, soap_copy__ns1__GetDailyStatsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetDailyStatsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetDailyStatsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetDailyStatsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetDailyStatsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetDailyStatsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetDailyStatsResponse * SOAP_FMAC4 soap_get__ns1__GetDailyStatsResponse(struct soap *soap, _ns1__GetDailyStatsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetDailyStatsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetDailyStatsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDailyStatsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetDailyStatsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetDailyStatsResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetDailyStatsResponse);
		if (size)
			*size = sizeof(_ns1__GetDailyStatsResponse);
		((_ns1__GetDailyStatsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetDailyStatsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetDailyStatsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetDailyStatsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetDailyStatsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetDailyStatsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetDailyStatsResponse %p -> %p\n", q, p));
	*(_ns1__GetDailyStatsResponse*)p = *(_ns1__GetDailyStatsResponse*)q;
}

void _ns1__GetDailyStats::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetDailyStats::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetDailyStats::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetDailyStats(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDailyStats(struct soap *soap, const char *tag, int id, const _ns1__GetDailyStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetDailyStats), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetDailyStats::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetDailyStats(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetDailyStats * SOAP_FMAC4 soap_in__ns1__GetDailyStats(struct soap *soap, const char *tag, _ns1__GetDailyStats *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetDailyStats *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetDailyStats, sizeof(_ns1__GetDailyStats), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetDailyStats)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetDailyStats *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetDailyStats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetDailyStats, 0, sizeof(_ns1__GetDailyStats), 0, soap_copy__ns1__GetDailyStats);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetDailyStats::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetDailyStats);
	if (this->soap_out(soap, tag?tag:"ns1:GetDailyStats", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetDailyStats::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetDailyStats(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetDailyStats * SOAP_FMAC4 soap_get__ns1__GetDailyStats(struct soap *soap, _ns1__GetDailyStats *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetDailyStats * SOAP_FMAC2 soap_instantiate__ns1__GetDailyStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetDailyStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetDailyStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetDailyStats);
		if (size)
			*size = sizeof(_ns1__GetDailyStats);
		((_ns1__GetDailyStats*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetDailyStats, n);
		if (size)
			*size = n * sizeof(_ns1__GetDailyStats);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetDailyStats*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetDailyStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetDailyStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetDailyStats %p -> %p\n", q, p));
	*(_ns1__GetDailyStats*)p = *(_ns1__GetDailyStats*)q;
}

void _ns1__GetStatsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetStatsResponse::GetStatsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetStatsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfstringint(soap, &this->_ns1__GetStatsResponse::GetStatsResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetStatsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStatsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStatsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStatsResponse), type))
		return soap->error;
	if (a->GetStatsResult)
		soap_element_result(soap, "ns1:GetStatsResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns1:GetStatsResult", -1, &(a->_ns1__GetStatsResponse::GetStatsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStatsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStatsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStatsResponse * SOAP_FMAC4 soap_in__ns1__GetStatsResponse(struct soap *soap, const char *tag, _ns1__GetStatsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStatsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStatsResponse, sizeof(_ns1__GetStatsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStatsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStatsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStatsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStatsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns1:GetStatsResult", &(a->_ns1__GetStatsResponse::GetStatsResult), "ns4:ArrayOfKeyValueOfstringint"))
				{	soap_flag_GetStatsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetStatsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStatsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStatsResponse, 0, sizeof(_ns1__GetStatsResponse), 0, soap_copy__ns1__GetStatsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStatsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetStatsResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetStatsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStatsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStatsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStatsResponse * SOAP_FMAC4 soap_get__ns1__GetStatsResponse(struct soap *soap, _ns1__GetStatsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStatsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStatsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStatsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStatsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStatsResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetStatsResponse);
		if (size)
			*size = sizeof(_ns1__GetStatsResponse);
		((_ns1__GetStatsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetStatsResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetStatsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetStatsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetStatsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStatsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStatsResponse %p -> %p\n", q, p));
	*(_ns1__GetStatsResponse*)p = *(_ns1__GetStatsResponse*)q;
}

void _ns1__GetStats::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetStats::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetStats::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStats(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStats(struct soap *soap, const char *tag, int id, const _ns1__GetStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStats), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStats::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStats(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStats * SOAP_FMAC4 soap_in__ns1__GetStats(struct soap *soap, const char *tag, _ns1__GetStats *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStats *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStats, sizeof(_ns1__GetStats), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStats)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStats *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStats, 0, sizeof(_ns1__GetStats), 0, soap_copy__ns1__GetStats);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetStats::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetStats);
	if (this->soap_out(soap, tag?tag:"ns1:GetStats", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStats::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStats(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStats * SOAP_FMAC4 soap_get__ns1__GetStats(struct soap *soap, _ns1__GetStats *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetStats * SOAP_FMAC2 soap_instantiate__ns1__GetStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetStats);
		if (size)
			*size = sizeof(_ns1__GetStats);
		((_ns1__GetStats*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetStats, n);
		if (size)
			*size = n * sizeof(_ns1__GetStats);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetStats*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStats %p -> %p\n", q, p));
	*(_ns1__GetStats*)p = *(_ns1__GetStats*)q;
}

void _ns1__SendAmountDictionaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SendAmountDictionaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__SendAmountDictionaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendAmountDictionaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendAmountDictionaryResponse(struct soap *soap, const char *tag, int id, const _ns1__SendAmountDictionaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendAmountDictionaryResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendAmountDictionaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendAmountDictionaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendAmountDictionaryResponse * SOAP_FMAC4 soap_in__ns1__SendAmountDictionaryResponse(struct soap *soap, const char *tag, _ns1__SendAmountDictionaryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendAmountDictionaryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendAmountDictionaryResponse, sizeof(_ns1__SendAmountDictionaryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendAmountDictionaryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendAmountDictionaryResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendAmountDictionaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendAmountDictionaryResponse, 0, sizeof(_ns1__SendAmountDictionaryResponse), 0, soap_copy__ns1__SendAmountDictionaryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SendAmountDictionaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SendAmountDictionaryResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SendAmountDictionaryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SendAmountDictionaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendAmountDictionaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendAmountDictionaryResponse * SOAP_FMAC4 soap_get__ns1__SendAmountDictionaryResponse(struct soap *soap, _ns1__SendAmountDictionaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendAmountDictionaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SendAmountDictionaryResponse * SOAP_FMAC2 soap_instantiate__ns1__SendAmountDictionaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendAmountDictionaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendAmountDictionaryResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SendAmountDictionaryResponse);
		if (size)
			*size = sizeof(_ns1__SendAmountDictionaryResponse);
		((_ns1__SendAmountDictionaryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SendAmountDictionaryResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SendAmountDictionaryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SendAmountDictionaryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SendAmountDictionaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendAmountDictionaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendAmountDictionaryResponse %p -> %p\n", q, p));
	*(_ns1__SendAmountDictionaryResponse*)p = *(_ns1__SendAmountDictionaryResponse*)q;
}

void _ns1__SendAmountDictionary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendAmountDictionary::namesAmountDictionary = NULL;
	this->_ns1__SendAmountDictionary::url = NULL;
	/* transient soap skipped */
}

void _ns1__SendAmountDictionary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfstringint(soap, &this->_ns1__SendAmountDictionary::namesAmountDictionary);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendAmountDictionary::url);
	/* transient soap skipped */
#endif
}

int _ns1__SendAmountDictionary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendAmountDictionary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendAmountDictionary(struct soap *soap, const char *tag, int id, const _ns1__SendAmountDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendAmountDictionary), type))
		return soap->error;
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns1:namesAmountDictionary", -1, &(a->_ns1__SendAmountDictionary::namesAmountDictionary), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:url", -1, &(a->_ns1__SendAmountDictionary::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendAmountDictionary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendAmountDictionary(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendAmountDictionary * SOAP_FMAC4 soap_in__ns1__SendAmountDictionary(struct soap *soap, const char *tag, _ns1__SendAmountDictionary *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendAmountDictionary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendAmountDictionary, sizeof(_ns1__SendAmountDictionary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendAmountDictionary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendAmountDictionary *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_namesAmountDictionary1 = 1;
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_namesAmountDictionary1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfstringint(soap, "ns1:namesAmountDictionary", &(a->_ns1__SendAmountDictionary::namesAmountDictionary), "ns4:ArrayOfKeyValueOfstringint"))
				{	soap_flag_namesAmountDictionary1--;
					continue;
				}
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:url", &(a->_ns1__SendAmountDictionary::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendAmountDictionary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendAmountDictionary, 0, sizeof(_ns1__SendAmountDictionary), 0, soap_copy__ns1__SendAmountDictionary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SendAmountDictionary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SendAmountDictionary);
	if (this->soap_out(soap, tag?tag:"ns1:SendAmountDictionary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SendAmountDictionary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendAmountDictionary(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendAmountDictionary * SOAP_FMAC4 soap_get__ns1__SendAmountDictionary(struct soap *soap, _ns1__SendAmountDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SendAmountDictionary * SOAP_FMAC2 soap_instantiate__ns1__SendAmountDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendAmountDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendAmountDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SendAmountDictionary);
		if (size)
			*size = sizeof(_ns1__SendAmountDictionary);
		((_ns1__SendAmountDictionary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SendAmountDictionary, n);
		if (size)
			*size = n * sizeof(_ns1__SendAmountDictionary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SendAmountDictionary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SendAmountDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendAmountDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendAmountDictionary %p -> %p\n", q, p));
	*(_ns1__SendAmountDictionary*)p = *(_ns1__SendAmountDictionary*)q;
}

void _ns1__SendLinksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__SendLinksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__SendLinksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendLinksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendLinksResponse(struct soap *soap, const char *tag, int id, const _ns1__SendLinksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendLinksResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendLinksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendLinksResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendLinksResponse * SOAP_FMAC4 soap_in__ns1__SendLinksResponse(struct soap *soap, const char *tag, _ns1__SendLinksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendLinksResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendLinksResponse, sizeof(_ns1__SendLinksResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendLinksResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendLinksResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendLinksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendLinksResponse, 0, sizeof(_ns1__SendLinksResponse), 0, soap_copy__ns1__SendLinksResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SendLinksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SendLinksResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SendLinksResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SendLinksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendLinksResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendLinksResponse * SOAP_FMAC4 soap_get__ns1__SendLinksResponse(struct soap *soap, _ns1__SendLinksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendLinksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SendLinksResponse * SOAP_FMAC2 soap_instantiate__ns1__SendLinksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendLinksResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendLinksResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SendLinksResponse);
		if (size)
			*size = sizeof(_ns1__SendLinksResponse);
		((_ns1__SendLinksResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SendLinksResponse, n);
		if (size)
			*size = n * sizeof(_ns1__SendLinksResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SendLinksResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SendLinksResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendLinksResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendLinksResponse %p -> %p\n", q, p));
	*(_ns1__SendLinksResponse*)p = *(_ns1__SendLinksResponse*)q;
}

void _ns1__SendLinks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SendLinks::links = NULL;
	this->_ns1__SendLinks::url = NULL;
	/* transient soap skipped */
}

void _ns1__SendLinks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfstring(soap, &this->_ns1__SendLinks::links);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SendLinks::url);
	/* transient soap skipped */
#endif
}

int _ns1__SendLinks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SendLinks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendLinks(struct soap *soap, const char *tag, int id, const _ns1__SendLinks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SendLinks), type))
		return soap->error;
	if (soap_out_PointerTons4__ArrayOfstring(soap, "ns1:links", -1, &(a->_ns1__SendLinks::links), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:url", -1, &(a->_ns1__SendLinks::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SendLinks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SendLinks(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SendLinks * SOAP_FMAC4 soap_in__ns1__SendLinks(struct soap *soap, const char *tag, _ns1__SendLinks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SendLinks *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SendLinks, sizeof(_ns1__SendLinks), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SendLinks)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SendLinks *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_links1 = 1;
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_links1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfstring(soap, "ns1:links", &(a->_ns1__SendLinks::links), "ns4:ArrayOfstring"))
				{	soap_flag_links1--;
					continue;
				}
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:url", &(a->_ns1__SendLinks::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SendLinks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SendLinks, 0, sizeof(_ns1__SendLinks), 0, soap_copy__ns1__SendLinks);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SendLinks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__SendLinks);
	if (this->soap_out(soap, tag?tag:"ns1:SendLinks", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SendLinks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SendLinks(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SendLinks * SOAP_FMAC4 soap_get__ns1__SendLinks(struct soap *soap, _ns1__SendLinks *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SendLinks * SOAP_FMAC2 soap_instantiate__ns1__SendLinks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SendLinks(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SendLinks, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__SendLinks);
		if (size)
			*size = sizeof(_ns1__SendLinks);
		((_ns1__SendLinks*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__SendLinks, n);
		if (size)
			*size = n * sizeof(_ns1__SendLinks);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__SendLinks*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__SendLinks*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SendLinks(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SendLinks %p -> %p\n", q, p));
	*(_ns1__SendLinks*)p = *(_ns1__SendLinks*)q;
}

void _ns1__GetNamesDictionaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetNamesDictionaryResponse::GetNamesDictionaryResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetNamesDictionaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, &this->_ns1__GetNamesDictionaryResponse::GetNamesDictionaryResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetNamesDictionaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNamesDictionaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNamesDictionaryResponse(struct soap *soap, const char *tag, int id, const _ns1__GetNamesDictionaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNamesDictionaryResponse), type))
		return soap->error;
	if (a->GetNamesDictionaryResult)
		soap_element_result(soap, "ns1:GetNamesDictionaryResult");
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, "ns1:GetNamesDictionaryResult", -1, &(a->_ns1__GetNamesDictionaryResponse::GetNamesDictionaryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNamesDictionaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNamesDictionaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNamesDictionaryResponse * SOAP_FMAC4 soap_in__ns1__GetNamesDictionaryResponse(struct soap *soap, const char *tag, _ns1__GetNamesDictionaryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNamesDictionaryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNamesDictionaryResponse, sizeof(_ns1__GetNamesDictionaryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNamesDictionaryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNamesDictionaryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetNamesDictionaryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetNamesDictionaryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, "ns1:GetNamesDictionaryResult", &(a->_ns1__GetNamesDictionaryResponse::GetNamesDictionaryResult), "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
				{	soap_flag_GetNamesDictionaryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetNamesDictionaryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNamesDictionaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNamesDictionaryResponse, 0, sizeof(_ns1__GetNamesDictionaryResponse), 0, soap_copy__ns1__GetNamesDictionaryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetNamesDictionaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetNamesDictionaryResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetNamesDictionaryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetNamesDictionaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNamesDictionaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNamesDictionaryResponse * SOAP_FMAC4 soap_get__ns1__GetNamesDictionaryResponse(struct soap *soap, _ns1__GetNamesDictionaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNamesDictionaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetNamesDictionaryResponse * SOAP_FMAC2 soap_instantiate__ns1__GetNamesDictionaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNamesDictionaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNamesDictionaryResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetNamesDictionaryResponse);
		if (size)
			*size = sizeof(_ns1__GetNamesDictionaryResponse);
		((_ns1__GetNamesDictionaryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetNamesDictionaryResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetNamesDictionaryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetNamesDictionaryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetNamesDictionaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNamesDictionaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNamesDictionaryResponse %p -> %p\n", q, p));
	*(_ns1__GetNamesDictionaryResponse*)p = *(_ns1__GetNamesDictionaryResponse*)q;
}

void _ns1__GetNamesDictionary::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetNamesDictionary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetNamesDictionary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNamesDictionary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNamesDictionary(struct soap *soap, const char *tag, int id, const _ns1__GetNamesDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNamesDictionary), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNamesDictionary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNamesDictionary(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNamesDictionary * SOAP_FMAC4 soap_in__ns1__GetNamesDictionary(struct soap *soap, const char *tag, _ns1__GetNamesDictionary *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNamesDictionary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNamesDictionary, sizeof(_ns1__GetNamesDictionary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNamesDictionary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNamesDictionary *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNamesDictionary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNamesDictionary, 0, sizeof(_ns1__GetNamesDictionary), 0, soap_copy__ns1__GetNamesDictionary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetNamesDictionary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetNamesDictionary);
	if (this->soap_out(soap, tag?tag:"ns1:GetNamesDictionary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetNamesDictionary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNamesDictionary(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNamesDictionary * SOAP_FMAC4 soap_get__ns1__GetNamesDictionary(struct soap *soap, _ns1__GetNamesDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetNamesDictionary * SOAP_FMAC2 soap_instantiate__ns1__GetNamesDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNamesDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNamesDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetNamesDictionary);
		if (size)
			*size = sizeof(_ns1__GetNamesDictionary);
		((_ns1__GetNamesDictionary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetNamesDictionary, n);
		if (size)
			*size = n * sizeof(_ns1__GetNamesDictionary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetNamesDictionary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetNamesDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNamesDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNamesDictionary %p -> %p\n", q, p));
	*(_ns1__GetNamesDictionary*)p = *(_ns1__GetNamesDictionary*)q;
}

void _ns1__GetLinkResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLinkResponse::GetLinkResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetLinkResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetLinkResponse::GetLinkResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetLinkResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLinkResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLinkResponse(struct soap *soap, const char *tag, int id, const _ns1__GetLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLinkResponse), type))
		return soap->error;
	if (a->GetLinkResult)
		soap_element_result(soap, "ns1:GetLinkResult");
	if (soap_out_PointerTostd__string(soap, "ns1:GetLinkResult", -1, &(a->_ns1__GetLinkResponse::GetLinkResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLinkResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLinkResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLinkResponse * SOAP_FMAC4 soap_in__ns1__GetLinkResponse(struct soap *soap, const char *tag, _ns1__GetLinkResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLinkResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLinkResponse, sizeof(_ns1__GetLinkResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLinkResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLinkResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLinkResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLinkResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:GetLinkResult", &(a->_ns1__GetLinkResponse::GetLinkResult), "xsd:string"))
				{	soap_flag_GetLinkResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLinkResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLinkResponse, 0, sizeof(_ns1__GetLinkResponse), 0, soap_copy__ns1__GetLinkResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetLinkResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLinkResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetLinkResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLinkResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLinkResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLinkResponse * SOAP_FMAC4 soap_get__ns1__GetLinkResponse(struct soap *soap, _ns1__GetLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLinkResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLinkResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLinkResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetLinkResponse);
		if (size)
			*size = sizeof(_ns1__GetLinkResponse);
		((_ns1__GetLinkResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetLinkResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetLinkResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLinkResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLinkResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLinkResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLinkResponse %p -> %p\n", q, p));
	*(_ns1__GetLinkResponse*)p = *(_ns1__GetLinkResponse*)q;
}

void _ns1__GetLink::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetLink::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__GetLink::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLink(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLink(struct soap *soap, const char *tag, int id, const _ns1__GetLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLink), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLink::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLink(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLink * SOAP_FMAC4 soap_in__ns1__GetLink(struct soap *soap, const char *tag, _ns1__GetLink *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLink *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLink, sizeof(_ns1__GetLink), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLink)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLink *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLink, 0, sizeof(_ns1__GetLink), 0, soap_copy__ns1__GetLink);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetLink::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLink);
	if (this->soap_out(soap, tag?tag:"ns1:GetLink", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLink::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLink(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLink * SOAP_FMAC4 soap_get__ns1__GetLink(struct soap *soap, _ns1__GetLink *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLink * SOAP_FMAC2 soap_instantiate__ns1__GetLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLink, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__GetLink);
		if (size)
			*size = sizeof(_ns1__GetLink);
		((_ns1__GetLink*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__GetLink, n);
		if (size)
			*size = n * sizeof(_ns1__GetLink);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLink*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLink %p -> %p\n", q, p));
	*(_ns1__GetLink*)p = *(_ns1__GetLink*)q;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedShort(soap, tag, id, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__unsignedShort);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedShort", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__unsignedShort);
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedShort, n);
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedLONG64(soap, &this->xsd__unsignedLong::__item);
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedLONG64(soap, tag, id, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedLong)
			return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedLONG64(soap, tag, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong"))
		return NULL;
	return a;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__unsignedLong);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedLong, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__unsignedLong);
		if (size)
			*size = sizeof(xsd__unsignedLong);
		((xsd__unsignedLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedLong, n);
		if (size)
			*size = n * sizeof(xsd__unsignedLong);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__unsignedLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedLong %p -> %p\n", q, p));
	*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__unsignedInt);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__unsignedInt);
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedInt, n);
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__unsignedByte(soap, tag, id, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedByte_)
			return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__unsignedByte(soap, tag, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte"))
		return NULL;
	return a;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__unsignedByte_);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedByte_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__unsignedByte_);
		if (size)
			*size = sizeof(xsd__unsignedByte_);
		((xsd__unsignedByte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedByte_, n);
		if (size)
			*size = n * sizeof(xsd__unsignedByte_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__unsignedByte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedByte_ %p -> %p\n", q, p));
	*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->xsd__string::__item);
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__string, n);
		if (size)
			*size = n * sizeof(xsd__string);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_short(soap, &this->xsd__short::__item);
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_short(soap, tag, id, &(a->xsd__short::__item), "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__short)
			return (xsd__short *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_short(soap, tag, &(a->xsd__short::__item), "xsd:short"))
		return NULL;
	return a;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__short);
	if (this->soap_out(soap, tag?tag:"xsd:short", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__short, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__short);
		if (size)
			*size = sizeof(xsd__short);
		((xsd__short*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__short, n);
		if (size)
			*size = n * sizeof(xsd__short);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__short*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__short*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__short %p -> %p\n", q, p));
	*(xsd__short*)p = *(xsd__short*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_LONG64(soap, &this->xsd__long::__item);
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__long);
	if (this->soap_out(soap, tag?tag:"xsd:long", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__long);
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__long, n);
		if (size)
			*size = n * sizeof(xsd__long);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__long*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int::__item);
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__int::__item, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__int);
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__int, n);
		if (size)
			*size = n * sizeof(xsd__int);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_float(soap, &this->xsd__float::__item);
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__float)
			return (xsd__float *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))
		return NULL;
	return a;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__float);
	if (this->soap_out(soap, tag?tag:"xsd:float", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__float, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__float);
		if (size)
			*size = sizeof(xsd__float);
		((xsd__float*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__float, n);
		if (size)
			*size = n * sizeof(xsd__float);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__float*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__float*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));
	*(xsd__float*)p = *(xsd__float*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__duration_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__duration_);
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__duration_, n);
		if (size)
			*size = n * sizeof(xsd__duration_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__duration, 0, sizeof(std::string), 0, soap_copy_xsd__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"xsd:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_double(soap, &this->xsd__double::__item);
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_double(soap, tag, id, &(a->xsd__double::__item), "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__double)
			return (xsd__double *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_double(soap, tag, &(a->xsd__double::__item), "xsd:double"))
		return NULL;
	return a;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__double);
	if (this->soap_out(soap, tag?tag:"xsd:double", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__double, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__double);
		if (size)
			*size = sizeof(xsd__double);
		((xsd__double*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__double, n);
		if (size)
			*size = n * sizeof(xsd__double);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__double*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__double*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__double %p -> %p\n", q, p));
	*(xsd__double*)p = *(xsd__double*)q;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__decimal(soap, tag, id, &(a->xsd__decimal_::__item), "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(a->xsd__decimal_::__item), "xsd:decimal"))
		return NULL;
	return a;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__decimal_);
	if (this->soap_out(soap, tag?tag:"xsd:decimal", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__decimal_);
		if (size)
			*size = sizeof(xsd__decimal_);
		((xsd__decimal_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__decimal_, n);
		if (size)
			*size = n * sizeof(xsd__decimal_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_time(soap, &this->xsd__dateTime::__item);
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__dateTime);
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__dateTime, n);
		if (size)
			*size = n * sizeof(xsd__dateTime);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__byte(soap, tag, id, &(a->xsd__byte_::__item), "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__byte_)
			return (xsd__byte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__byte(soap, tag, &(a->xsd__byte_::__item), "xsd:byte"))
		return NULL;
	return a;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__byte_);
	if (this->soap_out(soap, tag?tag:"xsd:byte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__byte_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__byte_);
		if (size)
			*size = sizeof(xsd__byte_);
		((xsd__byte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__byte_, n);
		if (size)
			*size = n * sizeof(xsd__byte_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__byte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__byte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__byte_ %p -> %p\n", q, p));
	*(xsd__byte_*)p = *(xsd__byte_*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean::__item);
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__boolean, n);
		if (size)
			*size = n * sizeof(xsd__boolean);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__base64Binary_)
			return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	}
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__base64Binary_);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__base64Binary_);
		if (size)
			*size = sizeof(xsd__base64Binary_);
		((xsd__base64Binary_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__base64Binary_, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary_ %p -> %p\n", q, p));
	*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__anyURI_);
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyURI_, n);
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anyURI, 0, sizeof(std::string), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__QName(soap, &this->xsd__QName_::__item);
}

void xsd__QName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__QName(soap, &this->xsd__QName_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__QName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap *soap, const char *tag, int id, const xsd__QName_ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap *soap, const char *tag, xsd__QName_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName_, sizeof(xsd__QName_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName_)
			return (xsd__QName_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__QName(soap, tag, &(a->xsd__QName_::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__QName_);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap *soap, xsd__QName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__QName_);
		if (size)
			*size = sizeof(xsd__QName_);
		((xsd__QName_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__QName_, n);
		if (size)
			*size = n * sizeof(xsd__QName_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__QName_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__QName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName_ %p -> %p\n", q, p));
	*(xsd__QName_*)p = *(xsd__QName_*)q;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__IDREF(soap, tag, id, &(a->xsd__IDREF_::__item), "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__IDREF_)
			return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__IDREF(soap, tag, &(a->xsd__IDREF_::__item), "xsd:IDREF"))
		return NULL;
	return a;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__IDREF_);
	if (this->soap_out(soap, tag?tag:"xsd:IDREF", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__IDREF_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__IDREF_);
		if (size)
			*size = sizeof(xsd__IDREF_);
		((xsd__IDREF_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__IDREF_, n);
		if (size)
			*size = n * sizeof(xsd__IDREF_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__IDREF_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__IDREF_ %p -> %p\n", q, p));
	*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__IDREF, 0, sizeof(std::string), 0, soap_copy_xsd__IDREF);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__IDREF);
	if (soap_out_xsd__IDREF(soap, tag?tag:"xsd:IDREF", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__ID(soap, tag, id, &(a->xsd__ID_::__item), "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(a->xsd__ID_::__item), "xsd:ID"))
		return NULL;
	return a;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__ID_);
	if (this->soap_out(soap, tag?tag:"xsd:ID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__ID_);
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__ID_, n);
		if (size)
			*size = n * sizeof(xsd__ID_);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__ID, 0, sizeof(std::string), 0, soap_copy_xsd__ID);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__ID);
	if (soap_out_xsd__ID(soap, tag?tag:"xsd:ID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__QName, 0, sizeof(std::string), 0, soap_copy_xsd__QName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_xsd__QName);
	if (soap_out_xsd__QName(soap, tag?tag:"xsd:QName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_xsd__ID_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__ID_);
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__ID_, n);
			if (size)
				*size = n * sizeof(xsd__ID_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:IDREF"))
	{	cp->type = SOAP_TYPE_xsd__IDREF_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__IDREF_);
			if (size)
				*size = sizeof(xsd__IDREF_);
			((xsd__IDREF_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__IDREF_, n);
			if (size)
				*size = n * sizeof(xsd__IDREF_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__IDREF_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__IDREF_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__QName_);
			if (size)
				*size = sizeof(xsd__QName_);
			((xsd__QName_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__QName_, n);
			if (size)
				*size = n * sizeof(xsd__QName_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__QName_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__QName_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__anyURI_);
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyURI_, n);
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:base64Binary"))
	{	cp->type = SOAP_TYPE_xsd__base64Binary_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__base64Binary_);
			if (size)
				*size = sizeof(xsd__base64Binary_);
			((xsd__base64Binary_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__base64Binary_, n);
			if (size)
				*size = n * sizeof(xsd__base64Binary_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__base64Binary_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__boolean);
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__boolean, n);
			if (size)
				*size = n * sizeof(xsd__boolean);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:byte"))
	{	cp->type = SOAP_TYPE_xsd__byte_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__byte_);
			if (size)
				*size = sizeof(xsd__byte_);
			((xsd__byte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__byte_, n);
			if (size)
				*size = n * sizeof(xsd__byte_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__byte_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__byte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__dateTime);
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__dateTime, n);
			if (size)
				*size = n * sizeof(xsd__dateTime);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__decimal_);
			if (size)
				*size = sizeof(xsd__decimal_);
			((xsd__decimal_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__decimal_, n);
			if (size)
				*size = n * sizeof(xsd__decimal_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__decimal_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:double"))
	{	cp->type = SOAP_TYPE_xsd__double;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__double);
			if (size)
				*size = sizeof(xsd__double);
			((xsd__double*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__double, n);
			if (size)
				*size = n * sizeof(xsd__double);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__double*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__double*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_xsd__duration_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__duration_);
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__duration_, n);
			if (size)
				*size = n * sizeof(xsd__duration_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:float"))
	{	cp->type = SOAP_TYPE_xsd__float;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__float);
			if (size)
				*size = sizeof(xsd__float);
			((xsd__float*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__float, n);
			if (size)
				*size = n * sizeof(xsd__float);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__float*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__float*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__int);
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__int, n);
			if (size)
				*size = n * sizeof(xsd__int);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__int*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__long);
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__long, n);
			if (size)
				*size = n * sizeof(xsd__long);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__long*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:short"))
	{	cp->type = SOAP_TYPE_xsd__short;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__short);
			if (size)
				*size = sizeof(xsd__short);
			((xsd__short*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__short, n);
			if (size)
				*size = n * sizeof(xsd__short);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__short*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__short*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__string);
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__string, n);
			if (size)
				*size = n * sizeof(xsd__string);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__string*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
	{	cp->type = SOAP_TYPE_xsd__unsignedByte_;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__unsignedByte_);
			if (size)
				*size = sizeof(xsd__unsignedByte_);
			((xsd__unsignedByte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedByte_, n);
			if (size)
				*size = n * sizeof(xsd__unsignedByte_);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__unsignedByte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__unsignedInt);
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedInt, n);
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
	{	cp->type = SOAP_TYPE_xsd__unsignedLong;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__unsignedLong);
			if (size)
				*size = sizeof(xsd__unsignedLong);
			((xsd__unsignedLong*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedLong, n);
			if (size)
				*size = n * sizeof(xsd__unsignedLong);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__unsignedLong*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(xsd__unsignedShort);
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(xsd__unsignedShort, n);
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:char"))
	{	cp->type = SOAP_TYPE_ns3__char__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns3__char__);
			if (size)
				*size = sizeof(ns3__char__);
			((ns3__char__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns3__char__, n);
			if (size)
				*size = n * sizeof(ns3__char__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns3__char__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__char__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:duration"))
	{	cp->type = SOAP_TYPE_ns3__duration__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns3__duration__);
			if (size)
				*size = sizeof(ns3__duration__);
			((ns3__duration__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns3__duration__, n);
			if (size)
				*size = n * sizeof(ns3__duration__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns3__duration__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__duration__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:guid"))
	{	cp->type = SOAP_TYPE_ns3__guid__;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns3__guid__);
			if (size)
				*size = sizeof(ns3__guid__);
			((ns3__guid__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns3__guid__, n);
			if (size)
				*size = n * sizeof(ns3__guid__);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns3__guid__*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns3__guid__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
			((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfstring"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfstring;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfstring);
			if (size)
				*size = sizeof(ns4__ArrayOfstring);
			((ns4__ArrayOfstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfstring, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfstring);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfstring*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfstring*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfstringint"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringint);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfstringint);
			((ns4__ArrayOfKeyValueOfstringint*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringint, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfstringint);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfstringint*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfstringint*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
			((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfdateTimeint"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfdateTimeint);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfdateTimeint);
			((ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfdateTimeint, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfdateTimeint);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfdateTimeint*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfintstring"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfintstring);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfintstring);
			((ns4__ArrayOfKeyValueOfintstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfintstring, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfintstring);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfintstring*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfintstring*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
			if (size)
				*size = sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
			((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n);
			if (size)
				*size = n * sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns5:ArrayOfPage"))
	{	cp->type = SOAP_TYPE_ns5__ArrayOfPage;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns5__ArrayOfPage);
			if (size)
				*size = sizeof(ns5__ArrayOfPage);
			((ns5__ArrayOfPage*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns5__ArrayOfPage, n);
			if (size)
				*size = n * sizeof(ns5__ArrayOfPage);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns5__ArrayOfPage*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns5__ArrayOfPage*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns5:Page"))
	{	cp->type = SOAP_TYPE_ns5__Page;
		if (n < 0)
		{	cp->ptr = SOAP_NEW(ns5__Page);
			if (size)
				*size = sizeof(ns5__Page);
			((ns5__Page*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = SOAP_NEW_ARRAY(ns5__Page, n);
			if (size)
				*size = n * sizeof(ns5__Page);
			if (cp->ptr)
				for (int i = 0; i < n; i++)
					((ns5__Page*)cp->ptr)[i].soap = soap;
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		if (!cp->ptr)
			soap->error = SOAP_EOM;
		return (ns5__Page*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__anyType, n);
		if (size)
			*size = n * sizeof(xsd__anyType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSearchPhrase(struct soap *soap, struct __ns1__SetSearchPhrase *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetSearchPhrase = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSearchPhrase(struct soap *soap, const struct __ns1__SetSearchPhrase *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SetSearchPhrase(soap, &a->ns1__SetSearchPhrase);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSearchPhrase(struct soap *soap, const char *tag, int id, const struct __ns1__SetSearchPhrase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SetSearchPhrase(soap, "ns1:SetSearchPhrase", -1, &a->ns1__SetSearchPhrase, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSearchPhrase * SOAP_FMAC4 soap_in___ns1__SetSearchPhrase(struct soap *soap, const char *tag, struct __ns1__SetSearchPhrase *a, const char *type)
{
	size_t soap_flag_ns1__SetSearchPhrase = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SetSearchPhrase *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetSearchPhrase, sizeof(struct __ns1__SetSearchPhrase), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetSearchPhrase(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetSearchPhrase && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetSearchPhrase(soap, "ns1:SetSearchPhrase", &a->ns1__SetSearchPhrase, ""))
				{	soap_flag_ns1__SetSearchPhrase--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSearchPhrase(struct soap *soap, const struct __ns1__SetSearchPhrase *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__SetSearchPhrase(soap, tag?tag:"-ns1:SetSearchPhrase", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSearchPhrase * SOAP_FMAC4 soap_get___ns1__SetSearchPhrase(struct soap *soap, struct __ns1__SetSearchPhrase *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetSearchPhrase * SOAP_FMAC2 soap_instantiate___ns1__SetSearchPhrase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetSearchPhrase(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetSearchPhrase, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__SetSearchPhrase);
		if (size)
			*size = sizeof(struct __ns1__SetSearchPhrase);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__SetSearchPhrase, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetSearchPhrase);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetSearchPhrase*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSearchPhrase(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetSearchPhrase %p -> %p\n", q, p));
	*(struct __ns1__SetSearchPhrase*)p = *(struct __ns1__SetSearchPhrase*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetName(struct soap *soap, struct __ns1__SetName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetName(struct soap *soap, const struct __ns1__SetName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SetName(soap, &a->ns1__SetName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetName(struct soap *soap, const char *tag, int id, const struct __ns1__SetName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SetName(soap, "ns1:SetName", -1, &a->ns1__SetName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetName * SOAP_FMAC4 soap_in___ns1__SetName(struct soap *soap, const char *tag, struct __ns1__SetName *a, const char *type)
{
	size_t soap_flag_ns1__SetName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SetName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetName, sizeof(struct __ns1__SetName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetName(soap, "ns1:SetName", &a->ns1__SetName, ""))
				{	soap_flag_ns1__SetName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetName(struct soap *soap, const struct __ns1__SetName *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__SetName(soap, tag?tag:"-ns1:SetName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetName * SOAP_FMAC4 soap_get___ns1__SetName(struct soap *soap, struct __ns1__SetName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetName * SOAP_FMAC2 soap_instantiate___ns1__SetName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__SetName);
		if (size)
			*size = sizeof(struct __ns1__SetName);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__SetName, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetName %p -> %p\n", q, p));
	*(struct __ns1__SetName*)p = *(struct __ns1__SetName*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSite(struct soap *soap, struct __ns1__SetSite *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetSite = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSite(struct soap *soap, const struct __ns1__SetSite *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SetSite(soap, &a->ns1__SetSite);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSite(struct soap *soap, const char *tag, int id, const struct __ns1__SetSite *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SetSite(soap, "ns1:SetSite", -1, &a->ns1__SetSite, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSite * SOAP_FMAC4 soap_in___ns1__SetSite(struct soap *soap, const char *tag, struct __ns1__SetSite *a, const char *type)
{
	size_t soap_flag_ns1__SetSite = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SetSite *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetSite, sizeof(struct __ns1__SetSite), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetSite(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetSite && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetSite(soap, "ns1:SetSite", &a->ns1__SetSite, ""))
				{	soap_flag_ns1__SetSite--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSite(struct soap *soap, const struct __ns1__SetSite *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__SetSite(soap, tag?tag:"-ns1:SetSite", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSite * SOAP_FMAC4 soap_get___ns1__SetSite(struct soap *soap, struct __ns1__SetSite *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetSite * SOAP_FMAC2 soap_instantiate___ns1__SetSite(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetSite(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetSite, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__SetSite);
		if (size)
			*size = sizeof(struct __ns1__SetSite);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__SetSite, n);
		if (size)
			*size = n * sizeof(struct __ns1__SetSite);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SetSite*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSite(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetSite %p -> %p\n", q, p));
	*(struct __ns1__SetSite*)p = *(struct __ns1__SetSite*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSearchPhrases(struct soap *soap, struct __ns1__GetSearchPhrases *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSearchPhrases = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSearchPhrases(struct soap *soap, const struct __ns1__GetSearchPhrases *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSearchPhrases(soap, &a->ns1__GetSearchPhrases);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSearchPhrases(struct soap *soap, const char *tag, int id, const struct __ns1__GetSearchPhrases *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSearchPhrases(soap, "ns1:GetSearchPhrases", -1, &a->ns1__GetSearchPhrases, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchPhrases * SOAP_FMAC4 soap_in___ns1__GetSearchPhrases(struct soap *soap, const char *tag, struct __ns1__GetSearchPhrases *a, const char *type)
{
	size_t soap_flag_ns1__GetSearchPhrases = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSearchPhrases *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSearchPhrases, sizeof(struct __ns1__GetSearchPhrases), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSearchPhrases(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSearchPhrases && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSearchPhrases(soap, "ns1:GetSearchPhrases", &a->ns1__GetSearchPhrases, ""))
				{	soap_flag_ns1__GetSearchPhrases--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSearchPhrases(struct soap *soap, const struct __ns1__GetSearchPhrases *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetSearchPhrases(soap, tag?tag:"-ns1:GetSearchPhrases", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSearchPhrases * SOAP_FMAC4 soap_get___ns1__GetSearchPhrases(struct soap *soap, struct __ns1__GetSearchPhrases *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSearchPhrases * SOAP_FMAC2 soap_instantiate___ns1__GetSearchPhrases(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSearchPhrases(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSearchPhrases, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetSearchPhrases);
		if (size)
			*size = sizeof(struct __ns1__GetSearchPhrases);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetSearchPhrases, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSearchPhrases);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSearchPhrases*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSearchPhrases(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSearchPhrases %p -> %p\n", q, p));
	*(struct __ns1__GetSearchPhrases*)p = *(struct __ns1__GetSearchPhrases*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPages(struct soap *soap, struct __ns1__GetPages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetPages = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPages(struct soap *soap, const struct __ns1__GetPages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetPages(soap, &a->ns1__GetPages);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPages(struct soap *soap, const char *tag, int id, const struct __ns1__GetPages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetPages(soap, "ns1:GetPages", -1, &a->ns1__GetPages, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetPages * SOAP_FMAC4 soap_in___ns1__GetPages(struct soap *soap, const char *tag, struct __ns1__GetPages *a, const char *type)
{
	size_t soap_flag_ns1__GetPages = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetPages *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetPages, sizeof(struct __ns1__GetPages), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetPages(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetPages && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetPages(soap, "ns1:GetPages", &a->ns1__GetPages, ""))
				{	soap_flag_ns1__GetPages--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPages(struct soap *soap, const struct __ns1__GetPages *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetPages(soap, tag?tag:"-ns1:GetPages", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetPages * SOAP_FMAC4 soap_get___ns1__GetPages(struct soap *soap, struct __ns1__GetPages *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetPages * SOAP_FMAC2 soap_instantiate___ns1__GetPages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetPages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetPages, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetPages);
		if (size)
			*size = sizeof(struct __ns1__GetPages);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetPages, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetPages);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetPages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetPages %p -> %p\n", q, p));
	*(struct __ns1__GetPages*)p = *(struct __ns1__GetPages*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSites(struct soap *soap, struct __ns1__GetSites *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSites = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSites(struct soap *soap, const struct __ns1__GetSites *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetSites(soap, &a->ns1__GetSites);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSites(struct soap *soap, const char *tag, int id, const struct __ns1__GetSites *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetSites(soap, "ns1:GetSites", -1, &a->ns1__GetSites, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSites * SOAP_FMAC4 soap_in___ns1__GetSites(struct soap *soap, const char *tag, struct __ns1__GetSites *a, const char *type)
{
	size_t soap_flag_ns1__GetSites = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetSites *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetSites, sizeof(struct __ns1__GetSites), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetSites(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSites && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSites(soap, "ns1:GetSites", &a->ns1__GetSites, ""))
				{	soap_flag_ns1__GetSites--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSites(struct soap *soap, const struct __ns1__GetSites *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetSites(soap, tag?tag:"-ns1:GetSites", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetSites * SOAP_FMAC4 soap_get___ns1__GetSites(struct soap *soap, struct __ns1__GetSites *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetSites * SOAP_FMAC2 soap_instantiate___ns1__GetSites(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetSites(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetSites, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetSites);
		if (size)
			*size = sizeof(struct __ns1__GetSites);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetSites, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetSites);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetSites*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSites(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetSites %p -> %p\n", q, p));
	*(struct __ns1__GetSites*)p = *(struct __ns1__GetSites*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetNames(struct soap *soap, struct __ns1__GetNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetNames(struct soap *soap, const struct __ns1__GetNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetNames(soap, &a->ns1__GetNames);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetNames(struct soap *soap, const char *tag, int id, const struct __ns1__GetNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetNames(soap, "ns1:GetNames", -1, &a->ns1__GetNames, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetNames * SOAP_FMAC4 soap_in___ns1__GetNames(struct soap *soap, const char *tag, struct __ns1__GetNames *a, const char *type)
{
	size_t soap_flag_ns1__GetNames = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetNames *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetNames, sizeof(struct __ns1__GetNames), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetNames(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetNames && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetNames(soap, "ns1:GetNames", &a->ns1__GetNames, ""))
				{	soap_flag_ns1__GetNames--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetNames(struct soap *soap, const struct __ns1__GetNames *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetNames(soap, tag?tag:"-ns1:GetNames", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetNames * SOAP_FMAC4 soap_get___ns1__GetNames(struct soap *soap, struct __ns1__GetNames *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetNames * SOAP_FMAC2 soap_instantiate___ns1__GetNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetNames, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetNames);
		if (size)
			*size = sizeof(struct __ns1__GetNames);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetNames, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetNames);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetNames %p -> %p\n", q, p));
	*(struct __ns1__GetNames*)p = *(struct __ns1__GetNames*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStatsByName(struct soap *soap, struct __ns1__GetStatsByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStatsByName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStatsByName(struct soap *soap, const struct __ns1__GetStatsByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetStatsByName(soap, &a->ns1__GetStatsByName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStatsByName(struct soap *soap, const char *tag, int id, const struct __ns1__GetStatsByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetStatsByName(soap, "ns1:GetStatsByName", -1, &a->ns1__GetStatsByName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetStatsByName * SOAP_FMAC4 soap_in___ns1__GetStatsByName(struct soap *soap, const char *tag, struct __ns1__GetStatsByName *a, const char *type)
{
	size_t soap_flag_ns1__GetStatsByName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetStatsByName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetStatsByName, sizeof(struct __ns1__GetStatsByName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetStatsByName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStatsByName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStatsByName(soap, "ns1:GetStatsByName", &a->ns1__GetStatsByName, ""))
				{	soap_flag_ns1__GetStatsByName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStatsByName(struct soap *soap, const struct __ns1__GetStatsByName *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetStatsByName(soap, tag?tag:"-ns1:GetStatsByName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetStatsByName * SOAP_FMAC4 soap_get___ns1__GetStatsByName(struct soap *soap, struct __ns1__GetStatsByName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetStatsByName * SOAP_FMAC2 soap_instantiate___ns1__GetStatsByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetStatsByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetStatsByName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetStatsByName);
		if (size)
			*size = sizeof(struct __ns1__GetStatsByName);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetStatsByName, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetStatsByName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetStatsByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetStatsByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetStatsByName %p -> %p\n", q, p));
	*(struct __ns1__GetStatsByName*)p = *(struct __ns1__GetStatsByName*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDailyStats(struct soap *soap, struct __ns1__GetDailyStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetDailyStats = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDailyStats(struct soap *soap, const struct __ns1__GetDailyStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetDailyStats(soap, &a->ns1__GetDailyStats);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDailyStats(struct soap *soap, const char *tag, int id, const struct __ns1__GetDailyStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetDailyStats(soap, "ns1:GetDailyStats", -1, &a->ns1__GetDailyStats, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDailyStats * SOAP_FMAC4 soap_in___ns1__GetDailyStats(struct soap *soap, const char *tag, struct __ns1__GetDailyStats *a, const char *type)
{
	size_t soap_flag_ns1__GetDailyStats = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetDailyStats *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetDailyStats, sizeof(struct __ns1__GetDailyStats), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetDailyStats(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetDailyStats && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetDailyStats(soap, "ns1:GetDailyStats", &a->ns1__GetDailyStats, ""))
				{	soap_flag_ns1__GetDailyStats--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDailyStats(struct soap *soap, const struct __ns1__GetDailyStats *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetDailyStats(soap, tag?tag:"-ns1:GetDailyStats", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetDailyStats * SOAP_FMAC4 soap_get___ns1__GetDailyStats(struct soap *soap, struct __ns1__GetDailyStats *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetDailyStats * SOAP_FMAC2 soap_instantiate___ns1__GetDailyStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetDailyStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetDailyStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetDailyStats);
		if (size)
			*size = sizeof(struct __ns1__GetDailyStats);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetDailyStats, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetDailyStats);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetDailyStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetDailyStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetDailyStats %p -> %p\n", q, p));
	*(struct __ns1__GetDailyStats*)p = *(struct __ns1__GetDailyStats*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStats(struct soap *soap, struct __ns1__GetStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStats = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStats(struct soap *soap, const struct __ns1__GetStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetStats(soap, &a->ns1__GetStats);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStats(struct soap *soap, const char *tag, int id, const struct __ns1__GetStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetStats(soap, "ns1:GetStats", -1, &a->ns1__GetStats, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetStats * SOAP_FMAC4 soap_in___ns1__GetStats(struct soap *soap, const char *tag, struct __ns1__GetStats *a, const char *type)
{
	size_t soap_flag_ns1__GetStats = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetStats *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetStats, sizeof(struct __ns1__GetStats), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetStats(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStats && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStats(soap, "ns1:GetStats", &a->ns1__GetStats, ""))
				{	soap_flag_ns1__GetStats--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStats(struct soap *soap, const struct __ns1__GetStats *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetStats(soap, tag?tag:"-ns1:GetStats", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetStats * SOAP_FMAC4 soap_get___ns1__GetStats(struct soap *soap, struct __ns1__GetStats *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetStats * SOAP_FMAC2 soap_instantiate___ns1__GetStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetStats);
		if (size)
			*size = sizeof(struct __ns1__GetStats);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetStats, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetStats);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetStats %p -> %p\n", q, p));
	*(struct __ns1__GetStats*)p = *(struct __ns1__GetStats*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SendAmountDictionary(struct soap *soap, struct __ns1__SendAmountDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendAmountDictionary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SendAmountDictionary(struct soap *soap, const struct __ns1__SendAmountDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SendAmountDictionary(soap, &a->ns1__SendAmountDictionary);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SendAmountDictionary(struct soap *soap, const char *tag, int id, const struct __ns1__SendAmountDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SendAmountDictionary(soap, "ns1:SendAmountDictionary", -1, &a->ns1__SendAmountDictionary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SendAmountDictionary * SOAP_FMAC4 soap_in___ns1__SendAmountDictionary(struct soap *soap, const char *tag, struct __ns1__SendAmountDictionary *a, const char *type)
{
	size_t soap_flag_ns1__SendAmountDictionary = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SendAmountDictionary *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SendAmountDictionary, sizeof(struct __ns1__SendAmountDictionary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SendAmountDictionary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendAmountDictionary && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendAmountDictionary(soap, "ns1:SendAmountDictionary", &a->ns1__SendAmountDictionary, ""))
				{	soap_flag_ns1__SendAmountDictionary--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SendAmountDictionary(struct soap *soap, const struct __ns1__SendAmountDictionary *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__SendAmountDictionary(soap, tag?tag:"-ns1:SendAmountDictionary", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SendAmountDictionary * SOAP_FMAC4 soap_get___ns1__SendAmountDictionary(struct soap *soap, struct __ns1__SendAmountDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SendAmountDictionary * SOAP_FMAC2 soap_instantiate___ns1__SendAmountDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SendAmountDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SendAmountDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__SendAmountDictionary);
		if (size)
			*size = sizeof(struct __ns1__SendAmountDictionary);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__SendAmountDictionary, n);
		if (size)
			*size = n * sizeof(struct __ns1__SendAmountDictionary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SendAmountDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SendAmountDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SendAmountDictionary %p -> %p\n", q, p));
	*(struct __ns1__SendAmountDictionary*)p = *(struct __ns1__SendAmountDictionary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SendLinks(struct soap *soap, struct __ns1__SendLinks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SendLinks = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SendLinks(struct soap *soap, const struct __ns1__SendLinks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__SendLinks(soap, &a->ns1__SendLinks);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SendLinks(struct soap *soap, const char *tag, int id, const struct __ns1__SendLinks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__SendLinks(soap, "ns1:SendLinks", -1, &a->ns1__SendLinks, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SendLinks * SOAP_FMAC4 soap_in___ns1__SendLinks(struct soap *soap, const char *tag, struct __ns1__SendLinks *a, const char *type)
{
	size_t soap_flag_ns1__SendLinks = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__SendLinks *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SendLinks, sizeof(struct __ns1__SendLinks), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SendLinks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SendLinks && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SendLinks(soap, "ns1:SendLinks", &a->ns1__SendLinks, ""))
				{	soap_flag_ns1__SendLinks--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SendLinks(struct soap *soap, const struct __ns1__SendLinks *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__SendLinks(soap, tag?tag:"-ns1:SendLinks", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SendLinks * SOAP_FMAC4 soap_get___ns1__SendLinks(struct soap *soap, struct __ns1__SendLinks *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SendLinks * SOAP_FMAC2 soap_instantiate___ns1__SendLinks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SendLinks(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SendLinks, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__SendLinks);
		if (size)
			*size = sizeof(struct __ns1__SendLinks);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__SendLinks, n);
		if (size)
			*size = n * sizeof(struct __ns1__SendLinks);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__SendLinks*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SendLinks(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SendLinks %p -> %p\n", q, p));
	*(struct __ns1__SendLinks*)p = *(struct __ns1__SendLinks*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetNamesDictionary(struct soap *soap, struct __ns1__GetNamesDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetNamesDictionary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetNamesDictionary(struct soap *soap, const struct __ns1__GetNamesDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetNamesDictionary(soap, &a->ns1__GetNamesDictionary);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetNamesDictionary(struct soap *soap, const char *tag, int id, const struct __ns1__GetNamesDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetNamesDictionary(soap, "ns1:GetNamesDictionary", -1, &a->ns1__GetNamesDictionary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetNamesDictionary * SOAP_FMAC4 soap_in___ns1__GetNamesDictionary(struct soap *soap, const char *tag, struct __ns1__GetNamesDictionary *a, const char *type)
{
	size_t soap_flag_ns1__GetNamesDictionary = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetNamesDictionary *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetNamesDictionary, sizeof(struct __ns1__GetNamesDictionary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetNamesDictionary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetNamesDictionary && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetNamesDictionary(soap, "ns1:GetNamesDictionary", &a->ns1__GetNamesDictionary, ""))
				{	soap_flag_ns1__GetNamesDictionary--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetNamesDictionary(struct soap *soap, const struct __ns1__GetNamesDictionary *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetNamesDictionary(soap, tag?tag:"-ns1:GetNamesDictionary", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetNamesDictionary * SOAP_FMAC4 soap_get___ns1__GetNamesDictionary(struct soap *soap, struct __ns1__GetNamesDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetNamesDictionary * SOAP_FMAC2 soap_instantiate___ns1__GetNamesDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetNamesDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetNamesDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetNamesDictionary);
		if (size)
			*size = sizeof(struct __ns1__GetNamesDictionary);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetNamesDictionary, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetNamesDictionary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetNamesDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetNamesDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetNamesDictionary %p -> %p\n", q, p));
	*(struct __ns1__GetNamesDictionary*)p = *(struct __ns1__GetNamesDictionary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLink(struct soap *soap, struct __ns1__GetLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLink = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLink(struct soap *soap, const struct __ns1__GetLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLink(soap, &a->ns1__GetLink);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLink(struct soap *soap, const char *tag, int id, const struct __ns1__GetLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLink(soap, "ns1:GetLink", -1, &a->ns1__GetLink, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLink * SOAP_FMAC4 soap_in___ns1__GetLink(struct soap *soap, const char *tag, struct __ns1__GetLink *a, const char *type)
{
	size_t soap_flag_ns1__GetLink = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLink *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLink, sizeof(struct __ns1__GetLink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLink(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLink && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLink(soap, "ns1:GetLink", &a->ns1__GetLink, ""))
				{	soap_flag_ns1__GetLink--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLink(struct soap *soap, const struct __ns1__GetLink *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__GetLink(soap, tag?tag:"-ns1:GetLink", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLink * SOAP_FMAC4 soap_get___ns1__GetLink(struct soap *soap, struct __ns1__GetLink *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLink * SOAP_FMAC2 soap_instantiate___ns1__GetLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLink, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__GetLink);
		if (size)
			*size = sizeof(struct __ns1__GetLink);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__GetLink, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLink);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLink %p -> %p\n", q, p));
	*(struct __ns1__GetLink*)p = *(struct __ns1__GetLink*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSearchPhrase(struct soap *soap, _ns1__SetSearchPhrase *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSearchPhrase))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSearchPhrase(struct soap *soap, const char *tag, int id, _ns1__SetSearchPhrase *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSearchPhrase);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSearchPhrase ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSearchPhrase(struct soap *soap, const char *tag, _ns1__SetSearchPhrase **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSearchPhrase **)soap_malloc(soap, sizeof(_ns1__SetSearchPhrase *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSearchPhrase *)soap_instantiate__ns1__SetSearchPhrase(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSearchPhrase ** p = (_ns1__SetSearchPhrase **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSearchPhrase, sizeof(_ns1__SetSearchPhrase), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSearchPhrase(struct soap *soap, _ns1__SetSearchPhrase *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SetSearchPhrase);
	if (soap_out_PointerTo_ns1__SetSearchPhrase(soap, tag?tag:"ns1:SetSearchPhrase", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSearchPhrase ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSearchPhrase(struct soap *soap, _ns1__SetSearchPhrase **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetName(struct soap *soap, _ns1__SetName *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetName(struct soap *soap, const char *tag, int id, _ns1__SetName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetName ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetName(struct soap *soap, const char *tag, _ns1__SetName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetName **)soap_malloc(soap, sizeof(_ns1__SetName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetName *)soap_instantiate__ns1__SetName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetName ** p = (_ns1__SetName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetName, sizeof(_ns1__SetName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetName(struct soap *soap, _ns1__SetName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SetName);
	if (soap_out_PointerTo_ns1__SetName(soap, tag?tag:"ns1:SetName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetName ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetName(struct soap *soap, _ns1__SetName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSite(struct soap *soap, _ns1__SetSite *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSite))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSite(struct soap *soap, const char *tag, int id, _ns1__SetSite *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSite);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSite ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSite(struct soap *soap, const char *tag, _ns1__SetSite **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSite **)soap_malloc(soap, sizeof(_ns1__SetSite *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSite *)soap_instantiate__ns1__SetSite(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSite ** p = (_ns1__SetSite **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSite, sizeof(_ns1__SetSite), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSite(struct soap *soap, _ns1__SetSite *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SetSite);
	if (soap_out_PointerTo_ns1__SetSite(soap, tag?tag:"ns1:SetSite", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSite ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSite(struct soap *soap, _ns1__SetSite **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSearchPhrases(struct soap *soap, _ns1__GetSearchPhrases *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSearchPhrases))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSearchPhrases(struct soap *soap, const char *tag, int id, _ns1__GetSearchPhrases *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSearchPhrases);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSearchPhrases ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSearchPhrases(struct soap *soap, const char *tag, _ns1__GetSearchPhrases **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSearchPhrases **)soap_malloc(soap, sizeof(_ns1__GetSearchPhrases *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSearchPhrases *)soap_instantiate__ns1__GetSearchPhrases(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSearchPhrases ** p = (_ns1__GetSearchPhrases **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSearchPhrases, sizeof(_ns1__GetSearchPhrases), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSearchPhrases(struct soap *soap, _ns1__GetSearchPhrases *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetSearchPhrases);
	if (soap_out_PointerTo_ns1__GetSearchPhrases(soap, tag?tag:"ns1:GetSearchPhrases", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSearchPhrases ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSearchPhrases(struct soap *soap, _ns1__GetSearchPhrases **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPages(struct soap *soap, _ns1__GetPages *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetPages))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPages(struct soap *soap, const char *tag, int id, _ns1__GetPages *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetPages);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetPages ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPages(struct soap *soap, const char *tag, _ns1__GetPages **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetPages **)soap_malloc(soap, sizeof(_ns1__GetPages *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetPages *)soap_instantiate__ns1__GetPages(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetPages ** p = (_ns1__GetPages **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetPages, sizeof(_ns1__GetPages), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPages(struct soap *soap, _ns1__GetPages *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetPages);
	if (soap_out_PointerTo_ns1__GetPages(soap, tag?tag:"ns1:GetPages", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetPages ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPages(struct soap *soap, _ns1__GetPages **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSites(struct soap *soap, _ns1__GetSites *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSites))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSites(struct soap *soap, const char *tag, int id, _ns1__GetSites *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSites);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSites ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSites(struct soap *soap, const char *tag, _ns1__GetSites **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSites **)soap_malloc(soap, sizeof(_ns1__GetSites *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSites *)soap_instantiate__ns1__GetSites(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSites ** p = (_ns1__GetSites **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSites, sizeof(_ns1__GetSites), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSites(struct soap *soap, _ns1__GetSites *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetSites);
	if (soap_out_PointerTo_ns1__GetSites(soap, tag?tag:"ns1:GetSites", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSites ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSites(struct soap *soap, _ns1__GetSites **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetNames(struct soap *soap, _ns1__GetNames *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetNames))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetNames(struct soap *soap, const char *tag, int id, _ns1__GetNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetNames);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetNames ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetNames(struct soap *soap, const char *tag, _ns1__GetNames **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetNames **)soap_malloc(soap, sizeof(_ns1__GetNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetNames *)soap_instantiate__ns1__GetNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetNames ** p = (_ns1__GetNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetNames, sizeof(_ns1__GetNames), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetNames(struct soap *soap, _ns1__GetNames *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetNames);
	if (soap_out_PointerTo_ns1__GetNames(soap, tag?tag:"ns1:GetNames", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetNames ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetNames(struct soap *soap, _ns1__GetNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStatsByName(struct soap *soap, _ns1__GetStatsByName *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStatsByName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStatsByName(struct soap *soap, const char *tag, int id, _ns1__GetStatsByName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStatsByName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStatsByName ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStatsByName(struct soap *soap, const char *tag, _ns1__GetStatsByName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStatsByName **)soap_malloc(soap, sizeof(_ns1__GetStatsByName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStatsByName *)soap_instantiate__ns1__GetStatsByName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStatsByName ** p = (_ns1__GetStatsByName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStatsByName, sizeof(_ns1__GetStatsByName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStatsByName(struct soap *soap, _ns1__GetStatsByName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetStatsByName);
	if (soap_out_PointerTo_ns1__GetStatsByName(soap, tag?tag:"ns1:GetStatsByName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStatsByName ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStatsByName(struct soap *soap, _ns1__GetStatsByName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetDailyStats(struct soap *soap, _ns1__GetDailyStats *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetDailyStats))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetDailyStats(struct soap *soap, const char *tag, int id, _ns1__GetDailyStats *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetDailyStats);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetDailyStats ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetDailyStats(struct soap *soap, const char *tag, _ns1__GetDailyStats **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetDailyStats **)soap_malloc(soap, sizeof(_ns1__GetDailyStats *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetDailyStats *)soap_instantiate__ns1__GetDailyStats(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetDailyStats ** p = (_ns1__GetDailyStats **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetDailyStats, sizeof(_ns1__GetDailyStats), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetDailyStats(struct soap *soap, _ns1__GetDailyStats *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetDailyStats);
	if (soap_out_PointerTo_ns1__GetDailyStats(soap, tag?tag:"ns1:GetDailyStats", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetDailyStats ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetDailyStats(struct soap *soap, _ns1__GetDailyStats **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStats(struct soap *soap, _ns1__GetStats *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStats))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStats(struct soap *soap, const char *tag, int id, _ns1__GetStats *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStats);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStats ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStats(struct soap *soap, const char *tag, _ns1__GetStats **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStats **)soap_malloc(soap, sizeof(_ns1__GetStats *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStats *)soap_instantiate__ns1__GetStats(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStats ** p = (_ns1__GetStats **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStats, sizeof(_ns1__GetStats), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStats(struct soap *soap, _ns1__GetStats *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetStats);
	if (soap_out_PointerTo_ns1__GetStats(soap, tag?tag:"ns1:GetStats", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetStats ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStats(struct soap *soap, _ns1__GetStats **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendAmountDictionary(struct soap *soap, _ns1__SendAmountDictionary *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendAmountDictionary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendAmountDictionary(struct soap *soap, const char *tag, int id, _ns1__SendAmountDictionary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendAmountDictionary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendAmountDictionary ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendAmountDictionary(struct soap *soap, const char *tag, _ns1__SendAmountDictionary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendAmountDictionary **)soap_malloc(soap, sizeof(_ns1__SendAmountDictionary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendAmountDictionary *)soap_instantiate__ns1__SendAmountDictionary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendAmountDictionary ** p = (_ns1__SendAmountDictionary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendAmountDictionary, sizeof(_ns1__SendAmountDictionary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendAmountDictionary(struct soap *soap, _ns1__SendAmountDictionary *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SendAmountDictionary);
	if (soap_out_PointerTo_ns1__SendAmountDictionary(soap, tag?tag:"ns1:SendAmountDictionary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SendAmountDictionary ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendAmountDictionary(struct soap *soap, _ns1__SendAmountDictionary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendLinks(struct soap *soap, _ns1__SendLinks *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SendLinks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendLinks(struct soap *soap, const char *tag, int id, _ns1__SendLinks *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SendLinks);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SendLinks ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendLinks(struct soap *soap, const char *tag, _ns1__SendLinks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SendLinks **)soap_malloc(soap, sizeof(_ns1__SendLinks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SendLinks *)soap_instantiate__ns1__SendLinks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SendLinks ** p = (_ns1__SendLinks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SendLinks, sizeof(_ns1__SendLinks), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendLinks(struct soap *soap, _ns1__SendLinks *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__SendLinks);
	if (soap_out_PointerTo_ns1__SendLinks(soap, tag?tag:"ns1:SendLinks", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SendLinks ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendLinks(struct soap *soap, _ns1__SendLinks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetNamesDictionary(struct soap *soap, _ns1__GetNamesDictionary *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetNamesDictionary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetNamesDictionary(struct soap *soap, const char *tag, int id, _ns1__GetNamesDictionary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetNamesDictionary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetNamesDictionary ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetNamesDictionary(struct soap *soap, const char *tag, _ns1__GetNamesDictionary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetNamesDictionary **)soap_malloc(soap, sizeof(_ns1__GetNamesDictionary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetNamesDictionary *)soap_instantiate__ns1__GetNamesDictionary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetNamesDictionary ** p = (_ns1__GetNamesDictionary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetNamesDictionary, sizeof(_ns1__GetNamesDictionary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetNamesDictionary(struct soap *soap, _ns1__GetNamesDictionary *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetNamesDictionary);
	if (soap_out_PointerTo_ns1__GetNamesDictionary(soap, tag?tag:"ns1:GetNamesDictionary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetNamesDictionary ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetNamesDictionary(struct soap *soap, _ns1__GetNamesDictionary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLink(struct soap *soap, _ns1__GetLink *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLink))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLink(struct soap *soap, const char *tag, int id, _ns1__GetLink *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLink);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLink ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLink(struct soap *soap, const char *tag, _ns1__GetLink **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLink **)soap_malloc(soap, sizeof(_ns1__GetLink *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLink *)soap_instantiate__ns1__GetLink(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLink ** p = (_ns1__GetLink **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLink, sizeof(_ns1__GetLink), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLink(struct soap *soap, _ns1__GetLink *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLink);
	if (soap_out_PointerTo_ns1__GetLink(soap, tag?tag:"ns1:GetLink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLink ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLink(struct soap *soap, _ns1__GetLink **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Page(struct soap *soap, ns5__Page *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__Page))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Page(struct soap *soap, const char *tag, int id, ns5__Page *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__Page);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__Page ** SOAP_FMAC4 soap_in_PointerTons5__Page(struct soap *soap, const char *tag, ns5__Page **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__Page **)soap_malloc(soap, sizeof(ns5__Page *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__Page *)soap_instantiate_ns5__Page(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__Page ** p = (ns5__Page **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__Page, sizeof(ns5__Page), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Page(struct soap *soap, ns5__Page *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons5__Page);
	if (soap_out_PointerTons5__Page(soap, tag?tag:"ns5:Page", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__Page ** SOAP_FMAC4 soap_get_PointerTons5__Page(struct soap *soap, ns5__Page **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__Page(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1))
		soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >**)soap_malloc(soap, sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	if (soap_out_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** p = (ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfPage(struct soap *soap, ns5__ArrayOfPage *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfPage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfPage(struct soap *soap, const char *tag, int id, ns5__ArrayOfPage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfPage);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfPage ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfPage(struct soap *soap, const char *tag, ns5__ArrayOfPage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfPage **)soap_malloc(soap, sizeof(ns5__ArrayOfPage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfPage *)soap_instantiate_ns5__ArrayOfPage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfPage ** p = (ns5__ArrayOfPage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfPage, sizeof(ns5__ArrayOfPage), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfPage(struct soap *soap, ns5__ArrayOfPage *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons5__ArrayOfPage);
	if (soap_out_PointerTons5__ArrayOfPage(soap, tag?tag:"ns5:ArrayOfPage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfPage ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfPage(struct soap *soap, ns5__ArrayOfPage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfPage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfintstring(struct soap *soap, ns4__ArrayOfKeyValueOfintstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfintstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfintstring ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfintstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfintstring **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfintstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfintstring *)soap_instantiate_ns4__ArrayOfKeyValueOfintstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfintstring ** p = (ns4__ArrayOfKeyValueOfintstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfintstring, sizeof(ns4__ArrayOfKeyValueOfintstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfintstring(struct soap *soap, ns4__ArrayOfKeyValueOfintstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfintstring);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfintstring(soap, tag?tag:"ns4:ArrayOfKeyValueOfintstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfintstring ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfintstring(struct soap *soap, ns4__ArrayOfKeyValueOfintstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfdateTimeint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeint ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfdateTimeint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfdateTimeint **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfdateTimeint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfdateTimeint *)soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfdateTimeint ** p = (ns4__ArrayOfKeyValueOfdateTimeint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeint, sizeof(ns4__ArrayOfKeyValueOfdateTimeint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeint);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeint ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfdateTimeint(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_instantiate_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** p = (ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag?tag:"ns4:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfstringint(struct soap *soap, ns4__ArrayOfKeyValueOfstringint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfstringint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringint ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfstringint **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfstringint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfstringint *)soap_instantiate_ns4__ArrayOfKeyValueOfstringint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfstringint ** p = (ns4__ArrayOfKeyValueOfstringint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringint, sizeof(ns4__ArrayOfKeyValueOfstringint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfstringint(struct soap *soap, ns4__ArrayOfKeyValueOfstringint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringint);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringint(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringint ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfstringint(struct soap *soap, ns4__ArrayOfKeyValueOfstringint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfstring(struct soap *soap, ns4__ArrayOfstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfstring(struct soap *soap, const char *tag, int id, ns4__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfstring(struct soap *soap, const char *tag, ns4__ArrayOfstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfstring **)soap_malloc(soap, sizeof(ns4__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfstring *)soap_instantiate_ns4__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfstring ** p = (ns4__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfstring, sizeof(ns4__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfstring(struct soap *soap, ns4__ArrayOfstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfstring);
	if (soap_out_PointerTons4__ArrayOfstring(soap, tag?tag:"ns4:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfstring(struct soap *soap, ns4__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **)soap_malloc(soap, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_instantiate_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** p = (ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, sizeof(ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (soap_out_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag?tag:"ns4:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, std::vector<ns5__Page * >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, const std::vector<ns5__Page * >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns5__Page * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons5__Page(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, const char *tag, int id, const std::vector<ns5__Page * >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns5__Page * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons5__Page(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns5__Page * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, const char *tag, std::vector<ns5__Page * >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		ns5__Page *n;
		n = NULL;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons5__Page(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns5__Page, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Page, sizeof(ns5__Page), 1))
				break;
			if (!soap_in_PointerTons5__Page(soap, tag, NULL, "ns5:Page"))
				break;
		}
		else if (!soap_in_PointerTons5__Page(soap, tag, &n, "ns5:Page"))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns5__Page * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons5__Page(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons5__Page, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<ns5__Page * >);
		if (size)
			*size = sizeof(std::vector<ns5__Page * >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<ns5__Page * >, n);
		if (size)
			*size = n * sizeof(std::vector<ns5__Page * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns5__Page * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Page(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns5__Page * > %p -> %p\n", q, p));
	*(std::vector<ns5__Page * >*)p = *(std::vector<ns5__Page * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, sizeof(_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfintstring_KeyValueOfintstring >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, sizeof(_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, sizeof(_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfstringint_KeyValueOfstringint >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		std::string n;
		soap_default_std__string(soap, &n);
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, const std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, sizeof(_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), 0))
				break;
			if (!soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, &n, ""))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >);
		if (size)
			*size = sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 > %p -> %p\n", q, p));
	*(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*)p = *(std::vector<_ns4__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
