/* soapC.cpp
   Generated by gSOAP 2.8.22 from wssoap.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.22 2015-04-24 13:39:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns1__Page:
		return soap_in_ns1__Page(soap, NULL, NULL, "ns1:Page");
	case SOAP_TYPE_ns1__ArrayOfPage:
		return soap_in_ns1__ArrayOfPage(soap, NULL, NULL, "ns1:ArrayOfPage");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_in_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfintstring:
		return soap_in_arr__ArrayOfKeyValueOfintstring(soap, NULL, NULL, "arr:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint:
		return soap_in_arr__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_in_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringint:
		return soap_in_arr__ArrayOfKeyValueOfstringint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_arr__ArrayOfstring:
		return soap_in_arr__ArrayOfstring(soap, NULL, NULL, "arr:ArrayOfstring");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_in_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_PointerTo_tempuri__SetSearchPhrase:
		return soap_in_PointerTo_tempuri__SetSearchPhrase(soap, NULL, NULL, "tempuri:SetSearchPhrase");
	case SOAP_TYPE_PointerTo_tempuri__SetName:
		return soap_in_PointerTo_tempuri__SetName(soap, NULL, NULL, "tempuri:SetName");
	case SOAP_TYPE_PointerTo_tempuri__SetSite:
		return soap_in_PointerTo_tempuri__SetSite(soap, NULL, NULL, "tempuri:SetSite");
	case SOAP_TYPE_PointerTo_tempuri__GetSearchPhrases:
		return soap_in_PointerTo_tempuri__GetSearchPhrases(soap, NULL, NULL, "tempuri:GetSearchPhrases");
	case SOAP_TYPE_PointerTo_tempuri__GetPages:
		return soap_in_PointerTo_tempuri__GetPages(soap, NULL, NULL, "tempuri:GetPages");
	case SOAP_TYPE_PointerTo_tempuri__GetSites:
		return soap_in_PointerTo_tempuri__GetSites(soap, NULL, NULL, "tempuri:GetSites");
	case SOAP_TYPE_PointerTo_tempuri__GetNames:
		return soap_in_PointerTo_tempuri__GetNames(soap, NULL, NULL, "tempuri:GetNames");
	case SOAP_TYPE_PointerTo_tempuri__GetStatsByName:
		return soap_in_PointerTo_tempuri__GetStatsByName(soap, NULL, NULL, "tempuri:GetStatsByName");
	case SOAP_TYPE_PointerTo_tempuri__GetDailyStats:
		return soap_in_PointerTo_tempuri__GetDailyStats(soap, NULL, NULL, "tempuri:GetDailyStats");
	case SOAP_TYPE_PointerTo_tempuri__GetStats:
		return soap_in_PointerTo_tempuri__GetStats(soap, NULL, NULL, "tempuri:GetStats");
	case SOAP_TYPE_PointerTo_tempuri__SendAmountDictionary:
		return soap_in_PointerTo_tempuri__SendAmountDictionary(soap, NULL, NULL, "tempuri:SendAmountDictionary");
	case SOAP_TYPE_PointerTo_tempuri__SendLinks:
		return soap_in_PointerTo_tempuri__SendLinks(soap, NULL, NULL, "tempuri:SendLinks");
	case SOAP_TYPE_PointerTo_tempuri__GetNamesDictionary:
		return soap_in_PointerTo_tempuri__GetNamesDictionary(soap, NULL, NULL, "tempuri:GetNamesDictionary");
	case SOAP_TYPE_PointerTo_tempuri__GetLink:
		return soap_in_PointerTo_tempuri__GetLink(soap, NULL, NULL, "tempuri:GetLink");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerToPointerTons1__Page:
		return soap_in_PointerToPointerTons1__Page(soap, NULL, NULL, "ns1:Page");
	case SOAP_TYPE_PointerTons1__Page:
		return soap_in_PointerTons1__Page(soap, NULL, NULL, "ns1:Page");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, NULL, NULL, "arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTons1__ArrayOfPage:
		return soap_in_PointerTons1__ArrayOfPage(soap, NULL, NULL, "ns1:ArrayOfPage");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfintstring:
		return soap_in_PointerToarr__ArrayOfKeyValueOfintstring(soap, NULL, NULL, "arr:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeint:
		return soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringint:
		return soap_in_PointerToarr__ArrayOfKeyValueOfstringint(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_PointerToarr__ArrayOfstring:
		return soap_in_PointerToarr__ArrayOfstring(soap, NULL, NULL, "arr:ArrayOfstring");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Page"))
		{	*type = SOAP_TYPE_ns1__Page;
			return soap_in_ns1__Page(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfPage"))
		{	*type = SOAP_TYPE_ns1__ArrayOfPage;
			return soap_in_ns1__ArrayOfPage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
			return soap_in_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfintstring"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfintstring;
			return soap_in_arr__ArrayOfKeyValueOfintstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfdateTimeint"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint;
			return soap_in_arr__ArrayOfKeyValueOfdateTimeint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
			return soap_in_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringint"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfstringint;
			return soap_in_arr__ArrayOfKeyValueOfstringint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfstring"))
		{	*type = SOAP_TYPE_arr__ArrayOfstring;
			return soap_in_arr__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
		{	*type = SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1;
			return soap_in_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1;
			return soap_in__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring;
			return soap_in__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint;
			return soap_in__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1;
			return soap_in__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint;
			return soap_in__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1"))
		{	*type = SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1;
			return soap_in__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetSearchPhraseResponse"))
		{	*type = SOAP_TYPE__tempuri__SetSearchPhraseResponse;
			return soap_in__tempuri__SetSearchPhraseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetSearchPhrase"))
		{	*type = SOAP_TYPE__tempuri__SetSearchPhrase;
			return soap_in__tempuri__SetSearchPhrase(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetNameResponse"))
		{	*type = SOAP_TYPE__tempuri__SetNameResponse;
			return soap_in__tempuri__SetNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetName"))
		{	*type = SOAP_TYPE__tempuri__SetName;
			return soap_in__tempuri__SetName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetSiteResponse"))
		{	*type = SOAP_TYPE__tempuri__SetSiteResponse;
			return soap_in__tempuri__SetSiteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SetSite"))
		{	*type = SOAP_TYPE__tempuri__SetSite;
			return soap_in__tempuri__SetSite(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetSearchPhrasesResponse"))
		{	*type = SOAP_TYPE__tempuri__GetSearchPhrasesResponse;
			return soap_in__tempuri__GetSearchPhrasesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetSearchPhrases"))
		{	*type = SOAP_TYPE__tempuri__GetSearchPhrases;
			return soap_in__tempuri__GetSearchPhrases(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetPagesResponse"))
		{	*type = SOAP_TYPE__tempuri__GetPagesResponse;
			return soap_in__tempuri__GetPagesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetPages"))
		{	*type = SOAP_TYPE__tempuri__GetPages;
			return soap_in__tempuri__GetPages(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetSitesResponse"))
		{	*type = SOAP_TYPE__tempuri__GetSitesResponse;
			return soap_in__tempuri__GetSitesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetSites"))
		{	*type = SOAP_TYPE__tempuri__GetSites;
			return soap_in__tempuri__GetSites(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetNamesResponse"))
		{	*type = SOAP_TYPE__tempuri__GetNamesResponse;
			return soap_in__tempuri__GetNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetNames"))
		{	*type = SOAP_TYPE__tempuri__GetNames;
			return soap_in__tempuri__GetNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetStatsByNameResponse"))
		{	*type = SOAP_TYPE__tempuri__GetStatsByNameResponse;
			return soap_in__tempuri__GetStatsByNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetStatsByName"))
		{	*type = SOAP_TYPE__tempuri__GetStatsByName;
			return soap_in__tempuri__GetStatsByName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetDailyStatsResponse"))
		{	*type = SOAP_TYPE__tempuri__GetDailyStatsResponse;
			return soap_in__tempuri__GetDailyStatsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetDailyStats"))
		{	*type = SOAP_TYPE__tempuri__GetDailyStats;
			return soap_in__tempuri__GetDailyStats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetStatsResponse"))
		{	*type = SOAP_TYPE__tempuri__GetStatsResponse;
			return soap_in__tempuri__GetStatsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetStats"))
		{	*type = SOAP_TYPE__tempuri__GetStats;
			return soap_in__tempuri__GetStats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SendAmountDictionaryResponse"))
		{	*type = SOAP_TYPE__tempuri__SendAmountDictionaryResponse;
			return soap_in__tempuri__SendAmountDictionaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SendAmountDictionary"))
		{	*type = SOAP_TYPE__tempuri__SendAmountDictionary;
			return soap_in__tempuri__SendAmountDictionary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SendLinksResponse"))
		{	*type = SOAP_TYPE__tempuri__SendLinksResponse;
			return soap_in__tempuri__SendLinksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:SendLinks"))
		{	*type = SOAP_TYPE__tempuri__SendLinks;
			return soap_in__tempuri__SendLinks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetNamesDictionaryResponse"))
		{	*type = SOAP_TYPE__tempuri__GetNamesDictionaryResponse;
			return soap_in__tempuri__GetNamesDictionaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetNamesDictionary"))
		{	*type = SOAP_TYPE__tempuri__GetNamesDictionary;
			return soap_in__tempuri__GetNamesDictionary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetLinkResponse"))
		{	*type = SOAP_TYPE__tempuri__GetLinkResponse;
			return soap_in__tempuri__GetLinkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetLink"))
		{	*type = SOAP_TYPE__tempuri__GetLink;
			return soap_in__tempuri__GetLink(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return ((_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, NULL);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return ((_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring", id, NULL);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return ((_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint", id, NULL);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return ((_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, NULL);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return ((_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint", id, NULL);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return ((_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_out(soap, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1", id, NULL);
	case SOAP_TYPE_ns1__Page:
		return ((ns1__Page *)ptr)->soap_out(soap, tag, id, "ns1:Page");
	case SOAP_TYPE_ns1__ArrayOfPage:
		return ((ns1__ArrayOfPage *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfPage");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return ((arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfintstring:
		return ((arr__ArrayOfKeyValueOfintstring *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint:
		return ((arr__ArrayOfKeyValueOfdateTimeint *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return ((arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringint:
		return ((arr__ArrayOfKeyValueOfstringint *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_arr__ArrayOfstring:
		return ((arr__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfstring");
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return ((arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_out(soap, tag, id, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE__tempuri__SetSearchPhraseResponse:
		return ((_tempuri__SetSearchPhraseResponse *)ptr)->soap_out(soap, "tempuri:SetSearchPhraseResponse", id, NULL);
	case SOAP_TYPE__tempuri__SetSearchPhrase:
		return ((_tempuri__SetSearchPhrase *)ptr)->soap_out(soap, "tempuri:SetSearchPhrase", id, NULL);
	case SOAP_TYPE__tempuri__SetNameResponse:
		return ((_tempuri__SetNameResponse *)ptr)->soap_out(soap, "tempuri:SetNameResponse", id, NULL);
	case SOAP_TYPE__tempuri__SetName:
		return ((_tempuri__SetName *)ptr)->soap_out(soap, "tempuri:SetName", id, NULL);
	case SOAP_TYPE__tempuri__SetSiteResponse:
		return ((_tempuri__SetSiteResponse *)ptr)->soap_out(soap, "tempuri:SetSiteResponse", id, NULL);
	case SOAP_TYPE__tempuri__SetSite:
		return ((_tempuri__SetSite *)ptr)->soap_out(soap, "tempuri:SetSite", id, NULL);
	case SOAP_TYPE__tempuri__GetSearchPhrasesResponse:
		return ((_tempuri__GetSearchPhrasesResponse *)ptr)->soap_out(soap, "tempuri:GetSearchPhrasesResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetSearchPhrases:
		return ((_tempuri__GetSearchPhrases *)ptr)->soap_out(soap, "tempuri:GetSearchPhrases", id, NULL);
	case SOAP_TYPE__tempuri__GetPagesResponse:
		return ((_tempuri__GetPagesResponse *)ptr)->soap_out(soap, "tempuri:GetPagesResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetPages:
		return ((_tempuri__GetPages *)ptr)->soap_out(soap, "tempuri:GetPages", id, NULL);
	case SOAP_TYPE__tempuri__GetSitesResponse:
		return ((_tempuri__GetSitesResponse *)ptr)->soap_out(soap, "tempuri:GetSitesResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetSites:
		return ((_tempuri__GetSites *)ptr)->soap_out(soap, "tempuri:GetSites", id, NULL);
	case SOAP_TYPE__tempuri__GetNamesResponse:
		return ((_tempuri__GetNamesResponse *)ptr)->soap_out(soap, "tempuri:GetNamesResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetNames:
		return ((_tempuri__GetNames *)ptr)->soap_out(soap, "tempuri:GetNames", id, NULL);
	case SOAP_TYPE__tempuri__GetStatsByNameResponse:
		return ((_tempuri__GetStatsByNameResponse *)ptr)->soap_out(soap, "tempuri:GetStatsByNameResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetStatsByName:
		return ((_tempuri__GetStatsByName *)ptr)->soap_out(soap, "tempuri:GetStatsByName", id, NULL);
	case SOAP_TYPE__tempuri__GetDailyStatsResponse:
		return ((_tempuri__GetDailyStatsResponse *)ptr)->soap_out(soap, "tempuri:GetDailyStatsResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetDailyStats:
		return ((_tempuri__GetDailyStats *)ptr)->soap_out(soap, "tempuri:GetDailyStats", id, NULL);
	case SOAP_TYPE__tempuri__GetStatsResponse:
		return ((_tempuri__GetStatsResponse *)ptr)->soap_out(soap, "tempuri:GetStatsResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetStats:
		return ((_tempuri__GetStats *)ptr)->soap_out(soap, "tempuri:GetStats", id, NULL);
	case SOAP_TYPE__tempuri__SendAmountDictionaryResponse:
		return ((_tempuri__SendAmountDictionaryResponse *)ptr)->soap_out(soap, "tempuri:SendAmountDictionaryResponse", id, NULL);
	case SOAP_TYPE__tempuri__SendAmountDictionary:
		return ((_tempuri__SendAmountDictionary *)ptr)->soap_out(soap, "tempuri:SendAmountDictionary", id, NULL);
	case SOAP_TYPE__tempuri__SendLinksResponse:
		return ((_tempuri__SendLinksResponse *)ptr)->soap_out(soap, "tempuri:SendLinksResponse", id, NULL);
	case SOAP_TYPE__tempuri__SendLinks:
		return ((_tempuri__SendLinks *)ptr)->soap_out(soap, "tempuri:SendLinks", id, NULL);
	case SOAP_TYPE__tempuri__GetNamesDictionaryResponse:
		return ((_tempuri__GetNamesDictionaryResponse *)ptr)->soap_out(soap, "tempuri:GetNamesDictionaryResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetNamesDictionary:
		return ((_tempuri__GetNamesDictionary *)ptr)->soap_out(soap, "tempuri:GetNamesDictionary", id, NULL);
	case SOAP_TYPE__tempuri__GetLinkResponse:
		return ((_tempuri__GetLinkResponse *)ptr)->soap_out(soap, "tempuri:GetLinkResponse", id, NULL);
	case SOAP_TYPE__tempuri__GetLink:
		return ((_tempuri__GetLink *)ptr)->soap_out(soap, "tempuri:GetLink", id, NULL);
	case SOAP_TYPE_PointerTo_tempuri__SetSearchPhrase:
		return soap_out_PointerTo_tempuri__SetSearchPhrase(soap, tag, id, (_tempuri__SetSearchPhrase *const*)ptr, "tempuri:SetSearchPhrase");
	case SOAP_TYPE_PointerTo_tempuri__SetName:
		return soap_out_PointerTo_tempuri__SetName(soap, tag, id, (_tempuri__SetName *const*)ptr, "tempuri:SetName");
	case SOAP_TYPE_PointerTo_tempuri__SetSite:
		return soap_out_PointerTo_tempuri__SetSite(soap, tag, id, (_tempuri__SetSite *const*)ptr, "tempuri:SetSite");
	case SOAP_TYPE_PointerTo_tempuri__GetSearchPhrases:
		return soap_out_PointerTo_tempuri__GetSearchPhrases(soap, tag, id, (_tempuri__GetSearchPhrases *const*)ptr, "tempuri:GetSearchPhrases");
	case SOAP_TYPE_PointerTo_tempuri__GetPages:
		return soap_out_PointerTo_tempuri__GetPages(soap, tag, id, (_tempuri__GetPages *const*)ptr, "tempuri:GetPages");
	case SOAP_TYPE_PointerTo_tempuri__GetSites:
		return soap_out_PointerTo_tempuri__GetSites(soap, tag, id, (_tempuri__GetSites *const*)ptr, "tempuri:GetSites");
	case SOAP_TYPE_PointerTo_tempuri__GetNames:
		return soap_out_PointerTo_tempuri__GetNames(soap, tag, id, (_tempuri__GetNames *const*)ptr, "tempuri:GetNames");
	case SOAP_TYPE_PointerTo_tempuri__GetStatsByName:
		return soap_out_PointerTo_tempuri__GetStatsByName(soap, tag, id, (_tempuri__GetStatsByName *const*)ptr, "tempuri:GetStatsByName");
	case SOAP_TYPE_PointerTo_tempuri__GetDailyStats:
		return soap_out_PointerTo_tempuri__GetDailyStats(soap, tag, id, (_tempuri__GetDailyStats *const*)ptr, "tempuri:GetDailyStats");
	case SOAP_TYPE_PointerTo_tempuri__GetStats:
		return soap_out_PointerTo_tempuri__GetStats(soap, tag, id, (_tempuri__GetStats *const*)ptr, "tempuri:GetStats");
	case SOAP_TYPE_PointerTo_tempuri__SendAmountDictionary:
		return soap_out_PointerTo_tempuri__SendAmountDictionary(soap, tag, id, (_tempuri__SendAmountDictionary *const*)ptr, "tempuri:SendAmountDictionary");
	case SOAP_TYPE_PointerTo_tempuri__SendLinks:
		return soap_out_PointerTo_tempuri__SendLinks(soap, tag, id, (_tempuri__SendLinks *const*)ptr, "tempuri:SendLinks");
	case SOAP_TYPE_PointerTo_tempuri__GetNamesDictionary:
		return soap_out_PointerTo_tempuri__GetNamesDictionary(soap, tag, id, (_tempuri__GetNamesDictionary *const*)ptr, "tempuri:GetNamesDictionary");
	case SOAP_TYPE_PointerTo_tempuri__GetLink:
		return soap_out_PointerTo_tempuri__GetLink(soap, tag, id, (_tempuri__GetLink *const*)ptr, "tempuri:GetLink");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerToPointerTons1__Page:
		return soap_out_PointerToPointerTons1__Page(soap, tag, id, (ns1__Page **const*)ptr, "ns1:Page");
	case SOAP_TYPE_PointerTons1__Page:
		return soap_out_PointerTons1__Page(soap, tag, id, (ns1__Page *const*)ptr, "ns1:Page");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, id, (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *const*)ptr, "arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, id, (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *const*)ptr, "arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, id, (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *const*)ptr, "arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1");
	case SOAP_TYPE_PointerTons1__ArrayOfPage:
		return soap_out_PointerTons1__ArrayOfPage(soap, tag, id, (ns1__ArrayOfPage *const*)ptr, "ns1:ArrayOfPage");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfintstring:
		return soap_out_PointerToarr__ArrayOfKeyValueOfintstring(soap, tag, id, (arr__ArrayOfKeyValueOfintstring *const*)ptr, "arr:ArrayOfKeyValueOfintstring");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeint:
		return soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, tag, id, (arr__ArrayOfKeyValueOfdateTimeint *const*)ptr, "arr:ArrayOfKeyValueOfdateTimeint");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringint:
		return soap_out_PointerToarr__ArrayOfKeyValueOfstringint(soap, tag, id, (arr__ArrayOfKeyValueOfstringint *const*)ptr, "arr:ArrayOfKeyValueOfstringint");
	case SOAP_TYPE_PointerToarr__ArrayOfstring:
		return soap_out_PointerToarr__ArrayOfstring(soap, tag, id, (arr__ArrayOfstring *const*)ptr, "arr:ArrayOfstring");
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr, "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		((_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		((_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		((_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		((_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		((_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		((_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Page:
		((ns1__Page *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfPage:
		((ns1__ArrayOfPage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		((arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfintstring:
		((arr__ArrayOfKeyValueOfintstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint:
		((arr__ArrayOfKeyValueOfdateTimeint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		((arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringint:
		((arr__ArrayOfKeyValueOfstringint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfstring:
		((arr__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		((arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetSearchPhraseResponse:
		((_tempuri__SetSearchPhraseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetSearchPhrase:
		((_tempuri__SetSearchPhrase *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetNameResponse:
		((_tempuri__SetNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetName:
		((_tempuri__SetName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetSiteResponse:
		((_tempuri__SetSiteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SetSite:
		((_tempuri__SetSite *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetSearchPhrasesResponse:
		((_tempuri__GetSearchPhrasesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetSearchPhrases:
		((_tempuri__GetSearchPhrases *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetPagesResponse:
		((_tempuri__GetPagesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetPages:
		((_tempuri__GetPages *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetSitesResponse:
		((_tempuri__GetSitesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetSites:
		((_tempuri__GetSites *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetNamesResponse:
		((_tempuri__GetNamesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetNames:
		((_tempuri__GetNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetStatsByNameResponse:
		((_tempuri__GetStatsByNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetStatsByName:
		((_tempuri__GetStatsByName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetDailyStatsResponse:
		((_tempuri__GetDailyStatsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetDailyStats:
		((_tempuri__GetDailyStats *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetStatsResponse:
		((_tempuri__GetStatsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetStats:
		((_tempuri__GetStats *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SendAmountDictionaryResponse:
		((_tempuri__SendAmountDictionaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SendAmountDictionary:
		((_tempuri__SendAmountDictionary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SendLinksResponse:
		((_tempuri__SendLinksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__SendLinks:
		((_tempuri__SendLinks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetNamesDictionaryResponse:
		((_tempuri__GetNamesDictionaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetNamesDictionary:
		((_tempuri__GetNamesDictionary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetLinkResponse:
		((_tempuri__GetLinkResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetLink:
		((_tempuri__GetLink *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___tempuri__SetSearchPhrase:
		soap_serialize___tempuri__SetSearchPhrase(soap, (const struct __tempuri__SetSearchPhrase *)ptr);
		break;
	case SOAP_TYPE___tempuri__SetName:
		soap_serialize___tempuri__SetName(soap, (const struct __tempuri__SetName *)ptr);
		break;
	case SOAP_TYPE___tempuri__SetSite:
		soap_serialize___tempuri__SetSite(soap, (const struct __tempuri__SetSite *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetSearchPhrases:
		soap_serialize___tempuri__GetSearchPhrases(soap, (const struct __tempuri__GetSearchPhrases *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetPages:
		soap_serialize___tempuri__GetPages(soap, (const struct __tempuri__GetPages *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetSites:
		soap_serialize___tempuri__GetSites(soap, (const struct __tempuri__GetSites *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetNames:
		soap_serialize___tempuri__GetNames(soap, (const struct __tempuri__GetNames *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetStatsByName:
		soap_serialize___tempuri__GetStatsByName(soap, (const struct __tempuri__GetStatsByName *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetDailyStats:
		soap_serialize___tempuri__GetDailyStats(soap, (const struct __tempuri__GetDailyStats *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetStats:
		soap_serialize___tempuri__GetStats(soap, (const struct __tempuri__GetStats *)ptr);
		break;
	case SOAP_TYPE___tempuri__SendAmountDictionary:
		soap_serialize___tempuri__SendAmountDictionary(soap, (const struct __tempuri__SendAmountDictionary *)ptr);
		break;
	case SOAP_TYPE___tempuri__SendLinks:
		soap_serialize___tempuri__SendLinks(soap, (const struct __tempuri__SendLinks *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetNamesDictionary:
		soap_serialize___tempuri__GetNamesDictionary(soap, (const struct __tempuri__GetNamesDictionary *)ptr);
		break;
	case SOAP_TYPE___tempuri__GetLink:
		soap_serialize___tempuri__GetLink(soap, (const struct __tempuri__GetLink *)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SetSearchPhrase:
		soap_serialize_PointerTo_tempuri__SetSearchPhrase(soap, (_tempuri__SetSearchPhrase *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SetName:
		soap_serialize_PointerTo_tempuri__SetName(soap, (_tempuri__SetName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SetSite:
		soap_serialize_PointerTo_tempuri__SetSite(soap, (_tempuri__SetSite *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetSearchPhrases:
		soap_serialize_PointerTo_tempuri__GetSearchPhrases(soap, (_tempuri__GetSearchPhrases *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetPages:
		soap_serialize_PointerTo_tempuri__GetPages(soap, (_tempuri__GetPages *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetSites:
		soap_serialize_PointerTo_tempuri__GetSites(soap, (_tempuri__GetSites *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetNames:
		soap_serialize_PointerTo_tempuri__GetNames(soap, (_tempuri__GetNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetStatsByName:
		soap_serialize_PointerTo_tempuri__GetStatsByName(soap, (_tempuri__GetStatsByName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetDailyStats:
		soap_serialize_PointerTo_tempuri__GetDailyStats(soap, (_tempuri__GetDailyStats *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetStats:
		soap_serialize_PointerTo_tempuri__GetStats(soap, (_tempuri__GetStats *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SendAmountDictionary:
		soap_serialize_PointerTo_tempuri__SendAmountDictionary(soap, (_tempuri__SendAmountDictionary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__SendLinks:
		soap_serialize_PointerTo_tempuri__SendLinks(soap, (_tempuri__SendLinks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetNamesDictionary:
		soap_serialize_PointerTo_tempuri__GetNamesDictionary(soap, (_tempuri__GetNamesDictionary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetLink:
		soap_serialize_PointerTo_tempuri__GetLink(soap, (_tempuri__GetLink *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__Page:
		soap_serialize_PointerToPointerTons1__Page(soap, (ns1__Page **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Page:
		soap_serialize_PointerTons1__Page(soap, (ns1__Page *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfPage:
		soap_serialize_PointerTons1__ArrayOfPage(soap, (ns1__ArrayOfPage *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfintstring:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfintstring(soap, (arr__ArrayOfKeyValueOfintstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeint:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, (arr__ArrayOfKeyValueOfdateTimeint *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringint:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfstringint(soap, (arr__ArrayOfKeyValueOfstringint *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfstring:
		soap_serialize_PointerToarr__ArrayOfstring(soap, (arr__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE__tempuri__GetLink:
		return (void*)soap_instantiate__tempuri__GetLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetLinkResponse:
		return (void*)soap_instantiate__tempuri__GetLinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetNamesDictionary:
		return (void*)soap_instantiate__tempuri__GetNamesDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetNamesDictionaryResponse:
		return (void*)soap_instantiate__tempuri__GetNamesDictionaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SendLinks:
		return (void*)soap_instantiate__tempuri__SendLinks(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SendLinksResponse:
		return (void*)soap_instantiate__tempuri__SendLinksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SendAmountDictionary:
		return (void*)soap_instantiate__tempuri__SendAmountDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SendAmountDictionaryResponse:
		return (void*)soap_instantiate__tempuri__SendAmountDictionaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetStats:
		return (void*)soap_instantiate__tempuri__GetStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetStatsResponse:
		return (void*)soap_instantiate__tempuri__GetStatsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetDailyStats:
		return (void*)soap_instantiate__tempuri__GetDailyStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetDailyStatsResponse:
		return (void*)soap_instantiate__tempuri__GetDailyStatsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetStatsByName:
		return (void*)soap_instantiate__tempuri__GetStatsByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetStatsByNameResponse:
		return (void*)soap_instantiate__tempuri__GetStatsByNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetNames:
		return (void*)soap_instantiate__tempuri__GetNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetNamesResponse:
		return (void*)soap_instantiate__tempuri__GetNamesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetSites:
		return (void*)soap_instantiate__tempuri__GetSites(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetSitesResponse:
		return (void*)soap_instantiate__tempuri__GetSitesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetPages:
		return (void*)soap_instantiate__tempuri__GetPages(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetPagesResponse:
		return (void*)soap_instantiate__tempuri__GetPagesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetSearchPhrases:
		return (void*)soap_instantiate__tempuri__GetSearchPhrases(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetSearchPhrasesResponse:
		return (void*)soap_instantiate__tempuri__GetSearchPhrasesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetSite:
		return (void*)soap_instantiate__tempuri__SetSite(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetSiteResponse:
		return (void*)soap_instantiate__tempuri__SetSiteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetName:
		return (void*)soap_instantiate__tempuri__SetName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetNameResponse:
		return (void*)soap_instantiate__tempuri__SetNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetSearchPhrase:
		return (void*)soap_instantiate__tempuri__SetSearchPhrase(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__SetSearchPhraseResponse:
		return (void*)soap_instantiate__tempuri__SetSearchPhraseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfstring:
		return (void*)soap_instantiate_arr__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringint:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfstringint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfdateTimeint(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfintstring:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfintstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return (void*)soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		return (void*)soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfPage:
		return (void*)soap_instantiate_ns1__ArrayOfPage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Page:
		return (void*)soap_instantiate_ns1__Page(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetLink:
		return (void*)soap_instantiate___tempuri__GetLink(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetNamesDictionary:
		return (void*)soap_instantiate___tempuri__GetNamesDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SendLinks:
		return (void*)soap_instantiate___tempuri__SendLinks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SendAmountDictionary:
		return (void*)soap_instantiate___tempuri__SendAmountDictionary(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetStats:
		return (void*)soap_instantiate___tempuri__GetStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetDailyStats:
		return (void*)soap_instantiate___tempuri__GetDailyStats(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetStatsByName:
		return (void*)soap_instantiate___tempuri__GetStatsByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetNames:
		return (void*)soap_instantiate___tempuri__GetNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetSites:
		return (void*)soap_instantiate___tempuri__GetSites(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetPages:
		return (void*)soap_instantiate___tempuri__GetPages(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__GetSearchPhrases:
		return (void*)soap_instantiate___tempuri__GetSearchPhrases(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SetSite:
		return (void*)soap_instantiate___tempuri__SetSite(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SetName:
		return (void*)soap_instantiate___tempuri__SetName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__SetSearchPhrase:
		return (void*)soap_instantiate___tempuri__SetSearchPhrase(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__tempuri__GetLink:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetLink*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetLink*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetLinkResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetLinkResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetLinkResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetNamesDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetNamesDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetNamesDictionary*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetNamesDictionaryResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetNamesDictionaryResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetNamesDictionaryResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SendLinks:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SendLinks*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SendLinks*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SendLinksResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SendLinksResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SendLinksResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SendAmountDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SendAmountDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SendAmountDictionary*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SendAmountDictionaryResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SendAmountDictionaryResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SendAmountDictionaryResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetStats*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetStatsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetStatsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetStatsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetDailyStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetDailyStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetDailyStats*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetDailyStatsResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetDailyStatsResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetDailyStatsResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetStatsByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetStatsByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetStatsByName*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetStatsByNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetStatsByNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetStatsByNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetNames*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetNamesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetNamesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetNamesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetSites:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetSites*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetSites*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetSitesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetSitesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetSitesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetPages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetPages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetPages*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetPagesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetPagesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetPagesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetSearchPhrases:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetSearchPhrases*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetSearchPhrases*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__GetSearchPhrasesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__GetSearchPhrasesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__GetSearchPhrasesResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetSite:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetSite*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetSite*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetSiteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetSiteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetSiteResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetName*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetNameResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetNameResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetNameResponse*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetSearchPhrase:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetSearchPhrase*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetSearchPhrase*>(p->ptr));
		break;
	case SOAP_TYPE__tempuri__SetSearchPhraseResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_tempuri__SetSearchPhraseResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_tempuri__SetSearchPhraseResponse*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfstring*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfstringint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfstringint*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfdateTimeint*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfdateTimeint*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfintstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfintstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfintstring*>(p->ptr));
		break;
	case SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__ArrayOfPage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__ArrayOfPage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__ArrayOfPage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__Page:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__Page*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__Page*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetLink:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetLink*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetLink*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetNamesDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetNamesDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetNamesDictionary*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SendLinks:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SendLinks*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SendLinks*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SendAmountDictionary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SendAmountDictionary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SendAmountDictionary*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetStats*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetDailyStats:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetDailyStats*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetDailyStats*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetStatsByName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetStatsByName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetStatsByName*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetNames:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetNames*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetNames*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetSites:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetSites*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetSites*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetPages:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetPages*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetPages*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__GetSearchPhrases:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__GetSearchPhrases*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__GetSearchPhrases*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SetSite:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SetSite*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SetSite*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SetName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SetName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SetName*>(p->ptr));
		break;
	case SOAP_TYPE___tempuri__SetSearchPhrase:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __tempuri__SetSearchPhrase*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __tempuri__SetSearchPhrase*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_string(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key);
	this->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value = NULL;
}

void _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key);
	soap_serialize_PointerToarr__ArrayOfKeyValueOfintstring(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value);
#endif
}

int _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), type))
		return soap->error;
	if (soap_out_string(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfKeyValueOfintstring(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfintstring(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::Value), "arr:ArrayOfKeyValueOfintstring"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, 0, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0, soap_copy__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)p = *(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)q;
}

void _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key);
	soap_default_string(soap, &this->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value);
}

void _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value);
#endif
}

int _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring), type))
		return soap->error;
	if (soap_out_int(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key), ""))
		return soap->error;
	if (soap_out_string(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring, sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Key), "xsd:int"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::Value), "xsd:string"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring, 0, sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring), 0, soap_copy__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)p = *(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring*)q;
}

void _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_time(soap, &this->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key);
	soap_default_int(soap, &this->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value);
}

void _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value, SOAP_TYPE_int);
#endif
}

int _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), type))
		return soap->error;
	if (soap_out_time(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key), ""))
		return soap->error;
	if (soap_out_int(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Key), "xsd:dateTime"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::Value), "xsd:int"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, 0, sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), 0, soap_copy__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0 || soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)p = *(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint*)q;
}

void _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_time(soap, &this->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key);
	this->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value = NULL;
}

void _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfstringint(soap, &this->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value);
#endif
}

int _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), type))
		return soap->error;
	if (soap_out_time(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringint(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Key), "xsd:dateTime"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfstringint(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::Value), "arr:ArrayOfKeyValueOfstringint"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, 0, sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0, soap_copy__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Key1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)p = *(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)q;
}

void _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_string(soap, &this->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key);
	soap_default_int(soap, &this->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value);
}

void _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key);
	soap_embedded(soap, &this->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value, SOAP_TYPE_int);
#endif
}

int _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint), type))
		return soap->error;
	if (soap_out_string(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key), ""))
		return soap->error;
	if (soap_out_int(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint, sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::Value), "xsd:int"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint, 0, sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint), 0, soap_copy__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)p = *(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint*)q;
}

void _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_string(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key);
	this->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value = NULL;
}

void _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key);
	soap_serialize_PointerToarr__ArrayOfstring(soap, &this->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value);
#endif
}

int _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, const _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), type))
		return soap->error;
	if (soap_out_string(soap, "arr:Key", -1, &(a->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key), ""))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfstring(soap, "arr:Value", -1, &(a->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_in__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Key1 = 1;
	size_t soap_flag_Value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arr:Key", &(a->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Key), "xsd:string"))
				{	soap_flag_Key1--;
					continue;
				}
			if (soap_flag_Value1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfstring(soap, "arr:Value", &(a->_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::Value), "arr:ArrayOfstring"))
				{	soap_flag_Value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, 0, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), 0, soap_copy__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_get__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
		if (size)
			*size = sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 %p -> %p\n", q, p));
	*(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)p = *(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1*)q;
}

void ns1__Page::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Page::Id = NULL;
	soap_default_string(soap, &this->ns1__Page::Site);
	soap_default_string(soap, &this->ns1__Page::SitePage);
	/* transient soap skipped */
}

void ns1__Page::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &this->ns1__Page::Id);
	soap_serialize_string(soap, &this->ns1__Page::Site);
	soap_serialize_string(soap, &this->ns1__Page::SitePage);
	/* transient soap skipped */
#endif
}

int ns1__Page::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Page(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Page(struct soap *soap, const char *tag, int id, const ns1__Page *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Page), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns1:Id", -1, &(a->ns1__Page::Id), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Site", -1, &(a->ns1__Page::Site), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:SitePage", -1, &(a->ns1__Page::SitePage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Page::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Page(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Page * SOAP_FMAC4 soap_in_ns1__Page(struct soap *soap, const char *tag, ns1__Page *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Page *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Page, sizeof(ns1__Page), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Page)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Page *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Id1 = 1;
	size_t soap_flag_Site1 = 1;
	size_t soap_flag_SitePage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns1:Id", &(a->ns1__Page::Id), "xsd:int"))
				{	soap_flag_Id1--;
					continue;
				}
			if (soap_flag_Site1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Site", &(a->ns1__Page::Site), "xsd:string"))
				{	soap_flag_Site1--;
					continue;
				}
			if (soap_flag_SitePage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:SitePage", &(a->ns1__Page::SitePage), "xsd:string"))
				{	soap_flag_SitePage1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Page *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Page, 0, sizeof(ns1__Page), 0, soap_copy_ns1__Page);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__Page::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__Page);
	if (this->soap_out(soap, tag?tag:"ns1:Page", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Page::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Page(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Page * SOAP_FMAC4 soap_get_ns1__Page(struct soap *soap, ns1__Page *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Page(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Page * SOAP_FMAC2 soap_instantiate_ns1__Page(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Page(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Page, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns1__Page);
		if (size)
			*size = sizeof(ns1__Page);
		((ns1__Page*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns1__Page, n);
		if (size)
			*size = n * sizeof(ns1__Page);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__Page*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__Page*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Page(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Page %p -> %p\n", q, p));
	*(ns1__Page*)p = *(ns1__Page*)q;
}

void ns1__ArrayOfPage::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfPage::__sizePage = 0;
	this->ns1__ArrayOfPage::Page = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfPage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__ArrayOfPage::Page)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfPage::__sizePage; i++)
		{
			soap_serialize_PointerTons1__Page(soap, this->ns1__ArrayOfPage::Page + i);
		}
	}
	/* transient soap skipped */
#endif
}

int ns1__ArrayOfPage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfPage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfPage(struct soap *soap, const char *tag, int id, const ns1__ArrayOfPage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfPage), type))
		return soap->error;
	if (a->ns1__ArrayOfPage::Page)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfPage::__sizePage; i++)
			if (soap_out_PointerTons1__Page(soap, "ns1:Page", -1, a->ns1__ArrayOfPage::Page + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfPage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfPage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfPage * SOAP_FMAC4 soap_in_ns1__ArrayOfPage(struct soap *soap, const char *tag, ns1__ArrayOfPage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfPage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfPage, sizeof(ns1__ArrayOfPage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfPage)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfPage *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Page1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns1:Page", 1, NULL))
			{	if (a->ns1__ArrayOfPage::Page == NULL)
				{	if (soap_blist_Page1 == NULL)
						soap_blist_Page1 = soap_new_block(soap);
					a->ns1__ArrayOfPage::Page = (ns1__Page **)soap_push_block(soap, soap_blist_Page1, sizeof(ns1__Page *));
					if (a->ns1__ArrayOfPage::Page == NULL)
						return NULL;
					*a->ns1__ArrayOfPage::Page = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__Page(soap, "ns1:Page", a->ns1__ArrayOfPage::Page, "ns1:Page"))
				{	a->ns1__ArrayOfPage::__sizePage++;
					a->ns1__ArrayOfPage::Page = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfPage::Page)
			soap_pop_block(soap, soap_blist_Page1);
		if (a->ns1__ArrayOfPage::__sizePage)
			a->ns1__ArrayOfPage::Page = (ns1__Page **)soap_save_block(soap, soap_blist_Page1, NULL, 1);
		else
		{	a->ns1__ArrayOfPage::Page = NULL;
			if (soap_blist_Page1)
				soap_end_block(soap, soap_blist_Page1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfPage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfPage, 0, sizeof(ns1__ArrayOfPage), 0, soap_copy_ns1__ArrayOfPage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfPage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__ArrayOfPage);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfPage", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfPage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfPage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfPage * SOAP_FMAC4 soap_get_ns1__ArrayOfPage(struct soap *soap, ns1__ArrayOfPage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfPage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfPage * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfPage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfPage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfPage, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns1__ArrayOfPage);
		if (size)
			*size = sizeof(ns1__ArrayOfPage);
		((ns1__ArrayOfPage*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns1__ArrayOfPage, n);
		if (size)
			*size = n * sizeof(ns1__ArrayOfPage);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__ArrayOfPage*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__ArrayOfPage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfPage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfPage %p -> %p\n", q, p));
	*(ns1__ArrayOfPage*)p = *(ns1__ArrayOfPage*)q;
}

void arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::__sizeKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = 0;
	this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::__sizeKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 + i, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
			this->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::__sizeKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1; i++)
			if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1[i].soap_out(soap, "arr:KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 == NULL)
				{	if (soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11 == NULL)
						soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_push_block(soap, soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1));
					if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
					a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "arr:KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, ""))
				{	a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::__sizeKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1++;
					a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
			soap_pop_block(soap, soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11);
		if (a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::__sizeKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1)
			a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_save_block(soap, soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 = NULL;
			if (soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11)
				soap_end_block(soap, soap_blist_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D11);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, 0, sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0, soap_copy_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		((arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)p = *(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1*)q;
}

void arr__ArrayOfKeyValueOfintstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfintstring::__sizeKeyValueOfintstring = 0;
	this->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfintstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfintstring::__sizeKeyValueOfintstring; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring + i, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
			this->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfintstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfintstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfintstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfintstring::__sizeKeyValueOfintstring; i++)
			if (a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring[i].soap_out(soap, "arr:KeyValueOfintstring", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfintstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfintstring(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfintstring * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfintstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfintstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring, sizeof(arr__ArrayOfKeyValueOfintstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfintstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfintstring *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfintstring1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfintstring", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring == NULL)
				{	if (soap_blist_KeyValueOfintstring1 == NULL)
						soap_blist_KeyValueOfintstring1 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_push_block(soap, soap_blist_KeyValueOfintstring1, sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring));
					if (a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
					a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, "arr:KeyValueOfintstring", a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring, ""))
				{	a->arr__ArrayOfKeyValueOfintstring::__sizeKeyValueOfintstring++;
					a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring)
			soap_pop_block(soap, soap_blist_KeyValueOfintstring1);
		if (a->arr__ArrayOfKeyValueOfintstring::__sizeKeyValueOfintstring)
			a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_save_block(soap, soap_blist_KeyValueOfintstring1, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfintstring::KeyValueOfintstring = NULL;
			if (soap_blist_KeyValueOfintstring1)
				soap_end_block(soap, soap_blist_KeyValueOfintstring1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfintstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring, 0, sizeof(arr__ArrayOfKeyValueOfintstring), 0, soap_copy_arr__ArrayOfKeyValueOfintstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfintstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfintstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfintstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfintstring(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfintstring * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfintstring(struct soap *soap, arr__ArrayOfKeyValueOfintstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfintstring * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfintstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfintstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfintstring);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfintstring);
		((arr__ArrayOfKeyValueOfintstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfintstring, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfintstring);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfintstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfintstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfintstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfintstring %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfintstring*)p = *(arr__ArrayOfKeyValueOfintstring*)q;
}

void arr__ArrayOfKeyValueOfdateTimeint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfdateTimeint::__sizeKeyValueOfdateTimeint = 0;
	this->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfdateTimeint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfdateTimeint::__sizeKeyValueOfdateTimeint; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint + i, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
			this->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfdateTimeint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfdateTimeint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfdateTimeint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfdateTimeint::__sizeKeyValueOfdateTimeint; i++)
			if (a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint[i].soap_out(soap, "arr:KeyValueOfdateTimeint", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfdateTimeint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfdateTimeint(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfdateTimeint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfdateTimeint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint, sizeof(arr__ArrayOfKeyValueOfdateTimeint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfdateTimeint *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfdateTimeint1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfdateTimeint", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint == NULL)
				{	if (soap_blist_KeyValueOfdateTimeint1 == NULL)
						soap_blist_KeyValueOfdateTimeint1 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_push_block(soap, soap_blist_KeyValueOfdateTimeint1, sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint));
					if (a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
					a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, "arr:KeyValueOfdateTimeint", a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint, ""))
				{	a->arr__ArrayOfKeyValueOfdateTimeint::__sizeKeyValueOfdateTimeint++;
					a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint)
			soap_pop_block(soap, soap_blist_KeyValueOfdateTimeint1);
		if (a->arr__ArrayOfKeyValueOfdateTimeint::__sizeKeyValueOfdateTimeint)
			a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_save_block(soap, soap_blist_KeyValueOfdateTimeint1, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfdateTimeint::KeyValueOfdateTimeint = NULL;
			if (soap_blist_KeyValueOfdateTimeint1)
				soap_end_block(soap, soap_blist_KeyValueOfdateTimeint1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfdateTimeint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint, 0, sizeof(arr__ArrayOfKeyValueOfdateTimeint), 0, soap_copy_arr__ArrayOfKeyValueOfdateTimeint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfdateTimeint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfdateTimeint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfdateTimeint(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeint *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfdateTimeint * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfdateTimeint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfdateTimeint);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfdateTimeint);
		((arr__ArrayOfKeyValueOfdateTimeint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfdateTimeint, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfdateTimeint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfdateTimeint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfdateTimeint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfdateTimeint %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfdateTimeint*)p = *(arr__ArrayOfKeyValueOfdateTimeint*)q;
}

void arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::__sizeKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = 0;
	this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::__sizeKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 + i, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
			this->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::__sizeKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1; i++)
			if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1[i].soap_out(soap, "arr:KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 == NULL)
				{	if (soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11 == NULL)
						soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_push_block(soap, soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11, sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1));
					if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
					a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "arr:KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, ""))
				{	a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::__sizeKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1++;
					a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
			soap_pop_block(soap, soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11);
		if (a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::__sizeKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1)
			a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_save_block(soap, soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 = NULL;
			if (soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11)
				soap_end_block(soap, soap_blist_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D11);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, 0, sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0, soap_copy_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		((arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)p = *(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1*)q;
}

void arr__ArrayOfKeyValueOfstringint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfstringint::__sizeKeyValueOfstringint = 0;
	this->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfstringint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfstringint::__sizeKeyValueOfstringint; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint + i, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
			this->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfstringint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfstringint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfstringint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfstringint::__sizeKeyValueOfstringint; i++)
			if (a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint[i].soap_out(soap, "arr:KeyValueOfstringint", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfstringint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfstringint(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringint * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringint *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfstringint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint, sizeof(arr__ArrayOfKeyValueOfstringint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfstringint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfstringint *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfstringint1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfstringint", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint == NULL)
				{	if (soap_blist_KeyValueOfstringint1 == NULL)
						soap_blist_KeyValueOfstringint1 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_push_block(soap, soap_blist_KeyValueOfstringint1, sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint));
					if (a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
					a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, "arr:KeyValueOfstringint", a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint, ""))
				{	a->arr__ArrayOfKeyValueOfstringint::__sizeKeyValueOfstringint++;
					a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint)
			soap_pop_block(soap, soap_blist_KeyValueOfstringint1);
		if (a->arr__ArrayOfKeyValueOfstringint::__sizeKeyValueOfstringint)
			a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_save_block(soap, soap_blist_KeyValueOfstringint1, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfstringint::KeyValueOfstringint = NULL;
			if (soap_blist_KeyValueOfstringint1)
				soap_end_block(soap, soap_blist_KeyValueOfstringint1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfstringint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint, 0, sizeof(arr__ArrayOfKeyValueOfstringint), 0, soap_copy_arr__ArrayOfKeyValueOfstringint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfstringint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfstringint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfstringint(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringint * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfstringint(struct soap *soap, arr__ArrayOfKeyValueOfstringint *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfstringint * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfstringint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfstringint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfstringint);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfstringint);
		((arr__ArrayOfKeyValueOfstringint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfstringint, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfstringint);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfstringint*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfstringint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfstringint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfstringint %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfstringint*)p = *(arr__ArrayOfKeyValueOfstringint*)q;
}

void arr__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfstring::__sizestring = 0;
	this->arr__ArrayOfstring::string = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfstring::__sizestring; i++)
		{
			soap_serialize_string(soap, this->arr__ArrayOfstring::string + i);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfstring(struct soap *soap, const char *tag, int id, const arr__ArrayOfstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfstring), type))
		return soap->error;
	if (a->arr__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfstring::__sizestring; i++)
			if (soap_out_string(soap, "arr:string", -1, a->arr__ArrayOfstring::string + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_in_arr__ArrayOfstring(struct soap *soap, const char *tag, arr__ArrayOfstring *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfstring, sizeof(arr__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:string", 1, NULL))
			{	if (a->arr__ArrayOfstring::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->arr__ArrayOfstring::string = (char **)soap_push_block(soap, soap_blist_string1, sizeof(char *));
					if (a->arr__ArrayOfstring::string == NULL)
						return NULL;
					*a->arr__ArrayOfstring::string = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "arr:string", a->arr__ArrayOfstring::string, "xsd:string"))
				{	a->arr__ArrayOfstring::__sizestring++;
					a->arr__ArrayOfstring::string = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfstring::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->arr__ArrayOfstring::__sizestring)
			a->arr__ArrayOfstring::string = (char **)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->arr__ArrayOfstring::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfstring, 0, sizeof(arr__ArrayOfstring), 0, soap_copy_arr__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_get_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfstring * SOAP_FMAC2 soap_instantiate_arr__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfstring);
		if (size)
			*size = sizeof(arr__ArrayOfstring);
		((arr__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfstring, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfstring);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfstring %p -> %p\n", q, p));
	*(arr__ArrayOfstring*)p = *(arr__ArrayOfstring*)q;
}

void arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::__sizeKeyValueOfstringArrayOfstringty7Ep6D1 = 0;
	this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = NULL;
	/* transient soap skipped */
}

void arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1)
	{	int i;
		for (i = 0; i < this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::__sizeKeyValueOfstringArrayOfstringty7Ep6D1; i++)
		{
			soap_embedded(soap, this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 + i, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
			this->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
#endif
}

int arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, const arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), type))
		return soap->error;
	if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1)
	{	int i;
		for (i = 0; i < a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::__sizeKeyValueOfstringArrayOfstringty7Ep6D1; i++)
			if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1[i].soap_out(soap, "arr:KeyValueOfstringArrayOfstringty7Ep6D1", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, this, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_in_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "arr:KeyValueOfstringArrayOfstringty7Ep6D1", 1, NULL))
			{	if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 == NULL)
				{	if (soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11 == NULL)
						soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11 = soap_new_block(soap);
					a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_push_block(soap, soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1));
					if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
					a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, "arr:KeyValueOfstringArrayOfstringty7Ep6D1", a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1, ""))
				{	a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::__sizeKeyValueOfstringArrayOfstringty7Ep6D1++;
					a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1)
			soap_pop_block(soap, soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11);
		if (a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::__sizeKeyValueOfstringArrayOfstringty7Ep6D1)
			a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_save_block(soap, soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11, NULL, 1);
		else
		{	a->arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::KeyValueOfstringArrayOfstringty7Ep6D1 = NULL;
			if (soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11)
				soap_end_block(soap, soap_blist_KeyValueOfstringArrayOfstringty7Ep6D11);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, 0, sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), 0, soap_copy_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (this->soap_out(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, this, tag, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC4 soap_get_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *p, const char *tag, const char *type)
{
	if ((p = soap_in_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 * SOAP_FMAC2 soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (size)
			*size = sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		((arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, n);
		if (size)
			*size = n * sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 %p -> %p\n", q, p));
	*(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)p = *(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1*)q;
}

void _tempuri__SetSearchPhraseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__SetSearchPhraseResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__SetSearchPhraseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetSearchPhraseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSearchPhraseResponse(struct soap *soap, const char *tag, int id, const _tempuri__SetSearchPhraseResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetSearchPhraseResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetSearchPhraseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetSearchPhraseResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetSearchPhraseResponse * SOAP_FMAC4 soap_in__tempuri__SetSearchPhraseResponse(struct soap *soap, const char *tag, _tempuri__SetSearchPhraseResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetSearchPhraseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetSearchPhraseResponse, sizeof(_tempuri__SetSearchPhraseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetSearchPhraseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetSearchPhraseResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetSearchPhraseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetSearchPhraseResponse, 0, sizeof(_tempuri__SetSearchPhraseResponse), 0, soap_copy__tempuri__SetSearchPhraseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetSearchPhraseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetSearchPhraseResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SetSearchPhraseResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetSearchPhraseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetSearchPhraseResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetSearchPhraseResponse * SOAP_FMAC4 soap_get__tempuri__SetSearchPhraseResponse(struct soap *soap, _tempuri__SetSearchPhraseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetSearchPhraseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetSearchPhraseResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetSearchPhraseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetSearchPhraseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetSearchPhraseResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetSearchPhraseResponse);
		if (size)
			*size = sizeof(_tempuri__SetSearchPhraseResponse);
		((_tempuri__SetSearchPhraseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetSearchPhraseResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SetSearchPhraseResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetSearchPhraseResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetSearchPhraseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetSearchPhraseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetSearchPhraseResponse %p -> %p\n", q, p));
	*(_tempuri__SetSearchPhraseResponse*)p = *(_tempuri__SetSearchPhraseResponse*)q;
}

void _tempuri__SetSearchPhrase::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_tempuri__SetSearchPhrase::name);
	soap_default_string(soap, &this->_tempuri__SetSearchPhrase::searchPhrase);
	/* transient soap skipped */
}

void _tempuri__SetSearchPhrase::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_tempuri__SetSearchPhrase::name);
	soap_serialize_string(soap, &this->_tempuri__SetSearchPhrase::searchPhrase);
	/* transient soap skipped */
#endif
}

int _tempuri__SetSearchPhrase::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetSearchPhrase(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSearchPhrase(struct soap *soap, const char *tag, int id, const _tempuri__SetSearchPhrase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetSearchPhrase), type))
		return soap->error;
	if (soap_out_string(soap, "tempuri:name", -1, &(a->_tempuri__SetSearchPhrase::name), ""))
		return soap->error;
	if (soap_out_string(soap, "tempuri:searchPhrase", -1, &(a->_tempuri__SetSearchPhrase::searchPhrase), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetSearchPhrase::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetSearchPhrase(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetSearchPhrase * SOAP_FMAC4 soap_in__tempuri__SetSearchPhrase(struct soap *soap, const char *tag, _tempuri__SetSearchPhrase *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetSearchPhrase *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetSearchPhrase, sizeof(_tempuri__SetSearchPhrase), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetSearchPhrase)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetSearchPhrase *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_searchPhrase1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:name", &(a->_tempuri__SetSearchPhrase::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_searchPhrase1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:searchPhrase", &(a->_tempuri__SetSearchPhrase::searchPhrase), "xsd:string"))
				{	soap_flag_searchPhrase1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetSearchPhrase *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetSearchPhrase, 0, sizeof(_tempuri__SetSearchPhrase), 0, soap_copy__tempuri__SetSearchPhrase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetSearchPhrase::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetSearchPhrase);
	if (this->soap_out(soap, tag?tag:"tempuri:SetSearchPhrase", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetSearchPhrase::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetSearchPhrase(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetSearchPhrase * SOAP_FMAC4 soap_get__tempuri__SetSearchPhrase(struct soap *soap, _tempuri__SetSearchPhrase *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetSearchPhrase * SOAP_FMAC2 soap_instantiate__tempuri__SetSearchPhrase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetSearchPhrase(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetSearchPhrase, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetSearchPhrase);
		if (size)
			*size = sizeof(_tempuri__SetSearchPhrase);
		((_tempuri__SetSearchPhrase*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetSearchPhrase, n);
		if (size)
			*size = n * sizeof(_tempuri__SetSearchPhrase);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetSearchPhrase*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetSearchPhrase*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetSearchPhrase(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetSearchPhrase %p -> %p\n", q, p));
	*(_tempuri__SetSearchPhrase*)p = *(_tempuri__SetSearchPhrase*)q;
}

void _tempuri__SetNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__SetNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__SetNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetNameResponse(struct soap *soap, const char *tag, int id, const _tempuri__SetNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetNameResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetNameResponse * SOAP_FMAC4 soap_in__tempuri__SetNameResponse(struct soap *soap, const char *tag, _tempuri__SetNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetNameResponse, sizeof(_tempuri__SetNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetNameResponse, 0, sizeof(_tempuri__SetNameResponse), 0, soap_copy__tempuri__SetNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetNameResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SetNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetNameResponse * SOAP_FMAC4 soap_get__tempuri__SetNameResponse(struct soap *soap, _tempuri__SetNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetNameResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetNameResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetNameResponse);
		if (size)
			*size = sizeof(_tempuri__SetNameResponse);
		((_tempuri__SetNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetNameResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SetNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetNameResponse %p -> %p\n", q, p));
	*(_tempuri__SetNameResponse*)p = *(_tempuri__SetNameResponse*)q;
}

void _tempuri__SetName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_tempuri__SetName::name);
	/* transient soap skipped */
}

void _tempuri__SetName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_tempuri__SetName::name);
	/* transient soap skipped */
#endif
}

int _tempuri__SetName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetName(struct soap *soap, const char *tag, int id, const _tempuri__SetName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetName), type))
		return soap->error;
	if (soap_out_string(soap, "tempuri:name", -1, &(a->_tempuri__SetName::name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetName(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetName * SOAP_FMAC4 soap_in__tempuri__SetName(struct soap *soap, const char *tag, _tempuri__SetName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetName, sizeof(_tempuri__SetName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:name", &(a->_tempuri__SetName::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetName, 0, sizeof(_tempuri__SetName), 0, soap_copy__tempuri__SetName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetName);
	if (this->soap_out(soap, tag?tag:"tempuri:SetName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetName(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetName * SOAP_FMAC4 soap_get__tempuri__SetName(struct soap *soap, _tempuri__SetName *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetName * SOAP_FMAC2 soap_instantiate__tempuri__SetName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetName);
		if (size)
			*size = sizeof(_tempuri__SetName);
		((_tempuri__SetName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetName, n);
		if (size)
			*size = n * sizeof(_tempuri__SetName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetName %p -> %p\n", q, p));
	*(_tempuri__SetName*)p = *(_tempuri__SetName*)q;
}

void _tempuri__SetSiteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__SetSiteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__SetSiteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetSiteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSiteResponse(struct soap *soap, const char *tag, int id, const _tempuri__SetSiteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetSiteResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetSiteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetSiteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetSiteResponse * SOAP_FMAC4 soap_in__tempuri__SetSiteResponse(struct soap *soap, const char *tag, _tempuri__SetSiteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetSiteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetSiteResponse, sizeof(_tempuri__SetSiteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetSiteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetSiteResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetSiteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetSiteResponse, 0, sizeof(_tempuri__SetSiteResponse), 0, soap_copy__tempuri__SetSiteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetSiteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetSiteResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SetSiteResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetSiteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetSiteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetSiteResponse * SOAP_FMAC4 soap_get__tempuri__SetSiteResponse(struct soap *soap, _tempuri__SetSiteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetSiteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetSiteResponse * SOAP_FMAC2 soap_instantiate__tempuri__SetSiteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetSiteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetSiteResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetSiteResponse);
		if (size)
			*size = sizeof(_tempuri__SetSiteResponse);
		((_tempuri__SetSiteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetSiteResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SetSiteResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetSiteResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetSiteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetSiteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetSiteResponse %p -> %p\n", q, p));
	*(_tempuri__SetSiteResponse*)p = *(_tempuri__SetSiteResponse*)q;
}

void _tempuri__SetSite::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_tempuri__SetSite::url);
	/* transient soap skipped */
}

void _tempuri__SetSite::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_tempuri__SetSite::url);
	/* transient soap skipped */
#endif
}

int _tempuri__SetSite::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SetSite(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SetSite(struct soap *soap, const char *tag, int id, const _tempuri__SetSite *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SetSite), type))
		return soap->error;
	if (soap_out_string(soap, "tempuri:url", -1, &(a->_tempuri__SetSite::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SetSite::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SetSite(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SetSite * SOAP_FMAC4 soap_in__tempuri__SetSite(struct soap *soap, const char *tag, _tempuri__SetSite *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SetSite *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SetSite, sizeof(_tempuri__SetSite), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SetSite)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SetSite *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:url", &(a->_tempuri__SetSite::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SetSite *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SetSite, 0, sizeof(_tempuri__SetSite), 0, soap_copy__tempuri__SetSite);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SetSite::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SetSite);
	if (this->soap_out(soap, tag?tag:"tempuri:SetSite", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SetSite::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SetSite(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SetSite * SOAP_FMAC4 soap_get__tempuri__SetSite(struct soap *soap, _tempuri__SetSite *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SetSite * SOAP_FMAC2 soap_instantiate__tempuri__SetSite(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SetSite(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SetSite, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SetSite);
		if (size)
			*size = sizeof(_tempuri__SetSite);
		((_tempuri__SetSite*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SetSite, n);
		if (size)
			*size = n * sizeof(_tempuri__SetSite);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SetSite*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SetSite*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SetSite(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SetSite %p -> %p\n", q, p));
	*(_tempuri__SetSite*)p = *(_tempuri__SetSite*)q;
}

void _tempuri__GetSearchPhrasesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetSearchPhrasesResponse::GetSearchPhrasesResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetSearchPhrasesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, &this->_tempuri__GetSearchPhrasesResponse::GetSearchPhrasesResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetSearchPhrasesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetSearchPhrasesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSearchPhrasesResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetSearchPhrasesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetSearchPhrasesResponse), type))
		return soap->error;
	if (a->GetSearchPhrasesResult)
		soap_element_result(soap, "tempuri:GetSearchPhrasesResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "tempuri:GetSearchPhrasesResult", -1, &(a->_tempuri__GetSearchPhrasesResponse::GetSearchPhrasesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetSearchPhrasesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetSearchPhrasesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetSearchPhrasesResponse * SOAP_FMAC4 soap_in__tempuri__GetSearchPhrasesResponse(struct soap *soap, const char *tag, _tempuri__GetSearchPhrasesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetSearchPhrasesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetSearchPhrasesResponse, sizeof(_tempuri__GetSearchPhrasesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetSearchPhrasesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetSearchPhrasesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSearchPhrasesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSearchPhrasesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, "tempuri:GetSearchPhrasesResult", &(a->_tempuri__GetSearchPhrasesResponse::GetSearchPhrasesResult), "arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1"))
				{	soap_flag_GetSearchPhrasesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetSearchPhrasesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetSearchPhrasesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetSearchPhrasesResponse, 0, sizeof(_tempuri__GetSearchPhrasesResponse), 0, soap_copy__tempuri__GetSearchPhrasesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetSearchPhrasesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetSearchPhrasesResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetSearchPhrasesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetSearchPhrasesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetSearchPhrasesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetSearchPhrasesResponse * SOAP_FMAC4 soap_get__tempuri__GetSearchPhrasesResponse(struct soap *soap, _tempuri__GetSearchPhrasesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetSearchPhrasesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetSearchPhrasesResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetSearchPhrasesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetSearchPhrasesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetSearchPhrasesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetSearchPhrasesResponse);
		if (size)
			*size = sizeof(_tempuri__GetSearchPhrasesResponse);
		((_tempuri__GetSearchPhrasesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetSearchPhrasesResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetSearchPhrasesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetSearchPhrasesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetSearchPhrasesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetSearchPhrasesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetSearchPhrasesResponse %p -> %p\n", q, p));
	*(_tempuri__GetSearchPhrasesResponse*)p = *(_tempuri__GetSearchPhrasesResponse*)q;
}

void _tempuri__GetSearchPhrases::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetSearchPhrases::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetSearchPhrases::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetSearchPhrases(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSearchPhrases(struct soap *soap, const char *tag, int id, const _tempuri__GetSearchPhrases *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetSearchPhrases), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetSearchPhrases::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetSearchPhrases(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetSearchPhrases * SOAP_FMAC4 soap_in__tempuri__GetSearchPhrases(struct soap *soap, const char *tag, _tempuri__GetSearchPhrases *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetSearchPhrases *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetSearchPhrases, sizeof(_tempuri__GetSearchPhrases), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetSearchPhrases)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetSearchPhrases *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetSearchPhrases *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetSearchPhrases, 0, sizeof(_tempuri__GetSearchPhrases), 0, soap_copy__tempuri__GetSearchPhrases);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetSearchPhrases::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetSearchPhrases);
	if (this->soap_out(soap, tag?tag:"tempuri:GetSearchPhrases", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetSearchPhrases::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetSearchPhrases(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetSearchPhrases * SOAP_FMAC4 soap_get__tempuri__GetSearchPhrases(struct soap *soap, _tempuri__GetSearchPhrases *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetSearchPhrases * SOAP_FMAC2 soap_instantiate__tempuri__GetSearchPhrases(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetSearchPhrases(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetSearchPhrases, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetSearchPhrases);
		if (size)
			*size = sizeof(_tempuri__GetSearchPhrases);
		((_tempuri__GetSearchPhrases*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetSearchPhrases, n);
		if (size)
			*size = n * sizeof(_tempuri__GetSearchPhrases);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetSearchPhrases*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetSearchPhrases*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetSearchPhrases(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetSearchPhrases %p -> %p\n", q, p));
	*(_tempuri__GetSearchPhrases*)p = *(_tempuri__GetSearchPhrases*)q;
}

void _tempuri__GetPagesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetPagesResponse::GetPagesResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetPagesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfPage(soap, &this->_tempuri__GetPagesResponse::GetPagesResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetPagesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetPagesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetPagesResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetPagesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetPagesResponse), type))
		return soap->error;
	if (a->GetPagesResult)
		soap_element_result(soap, "tempuri:GetPagesResult");
	if (soap_out_PointerTons1__ArrayOfPage(soap, "tempuri:GetPagesResult", -1, &(a->_tempuri__GetPagesResponse::GetPagesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetPagesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetPagesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetPagesResponse * SOAP_FMAC4 soap_in__tempuri__GetPagesResponse(struct soap *soap, const char *tag, _tempuri__GetPagesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetPagesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetPagesResponse, sizeof(_tempuri__GetPagesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetPagesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetPagesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetPagesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPagesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfPage(soap, "tempuri:GetPagesResult", &(a->_tempuri__GetPagesResponse::GetPagesResult), "ns1:ArrayOfPage"))
				{	soap_flag_GetPagesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetPagesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetPagesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetPagesResponse, 0, sizeof(_tempuri__GetPagesResponse), 0, soap_copy__tempuri__GetPagesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetPagesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetPagesResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetPagesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetPagesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetPagesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetPagesResponse * SOAP_FMAC4 soap_get__tempuri__GetPagesResponse(struct soap *soap, _tempuri__GetPagesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetPagesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetPagesResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetPagesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetPagesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetPagesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetPagesResponse);
		if (size)
			*size = sizeof(_tempuri__GetPagesResponse);
		((_tempuri__GetPagesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetPagesResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetPagesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetPagesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetPagesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetPagesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetPagesResponse %p -> %p\n", q, p));
	*(_tempuri__GetPagesResponse*)p = *(_tempuri__GetPagesResponse*)q;
}

void _tempuri__GetPages::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetPages::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetPages::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetPages(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetPages(struct soap *soap, const char *tag, int id, const _tempuri__GetPages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetPages), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetPages::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetPages(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetPages * SOAP_FMAC4 soap_in__tempuri__GetPages(struct soap *soap, const char *tag, _tempuri__GetPages *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetPages *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetPages, sizeof(_tempuri__GetPages), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetPages)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetPages *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetPages *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetPages, 0, sizeof(_tempuri__GetPages), 0, soap_copy__tempuri__GetPages);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetPages::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetPages);
	if (this->soap_out(soap, tag?tag:"tempuri:GetPages", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetPages::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetPages(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetPages * SOAP_FMAC4 soap_get__tempuri__GetPages(struct soap *soap, _tempuri__GetPages *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetPages * SOAP_FMAC2 soap_instantiate__tempuri__GetPages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetPages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetPages, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetPages);
		if (size)
			*size = sizeof(_tempuri__GetPages);
		((_tempuri__GetPages*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetPages, n);
		if (size)
			*size = n * sizeof(_tempuri__GetPages);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetPages*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetPages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetPages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetPages %p -> %p\n", q, p));
	*(_tempuri__GetPages*)p = *(_tempuri__GetPages*)q;
}

void _tempuri__GetSitesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetSitesResponse::GetSitesResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetSitesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfintstring(soap, &this->_tempuri__GetSitesResponse::GetSitesResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetSitesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetSitesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSitesResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetSitesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetSitesResponse), type))
		return soap->error;
	if (a->GetSitesResult)
		soap_element_result(soap, "tempuri:GetSitesResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfintstring(soap, "tempuri:GetSitesResult", -1, &(a->_tempuri__GetSitesResponse::GetSitesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetSitesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetSitesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetSitesResponse * SOAP_FMAC4 soap_in__tempuri__GetSitesResponse(struct soap *soap, const char *tag, _tempuri__GetSitesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetSitesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetSitesResponse, sizeof(_tempuri__GetSitesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetSitesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetSitesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSitesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSitesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfintstring(soap, "tempuri:GetSitesResult", &(a->_tempuri__GetSitesResponse::GetSitesResult), "arr:ArrayOfKeyValueOfintstring"))
				{	soap_flag_GetSitesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetSitesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetSitesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetSitesResponse, 0, sizeof(_tempuri__GetSitesResponse), 0, soap_copy__tempuri__GetSitesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetSitesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetSitesResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetSitesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetSitesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetSitesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetSitesResponse * SOAP_FMAC4 soap_get__tempuri__GetSitesResponse(struct soap *soap, _tempuri__GetSitesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetSitesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetSitesResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetSitesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetSitesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetSitesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetSitesResponse);
		if (size)
			*size = sizeof(_tempuri__GetSitesResponse);
		((_tempuri__GetSitesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetSitesResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetSitesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetSitesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetSitesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetSitesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetSitesResponse %p -> %p\n", q, p));
	*(_tempuri__GetSitesResponse*)p = *(_tempuri__GetSitesResponse*)q;
}

void _tempuri__GetSites::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetSites::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetSites::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetSites(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetSites(struct soap *soap, const char *tag, int id, const _tempuri__GetSites *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetSites), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetSites::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetSites(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetSites * SOAP_FMAC4 soap_in__tempuri__GetSites(struct soap *soap, const char *tag, _tempuri__GetSites *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetSites *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetSites, sizeof(_tempuri__GetSites), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetSites)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetSites *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetSites *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetSites, 0, sizeof(_tempuri__GetSites), 0, soap_copy__tempuri__GetSites);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetSites::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetSites);
	if (this->soap_out(soap, tag?tag:"tempuri:GetSites", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetSites::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetSites(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetSites * SOAP_FMAC4 soap_get__tempuri__GetSites(struct soap *soap, _tempuri__GetSites *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetSites * SOAP_FMAC2 soap_instantiate__tempuri__GetSites(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetSites(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetSites, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetSites);
		if (size)
			*size = sizeof(_tempuri__GetSites);
		((_tempuri__GetSites*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetSites, n);
		if (size)
			*size = n * sizeof(_tempuri__GetSites);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetSites*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetSites*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetSites(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetSites %p -> %p\n", q, p));
	*(_tempuri__GetSites*)p = *(_tempuri__GetSites*)q;
}

void _tempuri__GetNamesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetNamesResponse::GetNamesResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetNamesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfintstring(soap, &this->_tempuri__GetNamesResponse::GetNamesResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetNamesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetNamesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetNamesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetNamesResponse), type))
		return soap->error;
	if (a->GetNamesResult)
		soap_element_result(soap, "tempuri:GetNamesResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfintstring(soap, "tempuri:GetNamesResult", -1, &(a->_tempuri__GetNamesResponse::GetNamesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetNamesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetNamesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetNamesResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesResponse(struct soap *soap, const char *tag, _tempuri__GetNamesResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetNamesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetNamesResponse, sizeof(_tempuri__GetNamesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetNamesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetNamesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetNamesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetNamesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfintstring(soap, "tempuri:GetNamesResult", &(a->_tempuri__GetNamesResponse::GetNamesResult), "arr:ArrayOfKeyValueOfintstring"))
				{	soap_flag_GetNamesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetNamesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetNamesResponse, 0, sizeof(_tempuri__GetNamesResponse), 0, soap_copy__tempuri__GetNamesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetNamesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetNamesResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetNamesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetNamesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetNamesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetNamesResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesResponse(struct soap *soap, _tempuri__GetNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetNamesResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetNamesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetNamesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetNamesResponse);
		if (size)
			*size = sizeof(_tempuri__GetNamesResponse);
		((_tempuri__GetNamesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetNamesResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetNamesResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetNamesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetNamesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetNamesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetNamesResponse %p -> %p\n", q, p));
	*(_tempuri__GetNamesResponse*)p = *(_tempuri__GetNamesResponse*)q;
}

void _tempuri__GetNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetNames::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNames(struct soap *soap, const char *tag, int id, const _tempuri__GetNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetNames), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetNames(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetNames * SOAP_FMAC4 soap_in__tempuri__GetNames(struct soap *soap, const char *tag, _tempuri__GetNames *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetNames *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetNames, sizeof(_tempuri__GetNames), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetNames)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetNames *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetNames, 0, sizeof(_tempuri__GetNames), 0, soap_copy__tempuri__GetNames);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetNames);
	if (this->soap_out(soap, tag?tag:"tempuri:GetNames", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetNames(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetNames * SOAP_FMAC4 soap_get__tempuri__GetNames(struct soap *soap, _tempuri__GetNames *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetNames * SOAP_FMAC2 soap_instantiate__tempuri__GetNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetNames, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetNames);
		if (size)
			*size = sizeof(_tempuri__GetNames);
		((_tempuri__GetNames*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetNames, n);
		if (size)
			*size = n * sizeof(_tempuri__GetNames);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetNames*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetNames %p -> %p\n", q, p));
	*(_tempuri__GetNames*)p = *(_tempuri__GetNames*)q;
}

void _tempuri__GetStatsByNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetStatsByNameResponse::GetStatsByNameResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetStatsByNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, &this->_tempuri__GetStatsByNameResponse::GetStatsByNameResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetStatsByNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetStatsByNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStatsByNameResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetStatsByNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetStatsByNameResponse), type))
		return soap->error;
	if (a->GetStatsByNameResult)
		soap_element_result(soap, "tempuri:GetStatsByNameResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, "tempuri:GetStatsByNameResult", -1, &(a->_tempuri__GetStatsByNameResponse::GetStatsByNameResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetStatsByNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetStatsByNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetStatsByNameResponse * SOAP_FMAC4 soap_in__tempuri__GetStatsByNameResponse(struct soap *soap, const char *tag, _tempuri__GetStatsByNameResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetStatsByNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetStatsByNameResponse, sizeof(_tempuri__GetStatsByNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetStatsByNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetStatsByNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStatsByNameResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStatsByNameResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, "tempuri:GetStatsByNameResult", &(a->_tempuri__GetStatsByNameResponse::GetStatsByNameResult), "arr:ArrayOfKeyValueOfdateTimeint"))
				{	soap_flag_GetStatsByNameResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetStatsByNameResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetStatsByNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetStatsByNameResponse, 0, sizeof(_tempuri__GetStatsByNameResponse), 0, soap_copy__tempuri__GetStatsByNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetStatsByNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetStatsByNameResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetStatsByNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetStatsByNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetStatsByNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetStatsByNameResponse * SOAP_FMAC4 soap_get__tempuri__GetStatsByNameResponse(struct soap *soap, _tempuri__GetStatsByNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetStatsByNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetStatsByNameResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetStatsByNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetStatsByNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetStatsByNameResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetStatsByNameResponse);
		if (size)
			*size = sizeof(_tempuri__GetStatsByNameResponse);
		((_tempuri__GetStatsByNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetStatsByNameResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetStatsByNameResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetStatsByNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetStatsByNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetStatsByNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetStatsByNameResponse %p -> %p\n", q, p));
	*(_tempuri__GetStatsByNameResponse*)p = *(_tempuri__GetStatsByNameResponse*)q;
}

void _tempuri__GetStatsByName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_tempuri__GetStatsByName::name);
	/* transient soap skipped */
}

void _tempuri__GetStatsByName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_tempuri__GetStatsByName::name);
	/* transient soap skipped */
#endif
}

int _tempuri__GetStatsByName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetStatsByName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStatsByName(struct soap *soap, const char *tag, int id, const _tempuri__GetStatsByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetStatsByName), type))
		return soap->error;
	if (soap_out_string(soap, "tempuri:name", -1, &(a->_tempuri__GetStatsByName::name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetStatsByName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetStatsByName(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetStatsByName * SOAP_FMAC4 soap_in__tempuri__GetStatsByName(struct soap *soap, const char *tag, _tempuri__GetStatsByName *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetStatsByName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetStatsByName, sizeof(_tempuri__GetStatsByName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetStatsByName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetStatsByName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:name", &(a->_tempuri__GetStatsByName::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetStatsByName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetStatsByName, 0, sizeof(_tempuri__GetStatsByName), 0, soap_copy__tempuri__GetStatsByName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetStatsByName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetStatsByName);
	if (this->soap_out(soap, tag?tag:"tempuri:GetStatsByName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetStatsByName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetStatsByName(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetStatsByName * SOAP_FMAC4 soap_get__tempuri__GetStatsByName(struct soap *soap, _tempuri__GetStatsByName *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetStatsByName * SOAP_FMAC2 soap_instantiate__tempuri__GetStatsByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetStatsByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetStatsByName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetStatsByName);
		if (size)
			*size = sizeof(_tempuri__GetStatsByName);
		((_tempuri__GetStatsByName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetStatsByName, n);
		if (size)
			*size = n * sizeof(_tempuri__GetStatsByName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetStatsByName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetStatsByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetStatsByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetStatsByName %p -> %p\n", q, p));
	*(_tempuri__GetStatsByName*)p = *(_tempuri__GetStatsByName*)q;
}

void _tempuri__GetDailyStatsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetDailyStatsResponse::GetDailyStatsResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetDailyStatsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, &this->_tempuri__GetDailyStatsResponse::GetDailyStatsResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetDailyStatsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetDailyStatsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDailyStatsResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetDailyStatsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetDailyStatsResponse), type))
		return soap->error;
	if (a->GetDailyStatsResult)
		soap_element_result(soap, "tempuri:GetDailyStatsResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "tempuri:GetDailyStatsResult", -1, &(a->_tempuri__GetDailyStatsResponse::GetDailyStatsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetDailyStatsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetDailyStatsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetDailyStatsResponse * SOAP_FMAC4 soap_in__tempuri__GetDailyStatsResponse(struct soap *soap, const char *tag, _tempuri__GetDailyStatsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetDailyStatsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetDailyStatsResponse, sizeof(_tempuri__GetDailyStatsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetDailyStatsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetDailyStatsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDailyStatsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDailyStatsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, "tempuri:GetDailyStatsResult", &(a->_tempuri__GetDailyStatsResponse::GetDailyStatsResult), "arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1"))
				{	soap_flag_GetDailyStatsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetDailyStatsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetDailyStatsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetDailyStatsResponse, 0, sizeof(_tempuri__GetDailyStatsResponse), 0, soap_copy__tempuri__GetDailyStatsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetDailyStatsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetDailyStatsResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetDailyStatsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetDailyStatsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetDailyStatsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetDailyStatsResponse * SOAP_FMAC4 soap_get__tempuri__GetDailyStatsResponse(struct soap *soap, _tempuri__GetDailyStatsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetDailyStatsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetDailyStatsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetDailyStatsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetDailyStatsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetDailyStatsResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetDailyStatsResponse);
		if (size)
			*size = sizeof(_tempuri__GetDailyStatsResponse);
		((_tempuri__GetDailyStatsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetDailyStatsResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetDailyStatsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetDailyStatsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetDailyStatsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetDailyStatsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetDailyStatsResponse %p -> %p\n", q, p));
	*(_tempuri__GetDailyStatsResponse*)p = *(_tempuri__GetDailyStatsResponse*)q;
}

void _tempuri__GetDailyStats::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetDailyStats::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetDailyStats::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetDailyStats(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetDailyStats(struct soap *soap, const char *tag, int id, const _tempuri__GetDailyStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetDailyStats), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetDailyStats::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetDailyStats(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetDailyStats * SOAP_FMAC4 soap_in__tempuri__GetDailyStats(struct soap *soap, const char *tag, _tempuri__GetDailyStats *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetDailyStats *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetDailyStats, sizeof(_tempuri__GetDailyStats), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetDailyStats)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetDailyStats *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetDailyStats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetDailyStats, 0, sizeof(_tempuri__GetDailyStats), 0, soap_copy__tempuri__GetDailyStats);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetDailyStats::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetDailyStats);
	if (this->soap_out(soap, tag?tag:"tempuri:GetDailyStats", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetDailyStats::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetDailyStats(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetDailyStats * SOAP_FMAC4 soap_get__tempuri__GetDailyStats(struct soap *soap, _tempuri__GetDailyStats *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetDailyStats * SOAP_FMAC2 soap_instantiate__tempuri__GetDailyStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetDailyStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetDailyStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetDailyStats);
		if (size)
			*size = sizeof(_tempuri__GetDailyStats);
		((_tempuri__GetDailyStats*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetDailyStats, n);
		if (size)
			*size = n * sizeof(_tempuri__GetDailyStats);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetDailyStats*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetDailyStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetDailyStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetDailyStats %p -> %p\n", q, p));
	*(_tempuri__GetDailyStats*)p = *(_tempuri__GetDailyStats*)q;
}

void _tempuri__GetStatsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetStatsResponse::GetStatsResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetStatsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfstringint(soap, &this->_tempuri__GetStatsResponse::GetStatsResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetStatsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetStatsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStatsResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetStatsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetStatsResponse), type))
		return soap->error;
	if (a->GetStatsResult)
		soap_element_result(soap, "tempuri:GetStatsResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringint(soap, "tempuri:GetStatsResult", -1, &(a->_tempuri__GetStatsResponse::GetStatsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetStatsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetStatsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetStatsResponse * SOAP_FMAC4 soap_in__tempuri__GetStatsResponse(struct soap *soap, const char *tag, _tempuri__GetStatsResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetStatsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetStatsResponse, sizeof(_tempuri__GetStatsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetStatsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetStatsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetStatsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStatsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfstringint(soap, "tempuri:GetStatsResult", &(a->_tempuri__GetStatsResponse::GetStatsResult), "arr:ArrayOfKeyValueOfstringint"))
				{	soap_flag_GetStatsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetStatsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetStatsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetStatsResponse, 0, sizeof(_tempuri__GetStatsResponse), 0, soap_copy__tempuri__GetStatsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetStatsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetStatsResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetStatsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetStatsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetStatsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetStatsResponse * SOAP_FMAC4 soap_get__tempuri__GetStatsResponse(struct soap *soap, _tempuri__GetStatsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetStatsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetStatsResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetStatsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetStatsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetStatsResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetStatsResponse);
		if (size)
			*size = sizeof(_tempuri__GetStatsResponse);
		((_tempuri__GetStatsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetStatsResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetStatsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetStatsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetStatsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetStatsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetStatsResponse %p -> %p\n", q, p));
	*(_tempuri__GetStatsResponse*)p = *(_tempuri__GetStatsResponse*)q;
}

void _tempuri__GetStats::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetStats::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetStats::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetStats(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetStats(struct soap *soap, const char *tag, int id, const _tempuri__GetStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetStats), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetStats::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetStats(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetStats * SOAP_FMAC4 soap_in__tempuri__GetStats(struct soap *soap, const char *tag, _tempuri__GetStats *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetStats *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetStats, sizeof(_tempuri__GetStats), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetStats)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetStats *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetStats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetStats, 0, sizeof(_tempuri__GetStats), 0, soap_copy__tempuri__GetStats);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetStats::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetStats);
	if (this->soap_out(soap, tag?tag:"tempuri:GetStats", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetStats::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetStats(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetStats * SOAP_FMAC4 soap_get__tempuri__GetStats(struct soap *soap, _tempuri__GetStats *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetStats * SOAP_FMAC2 soap_instantiate__tempuri__GetStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetStats);
		if (size)
			*size = sizeof(_tempuri__GetStats);
		((_tempuri__GetStats*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetStats, n);
		if (size)
			*size = n * sizeof(_tempuri__GetStats);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetStats*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetStats %p -> %p\n", q, p));
	*(_tempuri__GetStats*)p = *(_tempuri__GetStats*)q;
}

void _tempuri__SendAmountDictionaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__SendAmountDictionaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__SendAmountDictionaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SendAmountDictionaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SendAmountDictionaryResponse(struct soap *soap, const char *tag, int id, const _tempuri__SendAmountDictionaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SendAmountDictionaryResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SendAmountDictionaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SendAmountDictionaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SendAmountDictionaryResponse * SOAP_FMAC4 soap_in__tempuri__SendAmountDictionaryResponse(struct soap *soap, const char *tag, _tempuri__SendAmountDictionaryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SendAmountDictionaryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SendAmountDictionaryResponse, sizeof(_tempuri__SendAmountDictionaryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SendAmountDictionaryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SendAmountDictionaryResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SendAmountDictionaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SendAmountDictionaryResponse, 0, sizeof(_tempuri__SendAmountDictionaryResponse), 0, soap_copy__tempuri__SendAmountDictionaryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SendAmountDictionaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SendAmountDictionaryResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SendAmountDictionaryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SendAmountDictionaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SendAmountDictionaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SendAmountDictionaryResponse * SOAP_FMAC4 soap_get__tempuri__SendAmountDictionaryResponse(struct soap *soap, _tempuri__SendAmountDictionaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SendAmountDictionaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SendAmountDictionaryResponse * SOAP_FMAC2 soap_instantiate__tempuri__SendAmountDictionaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SendAmountDictionaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SendAmountDictionaryResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SendAmountDictionaryResponse);
		if (size)
			*size = sizeof(_tempuri__SendAmountDictionaryResponse);
		((_tempuri__SendAmountDictionaryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SendAmountDictionaryResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SendAmountDictionaryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SendAmountDictionaryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SendAmountDictionaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SendAmountDictionaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SendAmountDictionaryResponse %p -> %p\n", q, p));
	*(_tempuri__SendAmountDictionaryResponse*)p = *(_tempuri__SendAmountDictionaryResponse*)q;
}

void _tempuri__SendAmountDictionary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__SendAmountDictionary::namesAmountDictionary = NULL;
	soap_default_string(soap, &this->_tempuri__SendAmountDictionary::url);
	/* transient soap skipped */
}

void _tempuri__SendAmountDictionary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfstringint(soap, &this->_tempuri__SendAmountDictionary::namesAmountDictionary);
	soap_serialize_string(soap, &this->_tempuri__SendAmountDictionary::url);
	/* transient soap skipped */
#endif
}

int _tempuri__SendAmountDictionary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SendAmountDictionary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SendAmountDictionary(struct soap *soap, const char *tag, int id, const _tempuri__SendAmountDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SendAmountDictionary), type))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringint(soap, "tempuri:namesAmountDictionary", -1, &(a->_tempuri__SendAmountDictionary::namesAmountDictionary), ""))
		return soap->error;
	if (soap_out_string(soap, "tempuri:url", -1, &(a->_tempuri__SendAmountDictionary::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SendAmountDictionary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SendAmountDictionary(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SendAmountDictionary * SOAP_FMAC4 soap_in__tempuri__SendAmountDictionary(struct soap *soap, const char *tag, _tempuri__SendAmountDictionary *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SendAmountDictionary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SendAmountDictionary, sizeof(_tempuri__SendAmountDictionary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SendAmountDictionary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SendAmountDictionary *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_namesAmountDictionary1 = 1;
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_namesAmountDictionary1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfstringint(soap, "tempuri:namesAmountDictionary", &(a->_tempuri__SendAmountDictionary::namesAmountDictionary), "arr:ArrayOfKeyValueOfstringint"))
				{	soap_flag_namesAmountDictionary1--;
					continue;
				}
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:url", &(a->_tempuri__SendAmountDictionary::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SendAmountDictionary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SendAmountDictionary, 0, sizeof(_tempuri__SendAmountDictionary), 0, soap_copy__tempuri__SendAmountDictionary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SendAmountDictionary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SendAmountDictionary);
	if (this->soap_out(soap, tag?tag:"tempuri:SendAmountDictionary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SendAmountDictionary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SendAmountDictionary(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SendAmountDictionary * SOAP_FMAC4 soap_get__tempuri__SendAmountDictionary(struct soap *soap, _tempuri__SendAmountDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SendAmountDictionary * SOAP_FMAC2 soap_instantiate__tempuri__SendAmountDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SendAmountDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SendAmountDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SendAmountDictionary);
		if (size)
			*size = sizeof(_tempuri__SendAmountDictionary);
		((_tempuri__SendAmountDictionary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SendAmountDictionary, n);
		if (size)
			*size = n * sizeof(_tempuri__SendAmountDictionary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SendAmountDictionary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SendAmountDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SendAmountDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SendAmountDictionary %p -> %p\n", q, p));
	*(_tempuri__SendAmountDictionary*)p = *(_tempuri__SendAmountDictionary*)q;
}

void _tempuri__SendLinksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__SendLinksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__SendLinksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SendLinksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SendLinksResponse(struct soap *soap, const char *tag, int id, const _tempuri__SendLinksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SendLinksResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SendLinksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SendLinksResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SendLinksResponse * SOAP_FMAC4 soap_in__tempuri__SendLinksResponse(struct soap *soap, const char *tag, _tempuri__SendLinksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SendLinksResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SendLinksResponse, sizeof(_tempuri__SendLinksResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SendLinksResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SendLinksResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SendLinksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SendLinksResponse, 0, sizeof(_tempuri__SendLinksResponse), 0, soap_copy__tempuri__SendLinksResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SendLinksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SendLinksResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:SendLinksResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SendLinksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SendLinksResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SendLinksResponse * SOAP_FMAC4 soap_get__tempuri__SendLinksResponse(struct soap *soap, _tempuri__SendLinksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SendLinksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SendLinksResponse * SOAP_FMAC2 soap_instantiate__tempuri__SendLinksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SendLinksResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SendLinksResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SendLinksResponse);
		if (size)
			*size = sizeof(_tempuri__SendLinksResponse);
		((_tempuri__SendLinksResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SendLinksResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__SendLinksResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SendLinksResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SendLinksResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SendLinksResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SendLinksResponse %p -> %p\n", q, p));
	*(_tempuri__SendLinksResponse*)p = *(_tempuri__SendLinksResponse*)q;
}

void _tempuri__SendLinks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__SendLinks::links = NULL;
	soap_default_string(soap, &this->_tempuri__SendLinks::url);
	/* transient soap skipped */
}

void _tempuri__SendLinks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfstring(soap, &this->_tempuri__SendLinks::links);
	soap_serialize_string(soap, &this->_tempuri__SendLinks::url);
	/* transient soap skipped */
#endif
}

int _tempuri__SendLinks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__SendLinks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__SendLinks(struct soap *soap, const char *tag, int id, const _tempuri__SendLinks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__SendLinks), type))
		return soap->error;
	if (soap_out_PointerToarr__ArrayOfstring(soap, "tempuri:links", -1, &(a->_tempuri__SendLinks::links), ""))
		return soap->error;
	if (soap_out_string(soap, "tempuri:url", -1, &(a->_tempuri__SendLinks::url), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__SendLinks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__SendLinks(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__SendLinks * SOAP_FMAC4 soap_in__tempuri__SendLinks(struct soap *soap, const char *tag, _tempuri__SendLinks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__SendLinks *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__SendLinks, sizeof(_tempuri__SendLinks), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__SendLinks)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__SendLinks *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_links1 = 1;
	size_t soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_links1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfstring(soap, "tempuri:links", &(a->_tempuri__SendLinks::links), "arr:ArrayOfstring"))
				{	soap_flag_links1--;
					continue;
				}
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:url", &(a->_tempuri__SendLinks::url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__SendLinks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__SendLinks, 0, sizeof(_tempuri__SendLinks), 0, soap_copy__tempuri__SendLinks);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__SendLinks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__SendLinks);
	if (this->soap_out(soap, tag?tag:"tempuri:SendLinks", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__SendLinks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__SendLinks(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__SendLinks * SOAP_FMAC4 soap_get__tempuri__SendLinks(struct soap *soap, _tempuri__SendLinks *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__SendLinks * SOAP_FMAC2 soap_instantiate__tempuri__SendLinks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__SendLinks(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__SendLinks, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__SendLinks);
		if (size)
			*size = sizeof(_tempuri__SendLinks);
		((_tempuri__SendLinks*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__SendLinks, n);
		if (size)
			*size = n * sizeof(_tempuri__SendLinks);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__SendLinks*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__SendLinks*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__SendLinks(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__SendLinks %p -> %p\n", q, p));
	*(_tempuri__SendLinks*)p = *(_tempuri__SendLinks*)q;
}

void _tempuri__GetNamesDictionaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetNamesDictionaryResponse::GetNamesDictionaryResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetNamesDictionaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, &this->_tempuri__GetNamesDictionaryResponse::GetNamesDictionaryResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetNamesDictionaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetNamesDictionaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesDictionaryResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetNamesDictionaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetNamesDictionaryResponse), type))
		return soap->error;
	if (a->GetNamesDictionaryResult)
		soap_element_result(soap, "tempuri:GetNamesDictionaryResult");
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, "tempuri:GetNamesDictionaryResult", -1, &(a->_tempuri__GetNamesDictionaryResponse::GetNamesDictionaryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetNamesDictionaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetNamesDictionaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetNamesDictionaryResponse * SOAP_FMAC4 soap_in__tempuri__GetNamesDictionaryResponse(struct soap *soap, const char *tag, _tempuri__GetNamesDictionaryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetNamesDictionaryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetNamesDictionaryResponse, sizeof(_tempuri__GetNamesDictionaryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetNamesDictionaryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetNamesDictionaryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetNamesDictionaryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetNamesDictionaryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, "tempuri:GetNamesDictionaryResult", &(a->_tempuri__GetNamesDictionaryResponse::GetNamesDictionaryResult), "arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1"))
				{	soap_flag_GetNamesDictionaryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetNamesDictionaryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetNamesDictionaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetNamesDictionaryResponse, 0, sizeof(_tempuri__GetNamesDictionaryResponse), 0, soap_copy__tempuri__GetNamesDictionaryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetNamesDictionaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetNamesDictionaryResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetNamesDictionaryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetNamesDictionaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetNamesDictionaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetNamesDictionaryResponse * SOAP_FMAC4 soap_get__tempuri__GetNamesDictionaryResponse(struct soap *soap, _tempuri__GetNamesDictionaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetNamesDictionaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetNamesDictionaryResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesDictionaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetNamesDictionaryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetNamesDictionaryResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetNamesDictionaryResponse);
		if (size)
			*size = sizeof(_tempuri__GetNamesDictionaryResponse);
		((_tempuri__GetNamesDictionaryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetNamesDictionaryResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetNamesDictionaryResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetNamesDictionaryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetNamesDictionaryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetNamesDictionaryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetNamesDictionaryResponse %p -> %p\n", q, p));
	*(_tempuri__GetNamesDictionaryResponse*)p = *(_tempuri__GetNamesDictionaryResponse*)q;
}

void _tempuri__GetNamesDictionary::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetNamesDictionary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetNamesDictionary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetNamesDictionary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetNamesDictionary(struct soap *soap, const char *tag, int id, const _tempuri__GetNamesDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetNamesDictionary), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetNamesDictionary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetNamesDictionary(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetNamesDictionary * SOAP_FMAC4 soap_in__tempuri__GetNamesDictionary(struct soap *soap, const char *tag, _tempuri__GetNamesDictionary *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetNamesDictionary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetNamesDictionary, sizeof(_tempuri__GetNamesDictionary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetNamesDictionary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetNamesDictionary *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetNamesDictionary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetNamesDictionary, 0, sizeof(_tempuri__GetNamesDictionary), 0, soap_copy__tempuri__GetNamesDictionary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetNamesDictionary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetNamesDictionary);
	if (this->soap_out(soap, tag?tag:"tempuri:GetNamesDictionary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetNamesDictionary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetNamesDictionary(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetNamesDictionary * SOAP_FMAC4 soap_get__tempuri__GetNamesDictionary(struct soap *soap, _tempuri__GetNamesDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetNamesDictionary * SOAP_FMAC2 soap_instantiate__tempuri__GetNamesDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetNamesDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetNamesDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetNamesDictionary);
		if (size)
			*size = sizeof(_tempuri__GetNamesDictionary);
		((_tempuri__GetNamesDictionary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetNamesDictionary, n);
		if (size)
			*size = n * sizeof(_tempuri__GetNamesDictionary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetNamesDictionary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetNamesDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetNamesDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetNamesDictionary %p -> %p\n", q, p));
	*(_tempuri__GetNamesDictionary*)p = *(_tempuri__GetNamesDictionary*)q;
}

void _tempuri__GetLinkResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_tempuri__GetLinkResponse::GetLinkResult);
	/* transient soap skipped */
}

void _tempuri__GetLinkResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &this->_tempuri__GetLinkResponse::GetLinkResult);
	/* transient soap skipped */
#endif
}

int _tempuri__GetLinkResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetLinkResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetLinkResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetLinkResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetLinkResponse), type))
		return soap->error;
	if (a->GetLinkResult)
		soap_element_result(soap, "tempuri:GetLinkResult");
	if (soap_out_string(soap, "tempuri:GetLinkResult", -1, &(a->_tempuri__GetLinkResponse::GetLinkResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetLinkResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetLinkResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetLinkResponse * SOAP_FMAC4 soap_in__tempuri__GetLinkResponse(struct soap *soap, const char *tag, _tempuri__GetLinkResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetLinkResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetLinkResponse, sizeof(_tempuri__GetLinkResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetLinkResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetLinkResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLinkResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLinkResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "tempuri:GetLinkResult", &(a->_tempuri__GetLinkResponse::GetLinkResult), "xsd:string"))
				{	soap_flag_GetLinkResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetLinkResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetLinkResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetLinkResponse, 0, sizeof(_tempuri__GetLinkResponse), 0, soap_copy__tempuri__GetLinkResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetLinkResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetLinkResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetLinkResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetLinkResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetLinkResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetLinkResponse * SOAP_FMAC4 soap_get__tempuri__GetLinkResponse(struct soap *soap, _tempuri__GetLinkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetLinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetLinkResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetLinkResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetLinkResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetLinkResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetLinkResponse);
		if (size)
			*size = sizeof(_tempuri__GetLinkResponse);
		((_tempuri__GetLinkResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetLinkResponse, n);
		if (size)
			*size = n * sizeof(_tempuri__GetLinkResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetLinkResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetLinkResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetLinkResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetLinkResponse %p -> %p\n", q, p));
	*(_tempuri__GetLinkResponse*)p = *(_tempuri__GetLinkResponse*)q;
}

void _tempuri__GetLink::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _tempuri__GetLink::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _tempuri__GetLink::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetLink(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetLink(struct soap *soap, const char *tag, int id, const _tempuri__GetLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetLink), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetLink::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetLink(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetLink * SOAP_FMAC4 soap_in__tempuri__GetLink(struct soap *soap, const char *tag, _tempuri__GetLink *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetLink *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetLink, sizeof(_tempuri__GetLink), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetLink)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetLink *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetLink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetLink, 0, sizeof(_tempuri__GetLink), 0, soap_copy__tempuri__GetLink);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetLink::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__tempuri__GetLink);
	if (this->soap_out(soap, tag?tag:"tempuri:GetLink", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetLink::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetLink(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetLink * SOAP_FMAC4 soap_get__tempuri__GetLink(struct soap *soap, _tempuri__GetLink *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetLink * SOAP_FMAC2 soap_instantiate__tempuri__GetLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetLink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetLink, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_tempuri__GetLink);
		if (size)
			*size = sizeof(_tempuri__GetLink);
		((_tempuri__GetLink*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_tempuri__GetLink, n);
		if (size)
			*size = n * sizeof(_tempuri__GetLink);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_tempuri__GetLink*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_tempuri__GetLink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetLink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetLink %p -> %p\n", q, p));
	*(_tempuri__GetLink*)p = *(_tempuri__GetLink*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetSearchPhrase(struct soap *soap, struct __tempuri__SetSearchPhrase *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SetSearchPhrase = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetSearchPhrase(struct soap *soap, const struct __tempuri__SetSearchPhrase *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SetSearchPhrase(soap, &a->tempuri__SetSearchPhrase);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetSearchPhrase(struct soap *soap, const char *tag, int id, const struct __tempuri__SetSearchPhrase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SetSearchPhrase(soap, "tempuri:SetSearchPhrase", -1, &a->tempuri__SetSearchPhrase, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetSearchPhrase * SOAP_FMAC4 soap_in___tempuri__SetSearchPhrase(struct soap *soap, const char *tag, struct __tempuri__SetSearchPhrase *a, const char *type)
{
	size_t soap_flag_tempuri__SetSearchPhrase = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SetSearchPhrase *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SetSearchPhrase, sizeof(struct __tempuri__SetSearchPhrase), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SetSearchPhrase(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SetSearchPhrase && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SetSearchPhrase(soap, "tempuri:SetSearchPhrase", &a->tempuri__SetSearchPhrase, ""))
				{	soap_flag_tempuri__SetSearchPhrase--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetSearchPhrase(struct soap *soap, const struct __tempuri__SetSearchPhrase *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SetSearchPhrase(soap, tag?tag:"-tempuri:SetSearchPhrase", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetSearchPhrase * SOAP_FMAC4 soap_get___tempuri__SetSearchPhrase(struct soap *soap, struct __tempuri__SetSearchPhrase *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SetSearchPhrase * SOAP_FMAC2 soap_instantiate___tempuri__SetSearchPhrase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SetSearchPhrase(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SetSearchPhrase, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SetSearchPhrase);
		if (size)
			*size = sizeof(struct __tempuri__SetSearchPhrase);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SetSearchPhrase, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SetSearchPhrase);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SetSearchPhrase*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SetSearchPhrase(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SetSearchPhrase %p -> %p\n", q, p));
	*(struct __tempuri__SetSearchPhrase*)p = *(struct __tempuri__SetSearchPhrase*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetName(struct soap *soap, struct __tempuri__SetName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SetName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetName(struct soap *soap, const struct __tempuri__SetName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SetName(soap, &a->tempuri__SetName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetName(struct soap *soap, const char *tag, int id, const struct __tempuri__SetName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SetName(soap, "tempuri:SetName", -1, &a->tempuri__SetName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetName * SOAP_FMAC4 soap_in___tempuri__SetName(struct soap *soap, const char *tag, struct __tempuri__SetName *a, const char *type)
{
	size_t soap_flag_tempuri__SetName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SetName *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SetName, sizeof(struct __tempuri__SetName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SetName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SetName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SetName(soap, "tempuri:SetName", &a->tempuri__SetName, ""))
				{	soap_flag_tempuri__SetName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetName(struct soap *soap, const struct __tempuri__SetName *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SetName(soap, tag?tag:"-tempuri:SetName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetName * SOAP_FMAC4 soap_get___tempuri__SetName(struct soap *soap, struct __tempuri__SetName *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SetName * SOAP_FMAC2 soap_instantiate___tempuri__SetName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SetName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SetName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SetName);
		if (size)
			*size = sizeof(struct __tempuri__SetName);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SetName, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SetName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SetName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SetName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SetName %p -> %p\n", q, p));
	*(struct __tempuri__SetName*)p = *(struct __tempuri__SetName*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetSite(struct soap *soap, struct __tempuri__SetSite *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SetSite = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetSite(struct soap *soap, const struct __tempuri__SetSite *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SetSite(soap, &a->tempuri__SetSite);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetSite(struct soap *soap, const char *tag, int id, const struct __tempuri__SetSite *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SetSite(soap, "tempuri:SetSite", -1, &a->tempuri__SetSite, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetSite * SOAP_FMAC4 soap_in___tempuri__SetSite(struct soap *soap, const char *tag, struct __tempuri__SetSite *a, const char *type)
{
	size_t soap_flag_tempuri__SetSite = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SetSite *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SetSite, sizeof(struct __tempuri__SetSite), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SetSite(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SetSite && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SetSite(soap, "tempuri:SetSite", &a->tempuri__SetSite, ""))
				{	soap_flag_tempuri__SetSite--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetSite(struct soap *soap, const struct __tempuri__SetSite *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SetSite(soap, tag?tag:"-tempuri:SetSite", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SetSite * SOAP_FMAC4 soap_get___tempuri__SetSite(struct soap *soap, struct __tempuri__SetSite *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SetSite * SOAP_FMAC2 soap_instantiate___tempuri__SetSite(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SetSite(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SetSite, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SetSite);
		if (size)
			*size = sizeof(struct __tempuri__SetSite);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SetSite, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SetSite);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SetSite*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SetSite(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SetSite %p -> %p\n", q, p));
	*(struct __tempuri__SetSite*)p = *(struct __tempuri__SetSite*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetSearchPhrases(struct soap *soap, struct __tempuri__GetSearchPhrases *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetSearchPhrases = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetSearchPhrases(struct soap *soap, const struct __tempuri__GetSearchPhrases *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetSearchPhrases(soap, &a->tempuri__GetSearchPhrases);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetSearchPhrases(struct soap *soap, const char *tag, int id, const struct __tempuri__GetSearchPhrases *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetSearchPhrases(soap, "tempuri:GetSearchPhrases", -1, &a->tempuri__GetSearchPhrases, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetSearchPhrases * SOAP_FMAC4 soap_in___tempuri__GetSearchPhrases(struct soap *soap, const char *tag, struct __tempuri__GetSearchPhrases *a, const char *type)
{
	size_t soap_flag_tempuri__GetSearchPhrases = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetSearchPhrases *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetSearchPhrases, sizeof(struct __tempuri__GetSearchPhrases), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetSearchPhrases(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetSearchPhrases && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetSearchPhrases(soap, "tempuri:GetSearchPhrases", &a->tempuri__GetSearchPhrases, ""))
				{	soap_flag_tempuri__GetSearchPhrases--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetSearchPhrases(struct soap *soap, const struct __tempuri__GetSearchPhrases *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetSearchPhrases(soap, tag?tag:"-tempuri:GetSearchPhrases", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetSearchPhrases * SOAP_FMAC4 soap_get___tempuri__GetSearchPhrases(struct soap *soap, struct __tempuri__GetSearchPhrases *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetSearchPhrases * SOAP_FMAC2 soap_instantiate___tempuri__GetSearchPhrases(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetSearchPhrases(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetSearchPhrases, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetSearchPhrases);
		if (size)
			*size = sizeof(struct __tempuri__GetSearchPhrases);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetSearchPhrases, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetSearchPhrases);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetSearchPhrases*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetSearchPhrases(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetSearchPhrases %p -> %p\n", q, p));
	*(struct __tempuri__GetSearchPhrases*)p = *(struct __tempuri__GetSearchPhrases*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetPages(struct soap *soap, struct __tempuri__GetPages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetPages = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetPages(struct soap *soap, const struct __tempuri__GetPages *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetPages(soap, &a->tempuri__GetPages);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetPages(struct soap *soap, const char *tag, int id, const struct __tempuri__GetPages *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetPages(soap, "tempuri:GetPages", -1, &a->tempuri__GetPages, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetPages * SOAP_FMAC4 soap_in___tempuri__GetPages(struct soap *soap, const char *tag, struct __tempuri__GetPages *a, const char *type)
{
	size_t soap_flag_tempuri__GetPages = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetPages *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetPages, sizeof(struct __tempuri__GetPages), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetPages(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetPages && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetPages(soap, "tempuri:GetPages", &a->tempuri__GetPages, ""))
				{	soap_flag_tempuri__GetPages--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetPages(struct soap *soap, const struct __tempuri__GetPages *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetPages(soap, tag?tag:"-tempuri:GetPages", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetPages * SOAP_FMAC4 soap_get___tempuri__GetPages(struct soap *soap, struct __tempuri__GetPages *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetPages * SOAP_FMAC2 soap_instantiate___tempuri__GetPages(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetPages(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetPages, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetPages);
		if (size)
			*size = sizeof(struct __tempuri__GetPages);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetPages, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetPages);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetPages*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetPages(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetPages %p -> %p\n", q, p));
	*(struct __tempuri__GetPages*)p = *(struct __tempuri__GetPages*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetSites(struct soap *soap, struct __tempuri__GetSites *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetSites = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetSites(struct soap *soap, const struct __tempuri__GetSites *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetSites(soap, &a->tempuri__GetSites);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetSites(struct soap *soap, const char *tag, int id, const struct __tempuri__GetSites *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetSites(soap, "tempuri:GetSites", -1, &a->tempuri__GetSites, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetSites * SOAP_FMAC4 soap_in___tempuri__GetSites(struct soap *soap, const char *tag, struct __tempuri__GetSites *a, const char *type)
{
	size_t soap_flag_tempuri__GetSites = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetSites *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetSites, sizeof(struct __tempuri__GetSites), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetSites(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetSites && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetSites(soap, "tempuri:GetSites", &a->tempuri__GetSites, ""))
				{	soap_flag_tempuri__GetSites--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetSites(struct soap *soap, const struct __tempuri__GetSites *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetSites(soap, tag?tag:"-tempuri:GetSites", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetSites * SOAP_FMAC4 soap_get___tempuri__GetSites(struct soap *soap, struct __tempuri__GetSites *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetSites * SOAP_FMAC2 soap_instantiate___tempuri__GetSites(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetSites(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetSites, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetSites);
		if (size)
			*size = sizeof(struct __tempuri__GetSites);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetSites, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetSites);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetSites*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetSites(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetSites %p -> %p\n", q, p));
	*(struct __tempuri__GetSites*)p = *(struct __tempuri__GetSites*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetNames(struct soap *soap, struct __tempuri__GetNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetNames(struct soap *soap, const struct __tempuri__GetNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetNames(soap, &a->tempuri__GetNames);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetNames(struct soap *soap, const char *tag, int id, const struct __tempuri__GetNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetNames(soap, "tempuri:GetNames", -1, &a->tempuri__GetNames, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetNames * SOAP_FMAC4 soap_in___tempuri__GetNames(struct soap *soap, const char *tag, struct __tempuri__GetNames *a, const char *type)
{
	size_t soap_flag_tempuri__GetNames = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetNames *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetNames, sizeof(struct __tempuri__GetNames), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetNames(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetNames && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetNames(soap, "tempuri:GetNames", &a->tempuri__GetNames, ""))
				{	soap_flag_tempuri__GetNames--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetNames(struct soap *soap, const struct __tempuri__GetNames *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetNames(soap, tag?tag:"-tempuri:GetNames", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetNames * SOAP_FMAC4 soap_get___tempuri__GetNames(struct soap *soap, struct __tempuri__GetNames *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetNames * SOAP_FMAC2 soap_instantiate___tempuri__GetNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetNames, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetNames);
		if (size)
			*size = sizeof(struct __tempuri__GetNames);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetNames, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetNames);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetNames %p -> %p\n", q, p));
	*(struct __tempuri__GetNames*)p = *(struct __tempuri__GetNames*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetStatsByName(struct soap *soap, struct __tempuri__GetStatsByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetStatsByName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetStatsByName(struct soap *soap, const struct __tempuri__GetStatsByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetStatsByName(soap, &a->tempuri__GetStatsByName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetStatsByName(struct soap *soap, const char *tag, int id, const struct __tempuri__GetStatsByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetStatsByName(soap, "tempuri:GetStatsByName", -1, &a->tempuri__GetStatsByName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetStatsByName * SOAP_FMAC4 soap_in___tempuri__GetStatsByName(struct soap *soap, const char *tag, struct __tempuri__GetStatsByName *a, const char *type)
{
	size_t soap_flag_tempuri__GetStatsByName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetStatsByName *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetStatsByName, sizeof(struct __tempuri__GetStatsByName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetStatsByName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetStatsByName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetStatsByName(soap, "tempuri:GetStatsByName", &a->tempuri__GetStatsByName, ""))
				{	soap_flag_tempuri__GetStatsByName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetStatsByName(struct soap *soap, const struct __tempuri__GetStatsByName *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetStatsByName(soap, tag?tag:"-tempuri:GetStatsByName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetStatsByName * SOAP_FMAC4 soap_get___tempuri__GetStatsByName(struct soap *soap, struct __tempuri__GetStatsByName *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetStatsByName * SOAP_FMAC2 soap_instantiate___tempuri__GetStatsByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetStatsByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetStatsByName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetStatsByName);
		if (size)
			*size = sizeof(struct __tempuri__GetStatsByName);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetStatsByName, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetStatsByName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetStatsByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetStatsByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetStatsByName %p -> %p\n", q, p));
	*(struct __tempuri__GetStatsByName*)p = *(struct __tempuri__GetStatsByName*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetDailyStats(struct soap *soap, struct __tempuri__GetDailyStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetDailyStats = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetDailyStats(struct soap *soap, const struct __tempuri__GetDailyStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetDailyStats(soap, &a->tempuri__GetDailyStats);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetDailyStats(struct soap *soap, const char *tag, int id, const struct __tempuri__GetDailyStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetDailyStats(soap, "tempuri:GetDailyStats", -1, &a->tempuri__GetDailyStats, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetDailyStats * SOAP_FMAC4 soap_in___tempuri__GetDailyStats(struct soap *soap, const char *tag, struct __tempuri__GetDailyStats *a, const char *type)
{
	size_t soap_flag_tempuri__GetDailyStats = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetDailyStats *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetDailyStats, sizeof(struct __tempuri__GetDailyStats), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetDailyStats(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetDailyStats && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetDailyStats(soap, "tempuri:GetDailyStats", &a->tempuri__GetDailyStats, ""))
				{	soap_flag_tempuri__GetDailyStats--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetDailyStats(struct soap *soap, const struct __tempuri__GetDailyStats *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetDailyStats(soap, tag?tag:"-tempuri:GetDailyStats", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetDailyStats * SOAP_FMAC4 soap_get___tempuri__GetDailyStats(struct soap *soap, struct __tempuri__GetDailyStats *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetDailyStats * SOAP_FMAC2 soap_instantiate___tempuri__GetDailyStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetDailyStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetDailyStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetDailyStats);
		if (size)
			*size = sizeof(struct __tempuri__GetDailyStats);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetDailyStats, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetDailyStats);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetDailyStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetDailyStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetDailyStats %p -> %p\n", q, p));
	*(struct __tempuri__GetDailyStats*)p = *(struct __tempuri__GetDailyStats*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetStats(struct soap *soap, struct __tempuri__GetStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetStats = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetStats(struct soap *soap, const struct __tempuri__GetStats *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetStats(soap, &a->tempuri__GetStats);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetStats(struct soap *soap, const char *tag, int id, const struct __tempuri__GetStats *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetStats(soap, "tempuri:GetStats", -1, &a->tempuri__GetStats, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetStats * SOAP_FMAC4 soap_in___tempuri__GetStats(struct soap *soap, const char *tag, struct __tempuri__GetStats *a, const char *type)
{
	size_t soap_flag_tempuri__GetStats = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetStats *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetStats, sizeof(struct __tempuri__GetStats), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetStats(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetStats && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetStats(soap, "tempuri:GetStats", &a->tempuri__GetStats, ""))
				{	soap_flag_tempuri__GetStats--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetStats(struct soap *soap, const struct __tempuri__GetStats *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetStats(soap, tag?tag:"-tempuri:GetStats", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetStats * SOAP_FMAC4 soap_get___tempuri__GetStats(struct soap *soap, struct __tempuri__GetStats *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetStats * SOAP_FMAC2 soap_instantiate___tempuri__GetStats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetStats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetStats, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetStats);
		if (size)
			*size = sizeof(struct __tempuri__GetStats);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetStats, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetStats);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetStats*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetStats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetStats %p -> %p\n", q, p));
	*(struct __tempuri__GetStats*)p = *(struct __tempuri__GetStats*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SendAmountDictionary(struct soap *soap, struct __tempuri__SendAmountDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SendAmountDictionary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SendAmountDictionary(struct soap *soap, const struct __tempuri__SendAmountDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SendAmountDictionary(soap, &a->tempuri__SendAmountDictionary);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SendAmountDictionary(struct soap *soap, const char *tag, int id, const struct __tempuri__SendAmountDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SendAmountDictionary(soap, "tempuri:SendAmountDictionary", -1, &a->tempuri__SendAmountDictionary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SendAmountDictionary * SOAP_FMAC4 soap_in___tempuri__SendAmountDictionary(struct soap *soap, const char *tag, struct __tempuri__SendAmountDictionary *a, const char *type)
{
	size_t soap_flag_tempuri__SendAmountDictionary = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SendAmountDictionary *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SendAmountDictionary, sizeof(struct __tempuri__SendAmountDictionary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SendAmountDictionary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SendAmountDictionary && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SendAmountDictionary(soap, "tempuri:SendAmountDictionary", &a->tempuri__SendAmountDictionary, ""))
				{	soap_flag_tempuri__SendAmountDictionary--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SendAmountDictionary(struct soap *soap, const struct __tempuri__SendAmountDictionary *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SendAmountDictionary(soap, tag?tag:"-tempuri:SendAmountDictionary", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SendAmountDictionary * SOAP_FMAC4 soap_get___tempuri__SendAmountDictionary(struct soap *soap, struct __tempuri__SendAmountDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SendAmountDictionary * SOAP_FMAC2 soap_instantiate___tempuri__SendAmountDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SendAmountDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SendAmountDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SendAmountDictionary);
		if (size)
			*size = sizeof(struct __tempuri__SendAmountDictionary);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SendAmountDictionary, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SendAmountDictionary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SendAmountDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SendAmountDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SendAmountDictionary %p -> %p\n", q, p));
	*(struct __tempuri__SendAmountDictionary*)p = *(struct __tempuri__SendAmountDictionary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SendLinks(struct soap *soap, struct __tempuri__SendLinks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__SendLinks = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SendLinks(struct soap *soap, const struct __tempuri__SendLinks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__SendLinks(soap, &a->tempuri__SendLinks);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SendLinks(struct soap *soap, const char *tag, int id, const struct __tempuri__SendLinks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__SendLinks(soap, "tempuri:SendLinks", -1, &a->tempuri__SendLinks, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SendLinks * SOAP_FMAC4 soap_in___tempuri__SendLinks(struct soap *soap, const char *tag, struct __tempuri__SendLinks *a, const char *type)
{
	size_t soap_flag_tempuri__SendLinks = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__SendLinks *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__SendLinks, sizeof(struct __tempuri__SendLinks), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__SendLinks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__SendLinks && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__SendLinks(soap, "tempuri:SendLinks", &a->tempuri__SendLinks, ""))
				{	soap_flag_tempuri__SendLinks--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SendLinks(struct soap *soap, const struct __tempuri__SendLinks *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__SendLinks(soap, tag?tag:"-tempuri:SendLinks", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__SendLinks * SOAP_FMAC4 soap_get___tempuri__SendLinks(struct soap *soap, struct __tempuri__SendLinks *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__SendLinks * SOAP_FMAC2 soap_instantiate___tempuri__SendLinks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__SendLinks(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__SendLinks, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__SendLinks);
		if (size)
			*size = sizeof(struct __tempuri__SendLinks);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__SendLinks, n);
		if (size)
			*size = n * sizeof(struct __tempuri__SendLinks);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__SendLinks*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__SendLinks(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__SendLinks %p -> %p\n", q, p));
	*(struct __tempuri__SendLinks*)p = *(struct __tempuri__SendLinks*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetNamesDictionary(struct soap *soap, struct __tempuri__GetNamesDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetNamesDictionary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetNamesDictionary(struct soap *soap, const struct __tempuri__GetNamesDictionary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetNamesDictionary(soap, &a->tempuri__GetNamesDictionary);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetNamesDictionary(struct soap *soap, const char *tag, int id, const struct __tempuri__GetNamesDictionary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetNamesDictionary(soap, "tempuri:GetNamesDictionary", -1, &a->tempuri__GetNamesDictionary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetNamesDictionary * SOAP_FMAC4 soap_in___tempuri__GetNamesDictionary(struct soap *soap, const char *tag, struct __tempuri__GetNamesDictionary *a, const char *type)
{
	size_t soap_flag_tempuri__GetNamesDictionary = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetNamesDictionary *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetNamesDictionary, sizeof(struct __tempuri__GetNamesDictionary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetNamesDictionary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetNamesDictionary && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetNamesDictionary(soap, "tempuri:GetNamesDictionary", &a->tempuri__GetNamesDictionary, ""))
				{	soap_flag_tempuri__GetNamesDictionary--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetNamesDictionary(struct soap *soap, const struct __tempuri__GetNamesDictionary *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetNamesDictionary(soap, tag?tag:"-tempuri:GetNamesDictionary", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetNamesDictionary * SOAP_FMAC4 soap_get___tempuri__GetNamesDictionary(struct soap *soap, struct __tempuri__GetNamesDictionary *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetNamesDictionary * SOAP_FMAC2 soap_instantiate___tempuri__GetNamesDictionary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetNamesDictionary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetNamesDictionary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetNamesDictionary);
		if (size)
			*size = sizeof(struct __tempuri__GetNamesDictionary);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetNamesDictionary, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetNamesDictionary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetNamesDictionary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetNamesDictionary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetNamesDictionary %p -> %p\n", q, p));
	*(struct __tempuri__GetNamesDictionary*)p = *(struct __tempuri__GetNamesDictionary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetLink(struct soap *soap, struct __tempuri__GetLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__GetLink = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetLink(struct soap *soap, const struct __tempuri__GetLink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_tempuri__GetLink(soap, &a->tempuri__GetLink);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetLink(struct soap *soap, const char *tag, int id, const struct __tempuri__GetLink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_tempuri__GetLink(soap, "tempuri:GetLink", -1, &a->tempuri__GetLink, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetLink * SOAP_FMAC4 soap_in___tempuri__GetLink(struct soap *soap, const char *tag, struct __tempuri__GetLink *a, const char *type)
{
	size_t soap_flag_tempuri__GetLink = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __tempuri__GetLink *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__GetLink, sizeof(struct __tempuri__GetLink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__GetLink(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__GetLink && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__GetLink(soap, "tempuri:GetLink", &a->tempuri__GetLink, ""))
				{	soap_flag_tempuri__GetLink--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetLink(struct soap *soap, const struct __tempuri__GetLink *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___tempuri__GetLink(soap, tag?tag:"-tempuri:GetLink", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__GetLink * SOAP_FMAC4 soap_get___tempuri__GetLink(struct soap *soap, struct __tempuri__GetLink *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__GetLink * SOAP_FMAC2 soap_instantiate___tempuri__GetLink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__GetLink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__GetLink, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __tempuri__GetLink);
		if (size)
			*size = sizeof(struct __tempuri__GetLink);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __tempuri__GetLink, n);
		if (size)
			*size = n * sizeof(struct __tempuri__GetLink);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __tempuri__GetLink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__GetLink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__GetLink %p -> %p\n", q, p));
	*(struct __tempuri__GetLink*)p = *(struct __tempuri__GetLink*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetSearchPhrase(struct soap *soap, _tempuri__SetSearchPhrase *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SetSearchPhrase))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetSearchPhrase(struct soap *soap, const char *tag, int id, _tempuri__SetSearchPhrase *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SetSearchPhrase);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SetSearchPhrase ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetSearchPhrase(struct soap *soap, const char *tag, _tempuri__SetSearchPhrase **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SetSearchPhrase **)soap_malloc(soap, sizeof(_tempuri__SetSearchPhrase *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SetSearchPhrase *)soap_instantiate__tempuri__SetSearchPhrase(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SetSearchPhrase ** p = (_tempuri__SetSearchPhrase **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SetSearchPhrase, sizeof(_tempuri__SetSearchPhrase), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetSearchPhrase(struct soap *soap, _tempuri__SetSearchPhrase *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SetSearchPhrase);
	if (soap_out_PointerTo_tempuri__SetSearchPhrase(soap, tag?tag:"tempuri:SetSearchPhrase", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SetSearchPhrase ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetSearchPhrase(struct soap *soap, _tempuri__SetSearchPhrase **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SetSearchPhrase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetName(struct soap *soap, _tempuri__SetName *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SetName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetName(struct soap *soap, const char *tag, int id, _tempuri__SetName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SetName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SetName ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetName(struct soap *soap, const char *tag, _tempuri__SetName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SetName **)soap_malloc(soap, sizeof(_tempuri__SetName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SetName *)soap_instantiate__tempuri__SetName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SetName ** p = (_tempuri__SetName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SetName, sizeof(_tempuri__SetName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetName(struct soap *soap, _tempuri__SetName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SetName);
	if (soap_out_PointerTo_tempuri__SetName(soap, tag?tag:"tempuri:SetName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SetName ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetName(struct soap *soap, _tempuri__SetName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SetName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SetSite(struct soap *soap, _tempuri__SetSite *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SetSite))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SetSite(struct soap *soap, const char *tag, int id, _tempuri__SetSite *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SetSite);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SetSite ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SetSite(struct soap *soap, const char *tag, _tempuri__SetSite **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SetSite **)soap_malloc(soap, sizeof(_tempuri__SetSite *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SetSite *)soap_instantiate__tempuri__SetSite(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SetSite ** p = (_tempuri__SetSite **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SetSite, sizeof(_tempuri__SetSite), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SetSite(struct soap *soap, _tempuri__SetSite *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SetSite);
	if (soap_out_PointerTo_tempuri__SetSite(soap, tag?tag:"tempuri:SetSite", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SetSite ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SetSite(struct soap *soap, _tempuri__SetSite **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SetSite(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetSearchPhrases(struct soap *soap, _tempuri__GetSearchPhrases *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetSearchPhrases))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetSearchPhrases(struct soap *soap, const char *tag, int id, _tempuri__GetSearchPhrases *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetSearchPhrases);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetSearchPhrases ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetSearchPhrases(struct soap *soap, const char *tag, _tempuri__GetSearchPhrases **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetSearchPhrases **)soap_malloc(soap, sizeof(_tempuri__GetSearchPhrases *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetSearchPhrases *)soap_instantiate__tempuri__GetSearchPhrases(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetSearchPhrases ** p = (_tempuri__GetSearchPhrases **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetSearchPhrases, sizeof(_tempuri__GetSearchPhrases), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetSearchPhrases(struct soap *soap, _tempuri__GetSearchPhrases *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetSearchPhrases);
	if (soap_out_PointerTo_tempuri__GetSearchPhrases(soap, tag?tag:"tempuri:GetSearchPhrases", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetSearchPhrases ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetSearchPhrases(struct soap *soap, _tempuri__GetSearchPhrases **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetSearchPhrases(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetPages(struct soap *soap, _tempuri__GetPages *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetPages))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetPages(struct soap *soap, const char *tag, int id, _tempuri__GetPages *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetPages);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetPages ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetPages(struct soap *soap, const char *tag, _tempuri__GetPages **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetPages **)soap_malloc(soap, sizeof(_tempuri__GetPages *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetPages *)soap_instantiate__tempuri__GetPages(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetPages ** p = (_tempuri__GetPages **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetPages, sizeof(_tempuri__GetPages), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetPages(struct soap *soap, _tempuri__GetPages *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetPages);
	if (soap_out_PointerTo_tempuri__GetPages(soap, tag?tag:"tempuri:GetPages", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetPages ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetPages(struct soap *soap, _tempuri__GetPages **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetPages(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetSites(struct soap *soap, _tempuri__GetSites *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetSites))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetSites(struct soap *soap, const char *tag, int id, _tempuri__GetSites *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetSites);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetSites ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetSites(struct soap *soap, const char *tag, _tempuri__GetSites **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetSites **)soap_malloc(soap, sizeof(_tempuri__GetSites *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetSites *)soap_instantiate__tempuri__GetSites(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetSites ** p = (_tempuri__GetSites **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetSites, sizeof(_tempuri__GetSites), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetSites(struct soap *soap, _tempuri__GetSites *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetSites);
	if (soap_out_PointerTo_tempuri__GetSites(soap, tag?tag:"tempuri:GetSites", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetSites ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetSites(struct soap *soap, _tempuri__GetSites **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetSites(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNames(struct soap *soap, _tempuri__GetNames *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetNames))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNames(struct soap *soap, const char *tag, int id, _tempuri__GetNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetNames);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetNames ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNames(struct soap *soap, const char *tag, _tempuri__GetNames **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetNames **)soap_malloc(soap, sizeof(_tempuri__GetNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetNames *)soap_instantiate__tempuri__GetNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetNames ** p = (_tempuri__GetNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetNames, sizeof(_tempuri__GetNames), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNames(struct soap *soap, _tempuri__GetNames *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetNames);
	if (soap_out_PointerTo_tempuri__GetNames(soap, tag?tag:"tempuri:GetNames", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetNames ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNames(struct soap *soap, _tempuri__GetNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetStatsByName(struct soap *soap, _tempuri__GetStatsByName *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetStatsByName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetStatsByName(struct soap *soap, const char *tag, int id, _tempuri__GetStatsByName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetStatsByName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetStatsByName ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetStatsByName(struct soap *soap, const char *tag, _tempuri__GetStatsByName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetStatsByName **)soap_malloc(soap, sizeof(_tempuri__GetStatsByName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetStatsByName *)soap_instantiate__tempuri__GetStatsByName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetStatsByName ** p = (_tempuri__GetStatsByName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetStatsByName, sizeof(_tempuri__GetStatsByName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetStatsByName(struct soap *soap, _tempuri__GetStatsByName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetStatsByName);
	if (soap_out_PointerTo_tempuri__GetStatsByName(soap, tag?tag:"tempuri:GetStatsByName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetStatsByName ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetStatsByName(struct soap *soap, _tempuri__GetStatsByName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetStatsByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetDailyStats(struct soap *soap, _tempuri__GetDailyStats *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetDailyStats))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetDailyStats(struct soap *soap, const char *tag, int id, _tempuri__GetDailyStats *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetDailyStats);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetDailyStats ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetDailyStats(struct soap *soap, const char *tag, _tempuri__GetDailyStats **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetDailyStats **)soap_malloc(soap, sizeof(_tempuri__GetDailyStats *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetDailyStats *)soap_instantiate__tempuri__GetDailyStats(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetDailyStats ** p = (_tempuri__GetDailyStats **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetDailyStats, sizeof(_tempuri__GetDailyStats), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetDailyStats(struct soap *soap, _tempuri__GetDailyStats *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetDailyStats);
	if (soap_out_PointerTo_tempuri__GetDailyStats(soap, tag?tag:"tempuri:GetDailyStats", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetDailyStats ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetDailyStats(struct soap *soap, _tempuri__GetDailyStats **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetDailyStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetStats(struct soap *soap, _tempuri__GetStats *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetStats))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetStats(struct soap *soap, const char *tag, int id, _tempuri__GetStats *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetStats);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetStats ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetStats(struct soap *soap, const char *tag, _tempuri__GetStats **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetStats **)soap_malloc(soap, sizeof(_tempuri__GetStats *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetStats *)soap_instantiate__tempuri__GetStats(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetStats ** p = (_tempuri__GetStats **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetStats, sizeof(_tempuri__GetStats), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetStats(struct soap *soap, _tempuri__GetStats *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetStats);
	if (soap_out_PointerTo_tempuri__GetStats(soap, tag?tag:"tempuri:GetStats", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetStats ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetStats(struct soap *soap, _tempuri__GetStats **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetStats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SendAmountDictionary(struct soap *soap, _tempuri__SendAmountDictionary *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SendAmountDictionary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SendAmountDictionary(struct soap *soap, const char *tag, int id, _tempuri__SendAmountDictionary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SendAmountDictionary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SendAmountDictionary ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SendAmountDictionary(struct soap *soap, const char *tag, _tempuri__SendAmountDictionary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SendAmountDictionary **)soap_malloc(soap, sizeof(_tempuri__SendAmountDictionary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SendAmountDictionary *)soap_instantiate__tempuri__SendAmountDictionary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SendAmountDictionary ** p = (_tempuri__SendAmountDictionary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SendAmountDictionary, sizeof(_tempuri__SendAmountDictionary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SendAmountDictionary(struct soap *soap, _tempuri__SendAmountDictionary *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SendAmountDictionary);
	if (soap_out_PointerTo_tempuri__SendAmountDictionary(soap, tag?tag:"tempuri:SendAmountDictionary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SendAmountDictionary ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SendAmountDictionary(struct soap *soap, _tempuri__SendAmountDictionary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SendAmountDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__SendLinks(struct soap *soap, _tempuri__SendLinks *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__SendLinks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__SendLinks(struct soap *soap, const char *tag, int id, _tempuri__SendLinks *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__SendLinks);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__SendLinks ** SOAP_FMAC4 soap_in_PointerTo_tempuri__SendLinks(struct soap *soap, const char *tag, _tempuri__SendLinks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__SendLinks **)soap_malloc(soap, sizeof(_tempuri__SendLinks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__SendLinks *)soap_instantiate__tempuri__SendLinks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__SendLinks ** p = (_tempuri__SendLinks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__SendLinks, sizeof(_tempuri__SendLinks), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__SendLinks(struct soap *soap, _tempuri__SendLinks *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__SendLinks);
	if (soap_out_PointerTo_tempuri__SendLinks(soap, tag?tag:"tempuri:SendLinks", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__SendLinks ** SOAP_FMAC4 soap_get_PointerTo_tempuri__SendLinks(struct soap *soap, _tempuri__SendLinks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__SendLinks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetNamesDictionary(struct soap *soap, _tempuri__GetNamesDictionary *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetNamesDictionary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetNamesDictionary(struct soap *soap, const char *tag, int id, _tempuri__GetNamesDictionary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetNamesDictionary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetNamesDictionary ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetNamesDictionary(struct soap *soap, const char *tag, _tempuri__GetNamesDictionary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetNamesDictionary **)soap_malloc(soap, sizeof(_tempuri__GetNamesDictionary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetNamesDictionary *)soap_instantiate__tempuri__GetNamesDictionary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetNamesDictionary ** p = (_tempuri__GetNamesDictionary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetNamesDictionary, sizeof(_tempuri__GetNamesDictionary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetNamesDictionary(struct soap *soap, _tempuri__GetNamesDictionary *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetNamesDictionary);
	if (soap_out_PointerTo_tempuri__GetNamesDictionary(soap, tag?tag:"tempuri:GetNamesDictionary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetNamesDictionary ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetNamesDictionary(struct soap *soap, _tempuri__GetNamesDictionary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetNamesDictionary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetLink(struct soap *soap, _tempuri__GetLink *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetLink))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetLink(struct soap *soap, const char *tag, int id, _tempuri__GetLink *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetLink);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetLink ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetLink(struct soap *soap, const char *tag, _tempuri__GetLink **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetLink **)soap_malloc(soap, sizeof(_tempuri__GetLink *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetLink *)soap_instantiate__tempuri__GetLink(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetLink ** p = (_tempuri__GetLink **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetLink, sizeof(_tempuri__GetLink), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetLink(struct soap *soap, _tempuri__GetLink *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_tempuri__GetLink);
	if (soap_out_PointerTo_tempuri__GetLink(soap, tag?tag:"tempuri:GetLink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetLink ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetLink(struct soap *soap, _tempuri__GetLink **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetLink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Page(struct soap *soap, ns1__Page **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__Page))
		soap_serialize_PointerTons1__Page(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Page(struct soap *soap, const char *tag, int id, ns1__Page **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__Page);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__Page(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__Page *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Page(struct soap *soap, const char *tag, ns1__Page ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Page ***)soap_malloc(soap, sizeof(ns1__Page **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__Page(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__Page ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__Page, sizeof(ns1__Page *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Page(struct soap *soap, ns1__Page **const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToPointerTons1__Page);
	if (soap_out_PointerToPointerTons1__Page(soap, tag?tag:"ns1:Page", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Page *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Page(struct soap *soap, ns1__Page ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__Page(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Page(struct soap *soap, ns1__Page *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Page))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Page(struct soap *soap, const char *tag, int id, ns1__Page *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Page);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Page ** SOAP_FMAC4 soap_in_PointerTons1__Page(struct soap *soap, const char *tag, ns1__Page **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Page **)soap_malloc(soap, sizeof(ns1__Page *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Page *)soap_instantiate_ns1__Page(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Page ** p = (ns1__Page **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Page, sizeof(ns1__Page), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Page(struct soap *soap, ns1__Page *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__Page);
	if (soap_out_PointerTons1__Page(soap, tag?tag:"ns1:Page", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Page ** SOAP_FMAC4 soap_get_PointerTons1__Page(struct soap *soap, ns1__Page **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Page(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** p = (_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1-KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1_KeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *)soap_instantiate__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring ** p = (_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring, sizeof(_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag?tag:"arr:ArrayOfKeyValueOfintstring-KeyValueOfintstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(struct soap *soap, _arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfintstring_KeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *)soap_instantiate__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint ** p = (_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint, sizeof(_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeint-KeyValueOfdateTimeint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeint_KeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_instantiate__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** p = (_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1-KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1_KeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *)soap_instantiate__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint ** p = (_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint, sizeof(_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag?tag:"arr:ArrayOfKeyValueOfstringint-KeyValueOfstringint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(struct soap *soap, _arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfstringint_KeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 **)soap_malloc(soap, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *)soap_instantiate__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 ** p = (_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1, sizeof(_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1);
	if (soap_out_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1-KeyValueOfstringArrayOfstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, _arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1_KeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *)soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** p = (arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfKeyValueOfintstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfPage(struct soap *soap, ns1__ArrayOfPage *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfPage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfPage(struct soap *soap, const char *tag, int id, ns1__ArrayOfPage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfPage);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfPage ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfPage(struct soap *soap, const char *tag, ns1__ArrayOfPage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfPage **)soap_malloc(soap, sizeof(ns1__ArrayOfPage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfPage *)soap_instantiate_ns1__ArrayOfPage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfPage ** p = (ns1__ArrayOfPage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfPage, sizeof(ns1__ArrayOfPage), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfPage(struct soap *soap, ns1__ArrayOfPage *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__ArrayOfPage);
	if (soap_out_PointerTons1__ArrayOfPage(soap, tag?tag:"ns1:ArrayOfPage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfPage ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfPage(struct soap *soap, ns1__ArrayOfPage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfPage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfintstring(struct soap *soap, arr__ArrayOfKeyValueOfintstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfintstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfintstring ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfintstring(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfintstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfintstring **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfintstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfintstring *)soap_instantiate_arr__ArrayOfKeyValueOfintstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfintstring ** p = (arr__ArrayOfKeyValueOfintstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfintstring, sizeof(arr__ArrayOfKeyValueOfintstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfintstring(struct soap *soap, arr__ArrayOfKeyValueOfintstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfintstring);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfintstring(soap, tag?tag:"arr:ArrayOfKeyValueOfintstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfintstring ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfintstring(struct soap *soap, arr__ArrayOfKeyValueOfintstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfintstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfdateTimeint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeint ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfdateTimeint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfdateTimeint **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfdateTimeint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfdateTimeint *)soap_instantiate_arr__ArrayOfKeyValueOfdateTimeint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfdateTimeint ** p = (arr__ArrayOfKeyValueOfdateTimeint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeint, sizeof(arr__ArrayOfKeyValueOfdateTimeint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeint);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeint ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfdateTimeint(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *)soap_instantiate_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** p = (arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfdateTimeArrayOfKeyValueOfstringintty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfstringint(struct soap *soap, arr__ArrayOfKeyValueOfstringint *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfstringint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringint ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfstringint(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfstringint **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfstringint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfstringint *)soap_instantiate_arr__ArrayOfKeyValueOfstringint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfstringint ** p = (arr__ArrayOfKeyValueOfstringint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringint, sizeof(arr__ArrayOfKeyValueOfstringint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfstringint(struct soap *soap, arr__ArrayOfKeyValueOfstringint *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringint);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringint(soap, tag?tag:"arr:ArrayOfKeyValueOfstringint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringint ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfstringint(struct soap *soap, arr__ArrayOfKeyValueOfstringint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfstringint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfstring(struct soap *soap, const char *tag, int id, arr__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfstring(struct soap *soap, const char *tag, arr__ArrayOfstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfstring **)soap_malloc(soap, sizeof(arr__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfstring *)soap_instantiate_arr__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfstring ** p = (arr__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfstring, sizeof(arr__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfstring);
	if (soap_out_PointerToarr__ArrayOfstring(soap, tag?tag:"arr:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, int id, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, const char *tag, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **)soap_malloc(soap, sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *)soap_instantiate_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** p = (arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1, sizeof(arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1);
	if (soap_out_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag?tag:"arr:ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(struct soap *soap, arr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarr__ArrayOfKeyValueOfstringArrayOfstringty7Ep6D1(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
